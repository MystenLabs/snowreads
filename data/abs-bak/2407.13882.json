{"id":"2407.13882","title":"Pure Subtype Systems Are Type-Safe","authors":"Valentin Pasquale, \\'Alvaro Garc\\'ia-P\\'erez","authorsParsed":[["Pasquale","Valentin",""],["García-Pérez","Álvaro",""]],"versions":[{"version":"v1","created":"Thu, 18 Jul 2024 19:57:06 GMT"}],"updateDate":"2024-07-22","timestamp":1721332626000,"abstract":"  We address the open problem of type safety in Hutchins' pure subtype systems\n(PSS). PSS (hereafter in the singular) harmoniously mixes terms and types, thus\nenabling a number of advanced language features that combine dependent types\nwith higher-order subtyping. In PSS terms and types belong to the same kind\n(everything is a subtype) and the resulting theory is based on subtyping. Since\nPSS lacks strong normalisation, a type soundness result can only be stated in\nterms of type safety defined as progress and preservation. Proving type safety\nrests on the well-known problem of transitivity elimination in higher-order\nsubtyping, where a key inversion lemma fails under the presence of intermediary\nsteps in transitive subtype derivations. Despite his attempts, Hutchins failed\nto prove PSS type safety. We propose a reformulation of pure subtype systems\nwith a more fine-grained notion of subtyping derivation that enables a direct\nproof of transitivity elimination, and thus of type safety. We also reformulate\nHutchins' practical type-checking algorithm to our system and prove it correct.\n","subjects":["Computing Research Repository/Logic in Computer Science"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"CXqLuKMO3f0DX1vf2p-LPi-aOn3sZUp76fdxCJuncQ4","pdfSize":"440707","objectId":"0xf9d66377a07df1d3d9f41260959faee6fa62ffc32a2e3b92abeb676e5fdda2f4","registeredEpoch":"3","certifiedEpoch":"3","startEpoch":"3","endEpoch":"203"}
