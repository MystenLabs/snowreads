{"id":"2407.16626","title":"A Tale of Two DL Cities: When Library Tests Meet Compiler","authors":"Qingchao Shen, Yongqiang Tian, Haoyang Ma, Junjie Chen, Lili Huang,\n  Ruifeng Fu, Shing-Chi Cheung, Zan Wang","authorsParsed":[["Shen","Qingchao",""],["Tian","Yongqiang",""],["Ma","Haoyang",""],["Chen","Junjie",""],["Huang","Lili",""],["Fu","Ruifeng",""],["Cheung","Shing-Chi",""],["Wang","Zan",""]],"versions":[{"version":"v1","created":"Tue, 23 Jul 2024 16:35:45 GMT"},{"version":"v2","created":"Wed, 14 Aug 2024 14:25:37 GMT"}],"updateDate":"2024-08-15","timestamp":1721752545000,"abstract":"  Deep Learning (DL) compilers typically load a DL model and optimize it with\nintermediate representation.Existing DL compiler testing techniques mainly\nfocus on model optimization stages, but rarely explore bug detection at the\nmodel loading stage. Effectively testing the model loading stage requires\ncovering diverse usages of each DL operator from various DL libraries, which\nshares a common objective with DL library testing, indicating that the embedded\nknowledge in DL library tests is beneficial for testing the model loading stage\nof DL compilers. In this work, we propose OPERA to extract such domain\nknowledge from the test inputs for DL libraries. OPERA constructs diverse tests\nfrom the various test inputs for DL libraries (including the test inputs\ndocumented in DL libraries and those generated by recent fuzzers). In addition,\nit incorporates a diversity-based test prioritization strategy to migrate and\nexecute those test inputs that are more likely to detect diverse bugs earlier.\nWe considered three sources of tests in DL libraries for migration and used\neight frontends from three DL compilers (e.g., TVM, TensorRT, and OpenVINO) for\nevaluation. OPERA detected 170 previously unknown bugs in total, 90 of which\nhave been confirmed/fixed by developers, demonstrating the effectiveness of\nsuch the migration-based idea. The test prioritization strategy in OPERA\nimproves testing efficiency with migrated tests by 11.9%~47.4% on average\ncompared to general test prioritization strategies.\n","subjects":["Computing Research Repository/Software Engineering"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"0i1H_1CUEGDvv2v6dfrBCYZrMekibdg8y67ZlVcO1Ps","pdfSize":"797960","objectId":"0xdca0fc0f1bfdf8d4b742e06407c523c78af3ba89fcb0b829c565c47f5fb6525d","registeredEpoch":"2","certifiedEpoch":"2","startEpoch":"2","endEpoch":"202"}
