{"id":"2412.10072","title":"Africanus II. QuartiCal: calibrating radio interferometer data at scale\n  using Numba and Dask","authors":"Jonathan S. Kenyon, Simon J. Perkins, Hertzog L. Bester, Oleg M.\n  Smirnov, Cyndie Russeeawon, Benjamin V. Hugo","authorsParsed":[["Kenyon","Jonathan S.",""],["Perkins","Simon J.",""],["Bester","Hertzog L.",""],["Smirnov","Oleg M.",""],["Russeeawon","Cyndie",""],["Hugo","Benjamin V.",""]],"versions":[{"version":"v1","created":"Fri, 13 Dec 2024 12:01:24 GMT"},{"version":"v2","created":"Tue, 17 Dec 2024 11:45:27 GMT"}],"updateDate":"2024-12-18","timestamp":1734091284000,"abstract":"  Calibration of radio interferometer data ought to be a solved problem; it has\nbeen an integral part of data reduction for some time. However, as larger, more\nsensitive radio interferometers are conceived and built, the calibration\nproblem grows in both size and difficulty.\n  The increasing size can be attributed to the fact that the data volume scales\nquadratically with the number of antennas in an array. Additionally, new\ninstruments may have up to two orders of magnitude more channels than their\npredecessors. Simultaneously, increasing sensitivity is making calibration more\nchallenging: low-level RFI and calibration artefacts (in the resulting images)\nwhich would previously have been subsumed by the noise may now limit dynamic\nrange and, ultimately, the derived science.\n  It is against this backdrop that we introduce QuartiCal: a new Python package\nimplementing radio interferometric calibration routines. QuartiCal improves\nupon its predecessor, CubiCal, in terms of both flexibility and performance.\nWhilst the same mathematical framework - complex optimization using Wirtinger\nderivatives - is in use, the approach has been refined to support arbitrary\nlength chains of parameterized gain terms.\n  QuartiCal utilizes Dask, a library for parallel computing in Python, to\nexpress calibration as an embarrassingly parallel task graph. These task graphs\ncan (with some constraints) be mapped onto a number of different hardware\nconfigurations, allowing QuartiCal to scale from running locally on consumer\nhardware to a distributed, cloud-based cluster.\n  QuartiCal's qualitative behaviour is demonstrated using MeerKAT observations\nof PSR J2009-2026. These qualitative results are followed by an analysis of\nQuartiCal's performance in terms of wall time and memory footprint for a number\nof calibration scenarios and hardware configurations.\n","subjects":["Astrophysics/Instrumentation and Methods for Astrophysics"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"hNxPzcABvxKGRwEhIhBsb9tap6hYZwejguYdVmEMjYc","pdfSize":"10109456"}