{"id":"2407.04144","title":"Annotating Control-Flow Graphs for Formalized Test Coverage Criteria","authors":"Sean Kauffman, Carlos Moreno, Sebastian Fischmeister","authorsParsed":[["Kauffman","Sean",""],["Moreno","Carlos",""],["Fischmeister","Sebastian",""]],"versions":[{"version":"v1","created":"Thu, 4 Jul 2024 20:13:03 GMT"}],"updateDate":"2024-07-08","timestamp":1720123983000,"abstract":"  Control flow coverage criteria are an important part of the process of\nqualifying embedded software for safety-critical systems. Criteria such as\nmodified condition/decision coverage (MC/DC) as defined by DO-178B are used by\nregulators to judge the adequacy of testing and by QA engineers to design tests\nwhen full path coverage is impossible.\n  Despite their importance, these coverage criteria are often misunderstood.\nOne problem is that their definitions are typically written in natural language\nspecification documents, making them imprecise. Other works have proposed\nformal definitions using binary predicate logic, but these definitions are\ndifficult to apply to the analysis of real programs. Control-Flow Graphs (CFGs)\nare the most common model for analyzing program logic in compilers, and seem to\nbe a good fit for defining and analyzing coverage criteria. However, CFGs\ndiscard the explicit concept of a decision, making their use for this task seem\nimpossible.\n  In this paper, we show how to annotate a CFG with decision information\ninferred from the graph itself. We call this annotated model a Control-Flow\nDecision Graph (CFDG) and we use it to formally define several common coverage\ncriteria. We have implemented our algorithms in a tool which we show can be\napplied to automatically annotate CFGs output from popular compilers.\n","subjects":["Computing Research Repository/Software Engineering"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"rXViYSHBpfvTPEEKyKxPuQcu3kUfObbSR3W-Yo90nvg","pdfSize":"505853"}