{
  "id": "2412.01059",
  "title": "Blindfold: Confidential Memory Management by Untrusted Operating System",
  "authors": "Caihua Li, Seung-seob Lee, Lin Zhong",
  "authorsParsed": [
    [
      "Li",
      "Caihua",
      ""
    ],
    [
      "Lee",
      "Seung-seob",
      ""
    ],
    [
      "Zhong",
      "Lin",
      ""
    ]
  ],
  "versions": [
    {
      "version": "v1",
      "created": "Mon, 2 Dec 2024 02:40:05 GMT"
    },
    {
      "version": "v2",
      "created": "Wed, 4 Dec 2024 18:04:58 GMT"
    },
    {
      "version": "v3",
      "created": "Thu, 5 Dec 2024 02:38:03 GMT"
    }
  ],
  "updateDate": "2024-12-06",
  "timestamp": 1733107205000,
  "abstract": "  Confidential Computing (CC) has received increasing attention in recent years\nas a mechanism to protect user data from untrusted operating systems (OSes).\nExisting CC solutions hide confidential memory from the OS and/or encrypt it to\nachieve confidentiality. In doing so, they render OS memory optimization\nunusable or complicate the trusted computing base (TCB) required for\noptimization. This paper presents our results toward overcoming these\nlimitations, synthesized in a CC design named Blindfold. Like many other CC\nsolutions, Blindfold relies on a small trusted software component running at a\nhigher privilege level than the kernel, called Guardian. It features three\ntechniques that can enhance existing CC solutions. First, instead of nesting\npage tables, Guardian mediates how the OS accesses memory and handles\nexceptions by switching page and interrupt tables. Second, Blindfold employs a\nlightweight capability system to regulate the kernel semantic access to user\nmemory, unifying case-by-case approaches in previous work. Finally, Blindfold\nprovides carefully designed secure ABI for confidential memory management\nwithout encryption. We report an implementation of Blindfold that works on\nARMv8-A/Linux. Using Blindfold prototype, we are able to evaluate the cost of\nenabling confidential memory management by the untrusted Linux kernel. We show\nBlindfold has a smaller runtime TCB than related systems and enjoys competitive\nperformance. More importantly, we show that the Linux kernel, including all of\nits memory optimizations except memory compression, can function properly for\nconfidential memory. This requires only about 400 lines of kernel\nmodifications.\n",
  "subjects": [
    "Computer Science/Cryptography and Security",
    "Computer Science/Operating Systems"
  ],
  "license": "http://creativecommons.org/licenses/by-nc-sa/4.0/",
  "blobId": "YohSgqzhGZinVlyenLnrtsEOK_pWSrN2Ve1wr-Pj55I",
  "pdfSize": "2869503"
}