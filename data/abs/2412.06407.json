{
  "id": "2412.06407",
  "title": "Normal Nested Answer Set Programs: Syntactics, Semantics and Logical\n  Calculi",
  "authors": "Gon\\c{c}al E. Imaz",
  "authorsParsed": [
    [
      "Imaz",
      "Gon√ßal E.",
      ""
    ]
  ],
  "versions": [
    {
      "version": "v1",
      "created": "Mon, 9 Dec 2024 11:36:46 GMT"
    }
  ],
  "updateDate": "2024-12-10",
  "timestamp": 1733744206000,
  "abstract": "  Nested answer set programming (NASP; Lifschitz et al., 1999) generalizes\nanswer set programming (ASP) by admitting nested expressions in rule bodies and\nheads, and thus, NASP aims at exploiting program succinctness. Yet, although\nNASP expressiveness is undoubtedly superior to ASP one, the former's reasoning\ncapabilities remain unexplored. This reality seems subsequent to the next\nexisting wide-ranging gap: normal nested programs (NNPs) are not known, or in\nother words, the nested normal-disjunctive boundary is unidentified thus far.\nSuch an unfavorable situation is yet antagonistic to that of ASP as its normal\nprograms (NPs) have been vital for propelling ASP. We will fill such a gap by\ndefining the NNPs, their semantics and their associated nested logical calculi.\nBesides, while the unique known way to compute nested programs is unfold them\nback, we propose to do so in their original form.\n  Firstly, we give the syntax of NNPs. For that, we initially define the\npositive-Horn nested-expressions and then an NNP rule as one whose head (resp.\nbody) is a positive-Horn (resp. general) nested-expression. Secondly, we set up\nthe semantics of NNPs by lifting to the nesting level, classical NP notions\nincluding: answer set, minimal and least model, closedness, supported-ness,\nimmediate consequence operator and program consistency. We besides show that\nNNP restricted to ASP coincides with NP. Thirdly, we introduce nested logical\ncalculi, concretely, nested unit-resolution and nested hyper unit-resolution,\nproving that they recover unit-resolution and hyper unit-resolution in the ASP\nsetting. We also show how both nested logical calculi allow to process the\nleast model of not-free NNP programs. To end, we demonstrate that computing\nanswer sets of (resp. not-free) NNP programs is (resp. P-complete) NP-complete.\n",
  "subjects": [
    "Computer Science/Logic in Computer Science"
  ],
  "license": "http://creativecommons.org/licenses/by/4.0/",
  "blobId": "ulJBR4eJyaAd0ORHaejVt9DRsgP5Y-fbzYpSNovzZA4",
  "pdfSize": "689364"
}