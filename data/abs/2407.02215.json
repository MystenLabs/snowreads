{"id":"2407.02215","title":"Concurrent Binary Trees for Large-Scale Game Components","authors":"Anis Benyoub and Jonathan Dupuy","authorsParsed":[["Benyoub","Anis",""],["Dupuy","Jonathan",""]],"versions":[{"version":"v1","created":"Tue, 2 Jul 2024 12:30:32 GMT"}],"updateDate":"2024-07-03","timestamp":1719923432000,"abstract":"  A concurrent binary tree (CBT) is a GPU-friendly data-structure suitable for\nthe generation of bisection based terrain tessellations, i.e., adaptive\ntriangulations over square domains. In this paper, we expand the benefits of\nthis data-structure in two respects. First, we show how to bring bisection\nbased tessellations to arbitrary polygon meshes rather than just squares. Our\napproach consists of mapping a triangular subdivision primitive, which we refer\nto as a bisector, to each halfedge of the input mesh. These bisectors can then\nbe subdivided adaptively to produce conforming triangulations solely based on\nhalfedge operators. Second, we alleviate a limitation that restricted the\ntriangulations to low subdivision levels. We do so by using the CBT as a memory\npool manager rather than an implicit encoding of the triangulation as done\noriginally. By using a CBT in this way, we concurrently allocate and/or release\nbisectors during adaptive subdivision using shared GPU memory. We demonstrate\nthe benefits of our improvements by rendering planetary scale geometry out of\nvery coarse meshes. Performance-wise, our triangulation method evaluates in\nless than 0.2ms on console-level hardware.\n","subjects":["Computing Research Repository/Graphics"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"teZlMOUbxC_jutTS5gHfUl-C7X0_kD4v0T9TOcE9HYs","pdfSize":"16250706"}