{"id":"2407.06375","title":"Macaw: A Machine Code Toolbox for the Busy Binary Analyst","authors":"Ryan G. Scott and Brett Boston and Benjamin Davis and Iavor Diatchki\n  and Mike Dodds and Joe Hendrix and Daniel Matichuk and Kevin Quick and\n  Tristan Ravitch and Valentin Robert and Benjamin Selfridge and Andrei\n  Stef\\u{a}nescu and Daniel Wagner and Simon Winwood","authorsParsed":[["Scott","Ryan G.",""],["Boston","Brett",""],["Davis","Benjamin",""],["Diatchki","Iavor",""],["Dodds","Mike",""],["Hendrix","Joe",""],["Matichuk","Daniel",""],["Quick","Kevin",""],["Ravitch","Tristan",""],["Robert","Valentin",""],["Selfridge","Benjamin",""],["StefÄƒnescu","Andrei",""],["Wagner","Daniel",""],["Winwood","Simon",""]],"versions":[{"version":"v1","created":"Mon, 8 Jul 2024 20:36:34 GMT"}],"updateDate":"2024-07-10","timestamp":1720470994000,"abstract":"  When attempting to understand the behavior of an executable, a binary analyst\ncan make use of many different techniques. These include program slicing,\ndynamic instrumentation, binary-level rewriting, symbolic execution, and formal\nverification, all of which can uncover insights into how a piece of machine\ncode behaves. As a result, there is no one-size-fits-all binary analysis tool,\nso a binary analysis researcher will often combine several different tools.\nSometimes, a researcher will even need to design new tools to study problems\nthat existing frameworks are not well equipped to handle. Designing such tools\nfrom complete scratch is rarely time- or cost-effective, however, given the\nscale and complexity of modern instruction set architectures.\n  We present Macaw, a modular framework that makes it possible to rapidly build\nreliable binary analysis tools across a range of use cases. Over a decade of\ndevelopment, we have used Macaw to support an industrial research team in\nbuilding tools for machine code-related tasks. As such, the name \"Macaw\" refers\nnot just to the framework itself, but also a suite of tools that are built on\ntop of the framework. We describe Macaw in depth and describe the different\nstatic and dynamic analyses that it performs, many of which are powered by an\nSMT-based symbolic execution engine. We put a particular focus on\ninteroperability between machine code and higher-level languages, including\nbinary lifting from x86 to LLVM, as well verifying the correctness of mixed C\nand assembly code.\n","subjects":["Computing Research Repository/Programming Languages"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"utz6rGhFZBFt9um9GQggRr5lRTXV2xh2oHZUclmb9mY","pdfSize":"319259"}