{"id":"2412.15042","title":"Compiling C to Safe Rust, Formalized","authors":"Aymeric Fromherz, Jonathan Protzenko","authorsParsed":[["Fromherz","Aymeric",""],["Protzenko","Jonathan",""]],"versions":[{"version":"v1","created":"Thu, 19 Dec 2024 16:51:29 GMT"}],"updateDate":"2024-12-20","timestamp":1734627089000,"abstract":"  The popularity of the Rust language continues to explode; yet, many critical\ncodebases remain authored in C, and cannot be realistically rewritten by hand.\nAutomatically translating C to Rust is thus an appealing course of action.\nSeveral works have gone down this path, handling an ever-increasing subset of C\nthrough a variety of Rust features, such as unsafe. While the prospect of\nautomation is appealing, producing code that relies on unsafe negates the\nmemory safety guarantees offered by Rust, and therefore the main advantages of\nporting existing codebases to memory-safe languages.\n  We instead explore a different path, and explore what it would take to\ntranslate C to safe Rust; that is, to produce code that is trivially memory\nsafe, because it abides by Rust's type system without caveats. Our work sports\nseveral original contributions: a type-directed translation from (a subset of)\nC to safe Rust; a novel static analysis based on \"split trees\" that allows\nexpressing C's pointer arithmetic using Rust's slices and splitting operations;\nan analysis that infers exactly which borrows need to be mutable; and a\ncompilation strategy for C's struct types that is compatible with Rust's\ndistinction between non-owned and owned allocations.\n  We apply our methodology to existing formally verified C codebases: the HACL*\ncryptographic library, and binary parsers and serializers from EverParse, and\nshow that the subset of C we support is sufficient to translate both\napplications to safe Rust. Our evaluation shows that for the few places that do\nviolate Rust's aliasing discipline, automated, surgical rewrites suffice; and\nthat the few strategic copies we insert have a negligible performance impact.\nOf particular note, the application of our approach to HACL* results in a\n80,000 line verified cryptographic library, written in pure Rust, that\nimplements all modern algorithms - the first of its kind.\n","subjects":["Computer Science/Programming Languages"],"license":"http://creativecommons.org/licenses/by-nc-sa/4.0/","blobId":"dKsQwBykx42wMBP0wggmHXm_yMsfPnmV0RITrsKVXBQ","pdfSize":"718012"}