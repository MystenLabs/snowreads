{"id":"2407.14044","title":"ECCO: Can We Improve Model-Generated Code Efficiency Without Sacrificing\n  Functional Correctness?","authors":"Siddhant Waghjale, Vishruth Veerendranath, Zora Zhiruo Wang, Daniel\n  Fried","authorsParsed":[["Waghjale","Siddhant",""],["Veerendranath","Vishruth",""],["Wang","Zora Zhiruo",""],["Fried","Daniel",""]],"versions":[{"version":"v1","created":"Fri, 19 Jul 2024 05:47:40 GMT"}],"updateDate":"2024-07-22","timestamp":1721368060000,"abstract":"  Although large language models (LLMs) have been largely successful in\ngenerating functionally correct programs, conditioning models to produce\nefficient solutions while ensuring correctness remains a challenge. Further,\nunreliability in benchmarking code efficiency is a hurdle across varying\nhardware specifications for popular interpreted languages such as Python. In\nthis paper, we present ECCO, a reproducible benchmark for evaluating program\nefficiency via two paradigms: natural language (NL) based code generation and\nhistory-based code editing. On ECCO, we adapt and thoroughly investigate the\nthree most promising existing LLM-based approaches: in-context learning,\niterative refinement with execution or NL feedback, and fine-tuning conditioned\non execution and editing history. While most methods degrade functional\ncorrectness and moderately increase program efficiency, we find that adding\nexecution information often helps maintain functional correctness, and NL\nfeedback enhances more on efficiency. We release our benchmark to support\nfuture work on LLM-based generation of efficient code.\n","subjects":["Computing Research Repository/Computation and Language","Computing Research Repository/Artificial Intelligence"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"edLMIHWzDRz3EVNCd6C-mPZ7CUu0CaExhD888WCRfG0","pdfSize":"680445"}