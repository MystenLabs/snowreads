{"id":"2407.00069","title":"Tracing Distributed Algorithms Using Replay Clocks","authors":"Ishaan Lagwankar","authorsParsed":[["Lagwankar","Ishaan",""]],"versions":[{"version":"v1","created":"Tue, 18 Jun 2024 16:25:02 GMT"}],"updateDate":"2024-07-02","timestamp":1718727902000,"abstract":"  In this thesis, we introduce replay clocks (RepCl), a novel clock\ninfrastructure that allows us to do offline analyses of distributed\ncomputations. The replay clock structure provides a methodology to replay a\ncomputation as it happened, with the ability to represent concurrent events\neffectively. It builds on the structures introduced by vector clocks (VC) and\nthe Hybrid Logical Clock (HLC), combining their infrastructures to provide\nefficient replay. With such a clock, a user can replay a computation whilst\nconsidering multiple paths of executions, and check for constraint violations\nand properties that potential pathways could take in the presence of concurrent\nevents. Specifically, if event e must occur before f then the replay clock must\nensure that e is replayed before f. On the other hand, if e and f could occur\nin any order, replay should not force an order between them. We demonstrate\nthat RepCl can be implemented with less than four integers for 64 processes for\nvarious system parameters if clocks are synchronized within 1ms. Furthermore,\nthe overhead of RepCl (for computing timestamps and message size) is\nproportional to the size of the clock. Using simulations in a custom\ndistributed system and NS-3, a state-of-the-art network simulator, we identify\nthe expected overhead of RepCl. We also identify how a user can then identify\nfeasibility region for RepCl, where unabridged replay is possible. Using the\nRepCl, we provide a tracer for distributed computations, that allows any\ncomputation using the RepCl to be replayed efficiently. The visualization\nallows users to analyze specific properties and constraints in an online\nfashion, with the ability to consider concurrent paths independently. The\nvisualization provides per-process views and an overarching view of the whole\ncomputation based on the time recorded by the RepCl for each event.\n","subjects":["Computing Research Repository/Distributed, Parallel, and Cluster Computing"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"aM3iSyDAmNu3cK_LA1UCjrTrxzNQaDBBLyCwoepLIFY","pdfSize":"2619942","objectId":"0x4b02b6ce3c20ea0ba42c45607853275b57ddbb455ae56e6fc0463f79cafb18fb","registeredEpoch":"1","certifiedEpoch":"1","startEpoch":"1","endEpoch":"201"}
