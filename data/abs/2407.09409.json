{"id":"2407.09409","title":"Thunderbolt: Causal Concurrent Consensus and Execution","authors":"Junchao Chen, Alberto Sonnino, Lefteris Kokoris-Kogias, Mohammad\n  Sadoghi","authorsParsed":[["Chen","Junchao",""],["Sonnino","Alberto",""],["Kokoris-Kogias","Lefteris",""],["Sadoghi","Mohammad",""]],"versions":[{"version":"v1","created":"Fri, 12 Jul 2024 16:35:17 GMT"}],"updateDate":"2024-07-15","timestamp":1720802117000,"abstract":"  In the realm of blockchain systems, smart contracts have gained widespread\nadoption owing to their programmability. Consequently, developing a system\ncapable of facilitating high throughput and scalability is of paramount\nimportance. Directed acyclic graph (DAG) consensus protocols have demonstrated\nnotable enhancements in both throughput and latency, however, the serial\nexecution is now becoming a bottleneck. Numerous approaches prove impractical\nfor smart contracts by assuming that read/write sets are known in prior. This\npaper introduces Thunderbolt, a novel architecture based on DAG-based\nprotocols, that aims to furnish a scalable and concurrent execution for smart\ncontract transactions. Inspired by Hyperledger, Thunderbolt also expands\nExecute-Order-Validate architecture in which transactions are distributed into\ndistinct replicas, with execution outcomes determined prior to ordering through\nthe DAG-based protocol. Existing protocols adopt serial executions after the\nordering to avoid non-determinism. However, Thunderbolt provides parallel\npre-execution before the ordering as well as parallel verifications once any\nsource of non-determinism is removed. Each replica validates the transaction\nresults during the construction of the DAG other than after the ordering\nfollowing the construction to improve the latency. In an effort to enhance\nsmart contract execution, we implement an execution engine that constructs a\ndependency graph to dynamically assign transaction orders, thus mitigating\nabort rates due to execution conflicts. Additionally, we introduce a novel\nshard reconfiguration to withstand malicious attacks by relocating replicas\nfrom the current DAG to a new DAG, and rotating the shards among different\nreplicas. Our comparison of the results on SmallBank with serial execution on\nNarwhal-Tusk revealed a remarkable 50 times speedup with 64 replicas.\n","subjects":["Computing Research Repository/Databases"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"pPU4HvaSGPh50c5c7CyEhkDNQxgOtLhrPuuEVFuXrWY","pdfSize":"1045315","objectId":"0x5a63c932ac7501d3601daf022828195d9a316174fc504f2bef8a67b87f98b71b","registeredEpoch":"2","certifiedEpoch":"2","startEpoch":"2","endEpoch":"202"}
