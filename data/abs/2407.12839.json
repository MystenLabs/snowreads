{"id":"2407.12839","title":"A Formal Analysis of Iterated TDD","authors":"Hemil Ruparel, Nabarun Mondal","authorsParsed":[["Ruparel","Hemil",""],["Mondal","Nabarun",""]],"versions":[{"version":"v1","created":"Thu, 4 Jul 2024 08:07:35 GMT"}],"updateDate":"2024-07-19","timestamp":1720080455000,"abstract":"  In this paper we formally analyze the software methodology called (iterated)\nTest Driven Development (TDD). We formally define Specification, Software,\nTesting, Equivalence Partitions, Coupling, to argue about the nature of the\nsoftware development in terms of TDD. We formalize Iterative TDD and find a\ncontext in which iterated TDD ``provably produce'' ``provably correct code''\nfrom ``specifications'' while being stable in terms of iterated code churns. We\ndemonstrate that outside this context iterated TDD will exhibit chaotic\nbehavior, implying unpredictable messy amount of code churn. We argue that the\nresearch finding of ``ineffective'' iterated TDD found by earlier researches\nare due to missing this context, while the findings of ``effective'' iterated\nTDD is due to accidentally falling into the context or simply placebo.\n","subjects":["Computing Research Repository/Software Engineering","Computing Research Repository/Systems and Control","Electrical Engineering and Systems Science/Systems and Control","Mathematics/Dynamical Systems","Mathematics/Optimization and Control"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"RVIBjg30t-GCcoZYWwX861C8M0vUbJTKs5YFj5g97g4","pdfSize":"238452","objectId":"0x6b08fc288b86c1e1d4f7eac48fa2b27743b88fb610e06f676b4ccbd7d541d72a","registeredEpoch":"3","certifiedEpoch":"3","startEpoch":"3","endEpoch":"203"}
