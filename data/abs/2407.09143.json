{"id":"2407.09143","title":"Higher-Order Specifications for Deductive Synthesis of Programs with\n  Pointers (Extended Version)","authors":"David Young, Ziyi Yang, Ilya Sergey, Alex Potanin","authorsParsed":[["Young","David",""],["Yang","Ziyi",""],["Sergey","Ilya",""],["Potanin","Alex",""]],"versions":[{"version":"v1","created":"Fri, 12 Jul 2024 10:21:09 GMT"},{"version":"v2","created":"Mon, 15 Jul 2024 06:30:54 GMT"}],"updateDate":"2024-07-16","timestamp":1720779669000,"abstract":"  Synthetic Separation Logic (SSL) is a formalism that powers SuSLik, the\nstate-of-the-art approach for the deductive synthesis of provably-correct\nprograms in C-like languages that manipulate Heap-based linked data structures.\nDespite its expressivity, SSL suffers from two shortcomings that hinder its\nutility. First, its main specification component, inductive predicates, only\nadmits first-order definitions of data structure shapes, which leads to the\nproliferation of ''boiler-plate'' predicates for specifying common patterns.\nSecond, SSL requires concrete definitions of data structures to synthesise\nprograms that manipulate them, which results in the need to change a\nspecification for a synthesis task every time changes are introduced into the\nlayout of the involved structures.\n  We propose to significantly lift the level of abstraction used in writing\nSeparation Logic specifications for synthesis -- both simplifying the approach\nand making the specifications more usable and easy to read and follow. We avoid\nthe need to repetitively re-state low-level representation details throughout\nthe specifications -- allowing the reuse of different implementations of the\nsame data structure by abstracting away the details of a specific layout used\nin memory. Our novel high-level front-end language called Pika significantly\nimproves the expressiveness of SuSLik.\n  We implemented a layout-agnostic synthesiser from Pika to SuSLik enabling\npush-button synthesis of C programs with in-place memory updates, along with\nthe accompanying full proofs that they meet Separation Logic-style\nspecifications, from high-level specifications that resemble ordinary\nfunctional programs. Our experiments show that our tool can produce C code that\nis comparable in its performance characteristics and is sometimes faster than\nHaskell.\n","subjects":["Computing Research Repository/Programming Languages"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"P8e060dNLOGUOWoLabbK0y-qPYpQb6hBOIm7dM9jvGA","pdfSize":"894680"}