{
  "id": "2412.16001",
  "title": "Multi-Strided Access Patterns to Boost Hardware Prefetching",
  "authors": "Miguel O. Blom, Kristian F. D. Rietveld, Rob V. van Nieuwpoort",
  "authorsParsed": [
    [
      "Blom",
      "Miguel O.",
      ""
    ],
    [
      "Rietveld",
      "Kristian F. D.",
      ""
    ],
    [
      "van Nieuwpoort",
      "Rob V.",
      ""
    ]
  ],
  "versions": [
    {
      "version": "v1",
      "created": "Fri, 20 Dec 2024 15:51:42 GMT"
    }
  ],
  "updateDate": "2024-12-23",
  "timestamp": 1734709902000,
  "abstract": "  Important memory-bound kernels, such as linear algebra, convolutions, and\nstencils, rely on SIMD instructions as well as optimizations targeting improved\nvectorized data traversal and data re-use to attain satisfactory performance.\nOn on temporary CPU architectures, the hardware prefetcher is of key importance\nfor efficient utilization of the memory hierarchy. In this paper, we\ndemonstrate that transforming a memory access pattern consisting of a single\nstride to one that concurrently accesses multiple strides, can boost the\nutilization of the hardware prefetcher, and in turn improves the performance of\nmemory-bound kernels significantly. Using a set of micro-benchmarks, we\nestablish that accessing memory in a multi-strided manner enables more cache\nlines to be concurrently brought into the cache, resulting in improved cache\nhit ratios and higher effective memory bandwidth without the introduction of\ncostly software prefetch instructions. Subsequently, we show that multi-strided\nvariants of a collection of six memory-bound dense compute kernels outperform\nstate-of-the-art counterparts on three different micro-architectures. More\nspecifically, for kernels among which Matrix Vector Multiplication, Convolution\nStencil and kernels from PolyBench, we achieve significant speedups of up to\n12.55x over Polly, 2.99x over MKL, 1.98x over OpenBLAS, 1.08x over Halide and\n1.87x over OpenCV. The code transformation to take advantage of multi-strided\nmemory access is a natural extension of the loop unroll and loop interchange\ntechniques, allowing this method to be incorporated into compiler pipelines in\nthe future.\n",
  "subjects": [
    "Computer Science/Performance"
  ],
  "license": "http://creativecommons.org/licenses/by/4.0/",
  "blobId": "gBvFObDkZvEJ_uIEkkyUKlXATUTK9jJnPDX2fDB72lU",
  "pdfSize": "1225451"
}