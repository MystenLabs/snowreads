{"id":"2412.13581","title":"Verified invertible lexer using regular expressions and DFAs","authors":"Samuel Chassot, Viktor Kun\\v{c}ak","authorsParsed":[["Chassot","Samuel",""],["Kunƒçak","Viktor",""]],"versions":[{"version":"v1","created":"Wed, 18 Dec 2024 08:03:17 GMT"}],"updateDate":"2024-12-19","timestamp":1734508997000,"abstract":"  In this project, we explore the concept of invertibility applied to\nserialisation and lexing frameworks. Recall that, on one hand, serialisation is\nthe process of taking a data structure and writing it to a bit array while\nparsing is the reverse operation, i.e., reading the bit array and constructing\nthe data structure back. While lexing, on the other hand, is the process of\nreading a stream of characters and splitting them into tokens, by following a\nlist of given rules. While used in different applications, both are similar in\ntheir abstract operation: they both take a list of simple characters and\nextract a more complex structure. Applications in which these two operations\nare used are different but they share a need for the invertibility of the\nprocess. For example, when tokenising a code file that was prettyprinted by a\ncompiler, one would expect to get the same sequence of tokens. Similarly, when\na spacecraft sends scientific data to the ground, one would expect the parsed\ndata to be the same as the one serialised by the spacecraft. The idea of this\nproject is to explore the idea of having a framework capable of generating\nparser/serialiser or lexer/prettyprinter pairs with a formally verified notion\nof invertibility. We first explore related works and frameworks. After that, we\npresent our verified lexer framework developed in Scala and verified using the\nStainless framework1. We explain the implementation choices we make and present\nthe specifications and their proofs. The code of the lexer with the proofs is\navailable on Github2. The main branch contains the regular expression (called\nregex from now on) matcher version and the verified Computable Languages while\nthe dfa match branch contains the version using the DFA matcher.\n","subjects":["Computer Science/Programming Languages","Computer Science/Software Engineering"],"license":"http://creativecommons.org/licenses/by-nc-nd/4.0/","blobId":"QWnZqynvY-8pgXuVsZEH6wlVR3jd8d6KuuaqEiQhktI","pdfSize":"257151"}