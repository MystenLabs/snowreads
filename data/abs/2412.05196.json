{"id":"2412.05196","title":"Exponential Speedups by Rerooting Levin Tree Search","authors":"Laurent Orseau, Marcus Hutter, Levi H.S. Lelis","authorsParsed":[["Orseau","Laurent",""],["Hutter","Marcus",""],["Lelis","Levi H. S.",""]],"versions":[{"version":"v1","created":"Fri, 6 Dec 2024 17:20:50 GMT"}],"updateDate":"2024-12-09","timestamp":1733505650000,"abstract":"  Levin Tree Search (LTS) (Orseau et al., 2018) is a search algorithm for\ndeterministic environments that uses a user-specified policy to guide the\nsearch. It comes with a formal guarantee on the number of search steps for\nfinding a solution node that depends on the quality of the policy. In this\npaper, we introduce a new algorithm, called $\\sqrt{\\text{LTS}}$ (pronounce\nroot-LTS), which implicitly starts an LTS search rooted at every node of the\nsearch tree. Each LTS search is assigned a rerooting weight by a (user-defined\nor learnt) rerooter, and the search effort is shared between all LTS searches\nproportionally to their weights. The rerooting mechanism implicitly decomposes\nthe search space into subtasks, leading to significant speedups. We prove that\nthe number of search steps that $\\sqrt{\\text{LTS}}$ takes is competitive with\nthe best decomposition into subtasks, at the price of a factor that relates to\nthe uncertainty of the rerooter. If LTS takes time $T$, in the best case with\n$q$ rerooting points, $\\sqrt{\\text{LTS}}$ only takes time $O(q\\sqrt[q]{T})$.\nLike the policy, the rerooter can be learnt from data, and we expect\n$\\sqrt{\\text{LTS}}$ to be applicable to a wide range of domains.\n","subjects":["Computer Science/Artificial Intelligence"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"XtxgvNXpQqCj8i1_edmWZ1ZF4eC84zP_bIg0-AFsxb0","pdfSize":"700907"}