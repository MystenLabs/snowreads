{"id":"2412.18035","title":"Generating refactored code accurately using reinforcement learning","authors":"Indranil Palit and Tushar Sharma","authorsParsed":[["Palit","Indranil",""],["Sharma","Tushar",""]],"versions":[{"version":"v1","created":"Mon, 23 Dec 2024 23:09:48 GMT"}],"updateDate":"2024-12-25","timestamp":1734995388000,"abstract":"  Automated source code refactoring, particularly extract method refactoring,\nis a crucial and frequently employed technique during software development.\nDespite its importance and frequent use by practitioners, current automated\ntechniques face significant limitations. These approaches often rely on\ndevelopers to identify the precise bounds of refactoring opportunities in terms\nof source code statements. Also, they often do not capture the semantic\ncontext, resulting in offering no automated means to suggest meaningful method\nname, for instance. To address these challenges, we propose a novel\nreinforcement learning-based approach for fine-tuning and aligning code\nlanguage models to perform automated, intelligent extract method refactoring on\nJava source code. Our approach fine-tunes sequence-to-sequence generative\nmodels and aligns them using the Proximal Policy Optimization (PPO) algorithm.\nWe utilize code compilation and presence of the refactoring in the generated\ncode as reward signals, providing a code-centric optimization process. Our\nexperiments demonstrate that our approach significantly enhances the\nperformance of large language models in code refactoring, as evidenced by both\nquantitative evaluation metrics such as BLEU, ROUGE, and CodeBLEU, and\nqualitative measures including syntactical and functional correctness. The\nsupervised fine-tuned model, further aligned with PPO, surpasses traditional\nsupervised fine-tuning by 11.96% and 16.45% in terms of BLEU and CodeBLEU\nscores, respectively. When subjected to a suite of 122 unit tests, the number\nof successful tests increased from 41 to 66 for the reinforcement learning\naligned fine-tuned Code-T5 model, highlighting the effectiveness of our\napproach in producing functionally correct refactorings.\n","subjects":["Computer Science/Software Engineering"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"NULTKZAdJJg2bVBokq1EhjwV0r5c35dcqw2-2w6q-vw","pdfSize":"1830689"}