{"id":"2412.02110","title":"Retrofitting XoM for Stripped Binaries without Embedded Data Relocation","authors":"Chenke Luo, Jiang Ming, Mengfei Xie, Guojun Peng and Jianming Fu","authorsParsed":[["Luo","Chenke",""],["Ming","Jiang",""],["Xie","Mengfei",""],["Peng","Guojun",""],["Fu","Jianming",""]],"versions":[{"version":"v1","created":"Tue, 3 Dec 2024 03:08:27 GMT"},{"version":"v2","created":"Wed, 4 Dec 2024 02:47:40 GMT"}],"updateDate":"2024-12-05","timestamp":1733195307000,"abstract":"  In this paper, we present PXoM, a practical technique to seamlessly retrofit\nXoM into stripped binaries on the x86-64 platform. As handling the mixture of\ncode and data is a well-known challenge for XoM, most existing methods require\nthe strict separation of code and data areas via either compile-time\ntransformation or binary patching, so that the unreadable permission can be\nsafely enforced at the granularity of memory pages. In contrast to previous\napproaches, we provide a fine-grained memory permission control mechanism to\nrestrict the read permission of code while allowing legitimate data reads\nwithin code pages. This novelty enables PXoM to harden stripped binaries but\nwithout resorting to error-prone embedded data relocation. We leverage Intel's\nhardware feature, Memory Protection Keys, to offer an efficient fine-grained\npermission control. We measure PXoM's performance with both micro- and\nmacro-benchmarks, and it only introduces negligible runtime overhead. Our\nsecurity evaluation shows that PXoM leaves adversaries with little wiggle room\nto harvest all of the required gadgets, suggesting PXoM is practical for\nreal-world deployment.\n","subjects":["Computer Science/Cryptography and Security","Computer Science/Operating Systems"],"license":"http://creativecommons.org/licenses/by-nc-sa/4.0/","blobId":"xWHJtCSfK6Lbb_WTKYK32gbjaR2ETB1ZmE9rrm4BmFc","pdfSize":"1161576"}