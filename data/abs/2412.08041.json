{"id":"2412.08041","title":"Quantifying the benefits of code hints for refactoring deprecated Java\n  APIs","authors":"Cristina David, Pascal Kesseli, Daniel Kroening, Hanliang Zhang","authorsParsed":[["David","Cristina",""],["Kesseli","Pascal",""],["Kroening","Daniel",""],["Zhang","Hanliang",""]],"versions":[{"version":"v1","created":"Wed, 11 Dec 2024 02:44:14 GMT"},{"version":"v2","created":"Tue, 11 Feb 2025 16:22:24 GMT"}],"updateDate":"2025-02-12","timestamp":1733885054000,"abstract":"  When done manually, refactoring legacy code in order to eliminate uses of\ndeprecated APIs is an error-prone and time-consuming process. In this paper, we\ninvestigate to which degree refactorings for deprecated Java APIs can be\nautomated, and quantify the benefit of Javadoc code hints for this task. To\nthis end, we build a symbolic and a neural engine for the automatic refactoring\nof deprecated APIs. The former is based on type-directed and component-based\nprogram synthesis, whereas the latter uses LLMs. We applied our engines to\nrefactor the deprecated methods in the Oracle JDK 15. Our experiments show that\ncode hints are enabling for the automation of this task: even the worst engine\ncorrectly refactors 71% of the tasks with code hints, which drops to at best\n14% on tasks without. Adding more code hints to Javadoc can hence boost the\nrefactoring of code that uses deprecated APIs.\n","subjects":["Computer Science/Software Engineering"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"1n_4lu5Qq4oSPehF3yY4Pxat1knxo4g41YdOrnCrDek","pdfSize":"286825"}