{"id":"2412.15931","title":"Large Language Model assisted Hybrid Fuzzing","authors":"Ruijie Meng, Gregory J. Duck, Abhik Roychoudhury","authorsParsed":[["Meng","Ruijie",""],["Duck","Gregory J.",""],["Roychoudhury","Abhik",""]],"versions":[{"version":"v1","created":"Fri, 20 Dec 2024 14:23:25 GMT"}],"updateDate":"2024-12-23","timestamp":1734704605000,"abstract":"  Greybox fuzzing is one of the most popular methods for detecting software\nvulnerabilities, which conducts a biased random search within the program input\nspace. To enhance its effectiveness in achieving deep coverage of program\nbehaviors, greybox fuzzing is often combined with concolic execution, which\nperforms a path-sensitive search over the domain of program inputs. In hybrid\nfuzzing, conventional greybox fuzzing is followed by concolic execution in an\niterative loop, where reachability roadblocks encountered by greybox fuzzing\nare tackled by concolic execution. However, such hybrid fuzzing still suffers\nfrom difficulties conventionally faced by symbolic execution, such as the need\nfor environment modeling and system call support. In this work, we show how to\nachieve the effect of concolic execution without having to compute and solve\nsymbolic path constraints. When coverage-based greybox fuzzing reaches a\nroadblock in terms of reaching certain branches, we conduct a slicing on the\nexecution trace and suggest modifications of the input to reach the relevant\nbranches. A Large Language Model (LLM) is used as a solver to generate the\nmodified input for reaching the desired branches. Compared with both the\nvanilla greybox fuzzer AFL and hybrid fuzzers Intriguer and Qsym, our LLM-based\nhybrid fuzzer HyLLfuzz (pronounced \"hill fuzz\") demonstrates superior coverage.\nFurthermore, the LLM-based concolic execution in HyLLfuzz takes a time that is\n4-19 times faster than the concolic execution running in existing hybrid\nfuzzing tools. This experience shows that LLMs can be effectively inserted into\nthe iterative loop of hybrid fuzzers, to efficiently expose more program\nbehaviors.\n","subjects":["Computer Science/Software Engineering","Computer Science/Cryptography and Security"],"license":"http://creativecommons.org/licenses/by-nc-nd/4.0/","blobId":"z5AfM9zbMM0lcq-zgt6NjoNXT5S4ul2PtYM2wOVR2pY","pdfSize":"2405934"}