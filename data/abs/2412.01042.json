{
  "id": "2412.01042",
  "title": "TruncFormer: Private LLM Inference Using Only Truncations",
  "authors": "Patrick Yubeaton, Jianqiao Cambridge Mo, Karthik Garimella, Nandan\n  Kumar Jha, Brandon Reagen, Chinmay Hegde, Siddharth Garg",
  "authorsParsed": [
    [
      "Yubeaton",
      "Patrick",
      ""
    ],
    [
      "Mo",
      "Jianqiao Cambridge",
      ""
    ],
    [
      "Garimella",
      "Karthik",
      ""
    ],
    [
      "Jha",
      "Nandan Kumar",
      ""
    ],
    [
      "Reagen",
      "Brandon",
      ""
    ],
    [
      "Hegde",
      "Chinmay",
      ""
    ],
    [
      "Garg",
      "Siddharth",
      ""
    ]
  ],
  "versions": [
    {
      "version": "v1",
      "created": "Mon, 2 Dec 2024 01:55:42 GMT"
    }
  ],
  "updateDate": "2024-12-03",
  "timestamp": 1733104542000,
  "abstract": "  Private inference (PI) serves an important role in guaranteeing the privacy\nof user data when interfacing with proprietary machine learning models such as\nLLMs. However, PI remains practically intractable due to the massive latency\ncosts associated with nonlinear functions present in LLMs. Existing works have\nfocused on improving latency of specific LLM nonlinearities (such as the\nSoftmax, or the GeLU) via approximations. However, new types of nonlinearities\nare regularly introduced with new LLM architectures, and this has led to a\nconstant game of catch-up where PI researchers attempt to optimize the newest\nnonlinear function. We introduce TruncFormer, a framework for taking any LLM\nand transforming it into a plaintext emulation of PI. Our framework leverages\nthe fact that nonlinearities in LLMs are differentiable and can be accurately\napproximated with a sequence of additions, multiplications, and truncations.\nFurther, we decouple the add/multiply and truncation operations, and statically\ndetermine where truncations should be inserted based on a given field size and\ninput representation size. This leads to latency improvements over existing\ncryptographic protocols that enforce truncation after every multiplication\noperation. We open source our code for community use.\n",
  "subjects": [
    "Computer Science/Cryptography and Security",
    "Computer Science/Machine Learning"
  ],
  "license": "http://creativecommons.org/licenses/by/4.0/",
  "blobId": "ACKwx-tnWWXcEFYV4Dgwxa-BqY44GVUPjjZ8BRDOvzg",
  "pdfSize": "664482"
}