{"id":"2407.08958","title":"Towards Practical and Useful Automated Program Repair for Debugging","authors":"Qi Xin, Haojun Wu, Steven P. Reiss, Jifeng Xuan","authorsParsed":[["Xin","Qi",""],["Wu","Haojun",""],["Reiss","Steven P.",""],["Xuan","Jifeng",""]],"versions":[{"version":"v1","created":"Fri, 12 Jul 2024 03:19:54 GMT"}],"updateDate":"2024-07-15","timestamp":1720754394000,"abstract":"  Current automated program repair (APR) techniques are far from being\npractical and useful enough to be considered for realistic debugging. They rely\non unrealistic assumptions including the requirement of a comprehensive suite\nof test cases as the correctness criterion and frequent program re-execution\nfor patch validation; they are not fast; and their ability of repairing the\ncommonly arising complex bugs by fixing multiple locations of the program is\nvery limited. We hope to substantially improve APR's practicality,\neffectiveness, and usefulness to help people debug. Towards this goal, we\nenvision PracAPR, an interactive repair system that works in an Integrated\nDevelopment Environment (IDE) to provide effective repair suggestions for\ndebugging. PracAPR does not require a test suite or program re-execution. It\nassumes that the developer uses an IDE debugger and the program has suspended\nat a location where a problem is observed. It interacts with the developer to\nobtain a problem specification. Based on the specification, it performs\ntest-free, flow-analysis-based fault localization, patch generation that\ncombines large language model-based local repair and tailored strategy-driven\nglobal repair, and program re-execution-free patch validation based on\nsimulated trace comparison to suggest repairs. By having PracAPR, we hope to\ntake a significant step towards making APR useful and an everyday part of\ndebugging.\n","subjects":["Computing Research Repository/Software Engineering"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"ZMoobBo4FCSXPDfdN7MvC2axwtUO_UJkWsozlhVCm0U","pdfSize":"943896"}