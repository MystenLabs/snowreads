{
  "id": "2412.11931",
  "title": "Speeding Up the NSGA-II With a Simple Tie-Breaking Rule",
  "authors": "Benjamin Doerr, Tudor Ivan, Martin S. Krejca",
  "authorsParsed": [
    [
      "Doerr",
      "Benjamin",
      ""
    ],
    [
      "Ivan",
      "Tudor",
      ""
    ],
    [
      "Krejca",
      "Martin S.",
      ""
    ]
  ],
  "versions": [
    {
      "version": "v1",
      "created": "Mon, 16 Dec 2024 16:15:37 GMT"
    },
    {
      "version": "v2",
      "created": "Tue, 17 Dec 2024 12:57:30 GMT"
    }
  ],
  "updateDate": "2024-12-18",
  "timestamp": 1734365737000,
  "abstract": "  The non-dominated sorting genetic algorithm~II (NSGA-II) is the most popular\nmulti-objective optimization heuristic. Recent mathematical runtime analyses\nhave detected two shortcomings in discrete search spaces, namely, that the\nNSGA-II has difficulties with more than two objectives and that it is very\nsensitive to the choice of the population size. To overcome these difficulties,\nwe analyze a simple tie-breaking rule in the selection of the next population.\nSimilar rules have been proposed before, but have found only little acceptance.\nWe prove the effectiveness of our tie-breaking rule via mathematical runtime\nanalyses on the classic OneMinMax, LeadingOnesTrailingZeros, and\nOneJumpZeroJump benchmarks. We prove that this modified NSGA-II can optimize\nthe three benchmarks efficiently also for many objectives, in contrast to the\nexponential lower runtime bound previously shown for OneMinMax with three or\nmore objectives. For the bi-objective problems, we show runtime guarantees that\ndo not increase when moderately increasing the population size over the minimum\nadmissible size. For example, for the OneJumpZeroJump problem with\nrepresentation length $n$ and gap parameter $k$, we show a runtime guarantee of\n$O(\\max\\{n^{k+1},Nn\\})$ function evaluations when the population size is at\nleast four times the size of the Pareto front. For population sizes larger than\nthe minimal choice $N = \\Theta(n)$, this result improves considerably over the\n$\\Theta(Nn^k)$ runtime of the classic NSGA-II.\n",
  "subjects": [
    "Computer Science/Neural and Evolutionary Computing"
  ],
  "license": "http://creativecommons.org/licenses/by/4.0/",
  "blobId": "HzWtstQT9RApt6YzkcPKhhEd0W8PR95MLw8_pfKy-pY",
  "pdfSize": "433370"
}