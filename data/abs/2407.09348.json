{"id":"2407.09348","title":"Predictable and Performant Reactive Synthesis Modulo Theories via\n  Functional Synthesis","authors":"Andoni Rodr\\'iguez, Felipe Gorostiaga and C\\'esar S\\'anchez","authorsParsed":[["Rodríguez","Andoni",""],["Gorostiaga","Felipe",""],["Sánchez","César",""]],"versions":[{"version":"v1","created":"Fri, 12 Jul 2024 15:23:27 GMT"}],"updateDate":"2024-07-15","timestamp":1720797807000,"abstract":"  Reactive synthesis is the process of generating correct controllers from\ntemporal logic specifications. Classical LTL reactive synthesis handles\n(propositional) LTL as a specification language. Boolean abstractions allow\nreducing LTLt specifications (i.e., LTL with propositions replaced by literals\nfrom a theory calT), into equi-realizable LTL specifications. In this paper we\nextend these results into a full static synthesis procedure. The synthesized\nsystem receives from the environment valuations of variables from a rich theory\ncalT and outputs valuations of system variables from calT. We use the\nabstraction method to synthesize a reactive Boolean controller from the LTL\nspecification, and we combine it with functional synthesis to obtain a static\ncontroller for the original LTLt specification. We also show that our method\nallows responses in the sense that the controller can optimize its outputs in\norder to e.g., always provide the smallest safe values. This is the first full\nstatic synthesis method for LTLt, which is a deterministic program (hence\npredictable and efficient).\n","subjects":["Computing Research Repository/Logic in Computer Science","Computing Research Repository/Artificial Intelligence","Computing Research Repository/Software Engineering"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"3APblcPZEcM9GtBSPcdUeSb3gHwAsk12fZ34-QgQX9s","pdfSize":"1037968","objectId":"0xc01d7baf1bd48de131e444cce5aa683a2997c5cbc748ab9230ee4607dd534eea","registeredEpoch":"2","certifiedEpoch":"2","startEpoch":"2","endEpoch":"202"}
