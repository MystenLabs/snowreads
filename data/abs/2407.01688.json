{"id":"2407.01688","title":"How We Built Cedar: A Verification-Guided Approach","authors":"Craig Disselkoen, Aaron Eline, Shaobo He, Kyle Headley, Michael Hicks,\n  Kesha Hietala, John Kastner, Anwar Mamat, Matt McCutchen, Neha Rungta, Bhakti\n  Shah, Emina Torlak, Andrew Wells","authorsParsed":[["Disselkoen","Craig",""],["Eline","Aaron",""],["He","Shaobo",""],["Headley","Kyle",""],["Hicks","Michael",""],["Hietala","Kesha",""],["Kastner","John",""],["Mamat","Anwar",""],["McCutchen","Matt",""],["Rungta","Neha",""],["Shah","Bhakti",""],["Torlak","Emina",""],["Wells","Andrew",""]],"versions":[{"version":"v1","created":"Mon, 1 Jul 2024 18:01:07 GMT"}],"updateDate":"2024-07-04","timestamp":1719856867000,"abstract":"  This paper presents verification-guided development (VGD), a software\nengineering process we used to build Cedar, a new policy language for\nexpressive, fast, safe, and analyzable authorization. Developing a system with\nVGD involves writing an executable model of the system and mechanically proving\nproperties about the model; writing production code for the system and using\ndifferential random testing (DRT) to check that the production code matches the\nmodel; and using property-based testing (PBT) to check properties of unmodeled\nparts of the production code. Using VGD for Cedar, we can build fast, idiomatic\nproduction code, prove our model correct, and find and fix subtle\nimplementation bugs that evade code reviews and unit testing. While carrying\nout proofs, we found and fixed 4 bugs in Cedar's policy validator, and DRT and\nPBT helped us find and fix 21 additional bugs in various parts of Cedar.\n","subjects":["Computing Research Repository/Software Engineering"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"Il9P2irIzh2PATKuUchiDjy5_ch02oTLig8x1gowwvM","pdfSize":"751042"}