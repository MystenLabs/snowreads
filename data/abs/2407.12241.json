{"id":"2407.12241","title":"An Empirical Study of Static Analysis Tools for Secure Code Review","authors":"Wachiraphan Charoenwet, Patanamon Thongtanunam, Van-Thuan Pham,\n  Christoph Treude","authorsParsed":[["Charoenwet","Wachiraphan",""],["Thongtanunam","Patanamon",""],["Pham","Van-Thuan",""],["Treude","Christoph",""]],"versions":[{"version":"v1","created":"Wed, 17 Jul 2024 01:15:39 GMT"}],"updateDate":"2024-07-18","timestamp":1721178939000,"abstract":"  Early identification of security issues in software development is vital to\nminimize their unanticipated impacts. Code review is a widely used manual\nanalysis method that aims to uncover security issues along with other coding\nissues in software projects. While some studies suggest that automated static\napplication security testing tools (SASTs) could enhance security issue\nidentification, there is limited understanding of SAST's practical\neffectiveness in supporting secure code review. Moreover, most SAST studies\nrely on synthetic or fully vulnerable versions of the subject program, which\nmay not accurately represent real-world code changes in the code review\nprocess.\n  To address this gap, we study C/C++ SASTs using a dataset of actual code\nchanges that contributed to exploitable vulnerabilities. Beyond SAST's\neffectiveness, we quantify potential benefits when changed functions are\nprioritized by SAST warnings. Our dataset comprises 319 real-world\nvulnerabilities from 815 vulnerability-contributing commits (VCCs) in 92 C and\nC++ projects. The result reveals that a single SAST can produce warnings in\nvulnerable functions of 52% of VCCs. Prioritizing changed functions with SAST\nwarnings can improve accuracy (i.e., 12% of precision and 5.6% of recall) and\nreduce Initial False Alarm (lines of code in non-vulnerable functions inspected\nuntil the first vulnerable function) by 13%. Nevertheless, at least 76% of the\nwarnings in vulnerable functions are irrelevant to the VCCs, and 22% of VCCs\nremain undetected due to limitations of SAST rules. Our findings highlight the\nbenefits and the remaining gaps of SAST-supported secure code reviews and\nchallenges that should be addressed in future work.\n","subjects":["Computing Research Repository/Software Engineering"],"license":"http://creativecommons.org/licenses/by-nc-nd/4.0/","blobId":"6UT2QVNEiuy5Xq8FTqfbJPgVvdV4tLyeLNUyJtY86sA","pdfSize":"1280728","objectId":"0x09d5b6dc5c8ddd0d49da840f9bd4ec6ee187deffe8d3dc8e106320e24384c386","registeredEpoch":"2","certifiedEpoch":"2","startEpoch":"2","endEpoch":"202"}
