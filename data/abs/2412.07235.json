{"id":"2412.07235","title":"Formally Verifiable Generated ASN.1/ACN Encoders and Decoders: A Case\n  Study","authors":"Mario Bucev, Samuel Chassot, Simon Felix, Filip Schramka, and Viktor\n  Kun\\v{c}ak","authorsParsed":[["Bucev","Mario",""],["Chassot","Samuel",""],["Felix","Simon",""],["Schramka","Filip",""],["Kunƒçak","Viktor",""]],"versions":[{"version":"v1","created":"Tue, 10 Dec 2024 06:54:42 GMT"}],"updateDate":"2024-12-11","timestamp":1733813682000,"abstract":"  We propose a verified executable Scala backend for ASN1SCC, a compiler for\nASN.1/ACN. ASN.1 is a language for describing data structures widely employed\nin ground and space telecommunications. ACN can be used along ASN.1 to describe\ncomplex binary formats and legacy protocols. To avoid error-prone and\ntime-consuming manual writing of serializers, we show how to port an ASN.1/ACN\ncode generator to generate Scala code. We then enhance the generator to emit\nnot only the executable code but also strong enough pre-conditions,\npost-conditions, and lemmas for inductive proofs. This allowed us to verify the\nresulting generated annotated code using Stainless, a program verifier for\nScala. The properties we prove include the absence of runtime errors, such as\nout-of-bound accesses or divisions by zero. For the base library, we also prove\nthe invertibility of the decoding and encoding functions, showing that decoding\nyields the encoded value back. Furthermore, our system automatically inserts\ninvertibility proofs for arbitrary records in the generated code, proving over\n300'000 verification conditions. We establish key steps towards such proofs for\nsums and arrays as well.\n","subjects":["Computer Science/Software Engineering","Computer Science/Programming Languages"],"license":"http://creativecommons.org/licenses/by-nc-nd/4.0/","blobId":"ZSleQBEZMk6SGi7bV0T-6k4m_nD4NzVqTCQyN3fqDDk","pdfSize":"522145"}