{"id":"2407.04263","title":"Drop it All or Pick it Up? How Developers Responded to the Log4JShell\n  Vulnerability","authors":"Vittunyuta Maeprasart, Ali Ouni, Raula Gaikovina Kula","authorsParsed":[["Maeprasart","Vittunyuta",""],["Ouni","Ali",""],["Kula","Raula Gaikovina",""]],"versions":[{"version":"v1","created":"Fri, 5 Jul 2024 05:33:10 GMT"}],"updateDate":"2024-07-08","timestamp":1720157590000,"abstract":"  Although using third-party libraries has become prevalent in contemporary\nsoftware development, developers often struggle to update their dependencies.\nPrior works acknowledge that due to the migration effort, priority and other\nissues cause lags in the migration process. The common assumption is that\ndevelopers should drop all other activities and prioritize fixing the\nvulnerability. Our objective is to understand developer behavior when facing\nhigh-risk vulnerabilities in their code. We explore the prolific, and possibly\none of the cases of the Log4JShell, a vulnerability that has the highest\nseverity rating ever, which received widespread media attention. Using a\nmixed-method approach, we analyze 219 GitHub Pull Requests (PR) and 354 issues\nbelonging to 53 Maven projects affected by the Log4JShell vulnerability. Our\nstudy confirms that developers show a quick response taking from 5 to 6 days.\nHowever, instead of dropping everything, surprisingly developer activities tend\nto increase for all pending issues and PRs. Developer discussions involved\neither giving information (29.3\\%) and seeking information (20.6\\%), which is\nmissing in existing support tools. Leveraging this possibly-one of a kind\nevent, insights opens up a new line of research, causing us to rethink best\npractices and what developers need in order to efficiently fix vulnerabilities.\n","subjects":["Computing Research Repository/Software Engineering"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"ZxK-DGe2uxQzzGQcv1NJMTUkyzOIjaZP8SttwsXjqbQ","pdfSize":"238933"}