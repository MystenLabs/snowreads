{"id":"2407.00829","title":"SABLE: Staging Blocked Evaluation of Sparse Matrix Computations","authors":"Pratyush Das, Adhitha Dias, Anxhelo Xhebraj, Artem Pelenitsyn,\n  Kirshanthan Sundararajah, Milind Kulkarni","authorsParsed":[["Das","Pratyush",""],["Dias","Adhitha",""],["Xhebraj","Anxhelo",""],["Pelenitsyn","Artem",""],["Sundararajah","Kirshanthan",""],["Kulkarni","Milind",""]],"versions":[{"version":"v1","created":"Wed, 3 Apr 2024 18:07:53 GMT"},{"version":"v2","created":"Mon, 16 Sep 2024 20:24:40 GMT"}],"updateDate":"2024-09-18","timestamp":1712167673000,"abstract":"  Sparse Matrices found in the real world often have some structure in their\ndistribution of dense elements. While existing techniques specialize the\ngenerated code for the structure of matrices, their generality misses\noptimization opportunities. We propose a system that -- if the sparse matrix is\nstored in a blocked storage format -- can adapt its code generation strategy\ndepending on the structure of the sparse matrix. Our system SABLE performs a\nspecified computation over every element of {\\em mostly} dense blocks instead\nof avoiding computing any sparse element and achieving regularity in generated\ncode while having special treatment for hyper-sparse blocks (ie, blocks with\nvery few dense elements). SABLE is extensible, providing a block iterator for\nusers to express any computation over these non-empty blocks. We demonstrate\nthat our approach can significantly accelerate SpMV and SpMM operations,\nsurpassing the performance of state-of-the-art systems like Partially-Strided\nCodelets and Sparse Register Tiling.\n","subjects":["Computing Research Repository/Distributed, Parallel, and Cluster Computing","Computing Research Repository/Performance"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"6E6tvgRQdIw3XJY5IKNphSLGgo8K4vIzvAOoOyeLNyk","pdfSize":"511572"}