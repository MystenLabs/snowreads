{
  "id": "2412.08063",
  "title": "ContextModule: Improving Code Completion via Repository-level Contextual\n  Information",
  "authors": "Zhanming Guan, Junlin Liu, Jierui Liu, Chao Peng, Dexin Liu, Ningyuan\n  Sun, Bo Jiang, Wenchao Li, Jie Liu, Hang Zhu",
  "authorsParsed": [
    [
      "Guan",
      "Zhanming",
      ""
    ],
    [
      "Liu",
      "Junlin",
      ""
    ],
    [
      "Liu",
      "Jierui",
      ""
    ],
    [
      "Peng",
      "Chao",
      ""
    ],
    [
      "Liu",
      "Dexin",
      ""
    ],
    [
      "Sun",
      "Ningyuan",
      ""
    ],
    [
      "Jiang",
      "Bo",
      ""
    ],
    [
      "Li",
      "Wenchao",
      ""
    ],
    [
      "Liu",
      "Jie",
      ""
    ],
    [
      "Zhu",
      "Hang",
      ""
    ]
  ],
  "versions": [
    {
      "version": "v1",
      "created": "Wed, 11 Dec 2024 03:15:49 GMT"
    }
  ],
  "updateDate": "2024-12-12",
  "timestamp": 1733886949000,
  "abstract": "  Large Language Models (LLMs) have demonstrated impressive capabilities in\ncode completion tasks, where they assist developers by predicting and\ngenerating new code in real-time. However, existing LLM-based code completion\nsystems primarily rely on the immediate context of the file being edited, often\nmissing valuable repository-level information, user behaviour and edit history\nthat could improve suggestion accuracy. Additionally, challenges such as\nefficiently retrieving relevant code snippets from large repositories,\nincorporating user behavior, and balancing accuracy with low-latency\nrequirements in production environments remain unresolved. In this paper, we\npropose ContextModule, a framework designed to enhance LLM-based code\ncompletion by retrieving and integrating three types of contextual information\nfrom the repository: user behavior-based code, similar code snippets, and\ncritical symbol definitions. By capturing user interactions across files and\nleveraging repository-wide static analysis, ContextModule improves the\nrelevance and precision of generated code. We implement performance\noptimizations, such as index caching, to ensure the system meets the latency\nconstraints of real-world coding environments. Experimental results and\nindustrial practise demonstrate that ContextModule significantly improves code\ncompletion accuracy and user acceptance rates.\n",
  "subjects": [
    "Computer Science/Software Engineering",
    "Computer Science/Artificial Intelligence"
  ],
  "license": "http://creativecommons.org/licenses/by-nc-nd/4.0/",
  "blobId": "0zSy8s6g29_rsGXLcQMqVurqoh4D6aOBc_iDIqMZsVM",
  "pdfSize": "4127782"
}