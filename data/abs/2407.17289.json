{"id":"2407.17289","title":"Static and Dynamic Verification of OCaml Programs: The Gospel Ecosystem\n  (Extended Version)","authors":"Tiago Lopes Soares, Ion Chirica, M\\'ario Pereira","authorsParsed":[["Soares","Tiago Lopes",""],["Chirica","Ion",""],["Pereira","MÃ¡rio",""]],"versions":[{"version":"v1","created":"Wed, 24 Jul 2024 14:00:02 GMT"},{"version":"v2","created":"Fri, 26 Jul 2024 14:16:07 GMT"}],"updateDate":"2024-07-29","timestamp":1721829602000,"abstract":"  We present our work on the collaborative use of dynamic and static analysis\ntools for the verification of software written in the OCaml language. We build\nupon Gospel, a specification language for OCaml that can be used both in\ndynamic and static analyses. We employ Ortac, for runtime assertion checking,\nand Cameleer and CFML for the deductive verification of OCaml code. We report\non the use of such tools to build a case study of collaborative analysis of a\nnon-trivial OCaml program. This shows how these tools nicely complement each\nothers, while at the same highlights the differences when writing specification\ntargeting dynamic or static analysis methods.\n","subjects":["Computing Research Repository/Logic in Computer Science"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"f_ZyU2ZGQA3fGwGw_FVa5qISeQd3JQ8I_JMIn-10eT0","pdfSize":"2697354","objectId":"0xdd3a67c20e0d94a2341d4e6ea95973d45202adda28eda65fac94d624986d63fe","registeredEpoch":"2","certifiedEpoch":"2","startEpoch":"2","endEpoch":"202"}
