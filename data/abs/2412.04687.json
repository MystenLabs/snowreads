{"id":"2412.04687","title":"PerfGen: Automated Performance Benchmark Generation for Big Data\n  Analytics","authors":"Jiyuan Wang, Jason Teoh, Muhammand Ali Gulza, Qian Zhang, Miryung Kim","authorsParsed":[["Wang","Jiyuan",""],["Teoh","Jason",""],["Gulza","Muhammand Ali",""],["Zhang","Qian",""],["Kim","Miryung",""]],"versions":[{"version":"v1","created":"Fri, 6 Dec 2024 00:58:20 GMT"}],"updateDate":"2024-12-09","timestamp":1733446700000,"abstract":"  Many symptoms of poor performance in big data analytics such as computational\nskews, data skews, and memory skews are input dependent. However, due to the\nlack of inputs that can trigger such performance symptoms, it is hard to debug\nand test big data analytics.\n  We design PerfGen to automatically generate inputs for the purpose of\nperformance testing. PerfGen overcomes three challenges when naively using\nautomated fuzz testing for the purpose of performance testing. First, typical\ngreybox fuzzing relies on coverage as a guidance signal and thus is unlikely to\ntrigger interesting performance behavior. Therefore, PerfGen provides\nperformance monitor templates that a user can extend to serve as a set of\nguidance metrics for grey-box fuzzing. Second, performance symptoms may occur\nat an intermediate or later stage of a big data analytics pipeline. Thus,\nPerfGen uses a phased fuzzing approach. This approach identifies\nsymptom-causing intermediate inputs at an intermediate stage first and then\nconverts them to the inputs at the beginning of the program with a\npseudo-inverse function generated by a large language model. Third, PerfGen\ndefines sets of skew-inspired input mutations, which increases the chance of\ninducing performance problems.\n  We evaluate PerfGen using four case studies. PerfGen achieves at least 11x\nspeedup compared to a traditional fuzzing approach when generating inputs to\ntrigger performance symptoms. Additionally, identifying intermediate inputs\nfirst and then converting them to original inputs enables PerfGen to generate\nsuch workloads in less than 0.004% of the iterations required by a baseline\napproach.\n","subjects":["Computer Science/Software Engineering"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"QFCNDnGyn31ZJUFGlkW45Co34cxCSXl_0teTSlPpvDg","pdfSize":"942331"}