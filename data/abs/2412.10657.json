{
  "id": "2412.10657",
  "title": "Probabilistic Guarantees for Practical LIA Loop Invariant Automation",
  "authors": "Ashish Kumar (The Pennsylvania State University, USA), Jilaun Zhang\n  (The Pennsylvania State University, USA), Saeid Tizpaz-Niari (UT El Paso,\n  USA), Gang Tan (The Pennsylvania State University, USA)",
  "authorsParsed": [
    [
      "Kumar",
      "Ashish",
      "",
      "The Pennsylvania State University, USA"
    ],
    [
      "Zhang",
      "Jilaun",
      "",
      "The Pennsylvania State University, USA"
    ],
    [
      "Tizpaz-Niari",
      "Saeid",
      "",
      "UT El Paso,\n  USA"
    ],
    [
      "Tan",
      "Gang",
      "",
      "The Pennsylvania State University, USA"
    ]
  ],
  "versions": [
    {
      "version": "v1",
      "created": "Sat, 14 Dec 2024 02:59:32 GMT"
    }
  ],
  "updateDate": "2024-12-17",
  "timestamp": 1734145172000,
  "abstract": "  Despite the crucial need for formal safety and security verification of\nprograms, discovering loop invariants remains a significant challenge. Static\nanalysis is a primary technique for inferring loop invariants but often relies\non substantial assumptions about underlying theories. Data-driven methods\nsupported by dynamic analysis and machine learning algorithms have shown\nimpressive performance in inferring loop invariants for some challenging\nprograms. However, state-of-the-art data-driven techniques do not offer\ntheoretical guarantees for finding loop invariants. We present a novel\ntechnique that leverages the simulated annealing (SA) search algorithm combined\nwith SMT solvers and computational geometry to provide probabilistic guarantees\nfor inferring loop invariants using data-driven methods. Our approach enhances\nthe SA search with real analysis to define the search space and employs\nparallelism to increase the probability of success. To ensure the convergence\nof our algorithm, we adapt e-nets, a key concept from computational geometry.\nOur tool, DLIA2, implements these algorithms and demonstrates competitive\nperformance against state-of-the-art techniques. We also identify a subclass of\nprograms, on which we outperform the current state-of-the-art tool GSpacer.\n",
  "subjects": [
    "Computer Science/Programming Languages"
  ],
  "license": "http://creativecommons.org/licenses/by/4.0/",
  "blobId": "R5Sj9tOMAfxF_7EcNxxaPpWDAIFw136bwOP1Z9eclEY",
  "pdfSize": "1701094"
}