{"id":"2412.11289","title":"Continuously Learning Bug Locations","authors":"Paulina Stevia Nouwou Mindom and Leuson Da Silva and Amin Nikanjam and\n  Foutse Khomh","authorsParsed":[["Mindom","Paulina Stevia Nouwou",""],["Da Silva","Leuson",""],["Nikanjam","Amin",""],["Khomh","Foutse",""]],"versions":[{"version":"v1","created":"Sun, 15 Dec 2024 19:37:15 GMT"}],"updateDate":"2024-12-17","timestamp":1734291435000,"abstract":"  Automatically locating buggy changesets associated with bug reports is\ncrucial in the software development process. Deep Learning (DL)-based\ntechniques show promising results by leveraging structural information from the\ncode and learning links between changesets and bug reports. However, since\nsource code associated with changesets evolves, the performance of such models\ntends to degrade over time due to concept drift. Aiming to address this\nchallenge, in this paper, we evaluate the potential of using Continual Learning\n(CL) techniques in multiple sub-tasks setting for bug localization (each of\nwhich operates on either stationary or non-stationary data), comparing it\nagainst a bug localization technique that leverages the BERT model, a deep\nreinforcement learning-based technique that leverages the A2C algorithm, and a\nDL-based function-level interaction model for semantic bug localization.\nAdditionally, we enhanced the CL techniques by using logistic regression to\nidentify and integrate the most significant bug-inducing factors. Our empirical\nevaluation across seven widely used software projects shows that CL techniques\nperform better than DL-based techniques by up to 61% in terms of Mean\nReciprocal Rank (MRR), 44% in terms of Mean Average Precision (MAP), 83% in\nterms of top@1, 56% in terms of top@5, and 66% in terms of top@10 metrics in\nnon-stationary setting. Further, we show that the CL techniques we studied are\neffective at localizing changesets relevant to a bug report while being able to\nmitigate catastrophic forgetting across the studied tasks and require up to 5x\nless computational effort during training. Our findings demonstrate the\npotential of adopting CL for bug localization in non-stationary settings, and\nwe hope it helps to improve bug localization activities in Software Engineering\nusing CL techniques.\n","subjects":["Computer Science/Software Engineering"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"YJGKkQ9G1rkxwCsTQX_y-mpXNVdpX9LzplNDSCvWePk","pdfSize":"982687"}