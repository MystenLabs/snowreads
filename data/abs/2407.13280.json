{"id":"2407.13280","title":"AI-Assisted SQL Authoring at Industry Scale","authors":"Chandra Maddila, Negar Ghorbani, Kosay Jabre, Vijayaraghavan Murali,\n  Edwin Kim, Parth Thakkar, Nikolay Pavlovich Laptev, Olivia Harman, Diana Hsu,\n  Rui Abreu, Peter C. Rigby","authorsParsed":[["Maddila","Chandra",""],["Ghorbani","Negar",""],["Jabre","Kosay",""],["Murali","Vijayaraghavan",""],["Kim","Edwin",""],["Thakkar","Parth",""],["Laptev","Nikolay Pavlovich",""],["Harman","Olivia",""],["Hsu","Diana",""],["Abreu","Rui",""],["Rigby","Peter C.",""]],"versions":[{"version":"v1","created":"Thu, 18 Jul 2024 08:33:39 GMT"},{"version":"v2","created":"Fri, 19 Jul 2024 22:52:39 GMT"}],"updateDate":"2024-07-23","timestamp":1721291619000,"abstract":"  SqlCompose brings generative AI into the data analytics domain. SQL is\ndeclarative, has formal table schemas, and is often written in a non-linear\nmanner. We address each of these challenges and develop a set of models that\nshows the importance of each problem. We first develop an internal SQL\nbenchmark to perform offline tests at Meta. We evaluate how well the Public\nLlama model performs. We attain a BLEU score of 53% and 24% for single- and\nmulti-line predictions, respectively. This performance is consistent with prior\nworks on imperative languages. We then fine-tune Llama on our internal data and\ndatabase schemas. SqlComposeSA substantially outperforms Llama by 16 percentage\npoints on BLEU score. SQL is often written with multiple sub queries and in a\nnon-sequential manner. We develop SqlComposeFIM which is aware of the context\nbefore and after the line(s) that need to be completed. This fill-in-the-middle\nmodel outperform SqlComposeFIM by 35 percentage points. We also measure how\noften the models get the correct table names, and SqlComposeFIM is able to do\nthis 75% of the time. Aside from our scientific research, we also roll out\nSqlComposeFIM at Meta. SqlCompose is used on a weekly basis by over 10k users\nincluding data scientists and software engineers, less than 1% of users have\ndisabled SqlCompose. We use the feedback from users to improve SqlCompose.\nInteresting positive themes include completing tedious or repetitive SQL\nclauses, suggesting boilerplate coding, and help in eliminate the need to\nremember difficult SQL syntax. The most significant negative themes was table\nand column name hallucinations, which has been reduced with the release of\nSqlComposeFIM. The SqlCompose models consistently outperform public and\ninternal LLMs, despite being smaller (7 bn and 13 bn), which provides early\nindications that smaller specialist models can outperform larger general\npurpose models.\n","subjects":["Computing Research Repository/Software Engineering","Computing Research Repository/Databases"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"LBPf2yYSpVaxkXl7ep-fPvFN5s7W7vLdq52TrinM4CU","pdfSize":"1269848"}