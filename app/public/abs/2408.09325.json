{"id":"2408.09325","title":"Detecting lifetime errors of std::string_view objects in C++","authors":"Reka Kovacs, Gabor Horvath, Zoltan Porkolab","authorsParsed":[["Kovacs","Reka",""],["Horvath","Gabor",""],["Porkolab","Zoltan",""]],"versions":[{"version":"v1","created":"Sun, 18 Aug 2024 01:56:31 GMT"}],"updateDate":"2024-08-20","timestamp":1723946191000,"abstract":"  std::string view is a reference-like data structure in the C++ Standard\nTemplate Library (STL) that enables fast and cheap processing of read-only\nstrings. Due to its wide applicability and performance enhancing power,\nstd::string view has been very popular since its introduction in the C++17\nstandard. However, its careless use can lead to serious memory management bugs.\nAs the lifetime of a std::string view is not tied to the lifetime of the\nreferenced string in any way, it is the user's responsibility to ensure that\nthe view is only used while the viewed string is live and its buffer is not\nreallocated.\n  This paper describes a static analysis tool that finds programming errors\ncaused by the incorrect use of std::string view. Our work included modeling\nstd::string view operations in the analysis, defining steps to detect lifetime\nerrors, constructing user-friendly diagnostic messages, and performing an\nevaluation of the checker.\n","subjects":["Computing Research Repository/Software Engineering"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"beU58d2_b1CXln-pwjM6FGP3BjWZwc4e_JK4RLqWFEo","pdfSize":"404004"}
