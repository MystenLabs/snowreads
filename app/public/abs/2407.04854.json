{"id":"2407.04854","title":"Statistical investigations into the geometry and homology of random\n  programs","authors":"Jon Sporring and Ken Friis Larsen","authorsParsed":[["Sporring","Jon",""],["Larsen","Ken Friis",""]],"versions":[{"version":"v1","created":"Fri, 5 Jul 2024 20:25:02 GMT"}],"updateDate":"2024-07-09","timestamp":1720211102000,"abstract":"  AI-supported programming has taken giant leaps with tools such as Meta's\nLlama and openAI's chatGPT. These are examples of stochastic sources of\nprograms and have already greatly influenced how we produce code and teach\nprogramming. If we consider input to such models as a stochastic source, a\nnatural question is, what is the relation between the input and the output\ndistributions, between the chatGPT prompt and the resulting program?\n  In this paper, we will show how the relation between random Python programs\ngenerated from chatGPT can be described geometrically and topologically using\nTree-edit distances between the program's syntax trees and without explicit\nmodeling of the underlying space. A popular approach to studying\nhigh-dimensional samples in a metric space is to use low-dimensional embedding\nusing, e.g., multidimensional scaling. Such methods imply errors depending on\nthe data and dimension of the embedding space. In this article, we propose to\nrestrict such projection methods to purely visualization purposes and instead\nuse geometric summary statistics, methods from spatial point statistics, and\ntopological data analysis to characterize the configurations of random programs\nthat do not rely on embedding approximations. To demonstrate their usefulness,\nwe compare two publicly available models: ChatGPT-4 and TinyLlama, on a simple\nproblem related to image processing.\n  Application areas include understanding how questions should be asked to\nobtain useful programs; measuring how consistently a given large language model\nanswers; and comparing the different large language models as a programming\nassistant. Finally, we speculate that our approach may in the future give new\ninsights into the structure of programming languages.\n","subjects":["Computing Research Repository/Computation and Language"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}