{"id":"2407.17240","title":"Ranking Plausible Patches by Historic Feature Frequencies","authors":"Shifat Sahariar Bhuiyan, Abhishek Tiwari, Yu Pei and Carlo A. Furia","authorsParsed":[["Bhuiyan","Shifat Sahariar",""],["Tiwari","Abhishek",""],["Pei","Yu",""],["Furia","Carlo A.",""]],"versions":[{"version":"v1","created":"Wed, 24 Jul 2024 12:58:14 GMT"}],"updateDate":"2024-07-25","timestamp":1721825894000,"abstract":"  Automated program repair (APR) techniques have achieved conspicuous progress,\nand are now capable of producing genuinely correct fixes in scenarios that were\nwell beyond their capabilities only a few years ago. Nevertheless, even when an\nAPR technique can find a correct fix for a bug, it still runs the risk of\nranking the fix lower than other patches that are plausible (they pass all\navailable tests) but incorrect. This can seriously hurt the technique's\npractical effectiveness, as the user will have to peruse a larger number of\npatches before finding the correct one.\n  This paper presents PrevaRank, a technique that ranks plausible patches\nproduced by any APR technique according to their feature similarity with\nhistoric programmer-written fixes for similar bugs. PrevaRank implements simple\nheuristics, which help make it scalable and applicable to any APR tool that\nproduces plausible patches. In our experimental evaluation, after training\nPrevaRank on the fix history of 81 open-source Java projects, we used it to\nrank patches produced by 8 Java APR tools on 168 Defects4J bugs. PrevaRank\nconsistently improved the ranking of correct fixes: for example, it ranked a\ncorrect fix within the top-3 positions in 27% more cases than the original\ntools did. Other experimental results indicate that PrevaRank works robustly\nwith a variety of APR tools and bugs, with negligible overhead.\n","subjects":["Computing Research Repository/Software Engineering"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}