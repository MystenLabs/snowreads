{"id":"2407.17499","title":"Sky$^\\epsilon$-Tree: Embracing the Batch Updates of B$^\\epsilon$-trees\n  through Access Port Parallelism on Skyrmion Racetrack Memory","authors":"Yu-Shiang Tsai, Shuo-Han Chen, Martijn Noorlander and Kuan-Hsun Chen","authorsParsed":[["Tsai","Yu-Shiang",""],["Chen","Shuo-Han",""],["Noorlander","Martijn",""],["Chen","Kuan-Hsun",""]],"versions":[{"version":"v1","created":"Fri, 5 Jul 2024 11:19:14 GMT"}],"updateDate":"2024-07-26","timestamp":1720178354000,"abstract":"  Owing to the characteristics of high density and unlimited write cycles,\nskyrmion racetrack memory (SK-RM) has demonstrated great potential as either\nthe next-generation main memory or the last-level cache of processors with\nnon-volatility. Nevertheless, the distinct skyrmion manipulations, such as\ninjecting and shifting, demand a fundamental change in widely-used memory\nstructures to avoid excessive energy and performance overhead. For instance,\nwhile B{\\epsilon}-trees yield an excellent query and insert performance\ntrade-off between B-trees and Log-Structured Merge (LSM)-trees, the\napplicability of deploying B{\\epsilon}-trees onto SK-RM receives much less\nattention. In addition, even though optimizing designs have been proposed for\nB+-trees on SK-RM, those designs are not directly applicable to\nB{\\epsilon}-trees owing to the batch update behaviors between tree nodes of\nB{\\epsilon}-trees. Such an observation motivates us to propose the concept of\nSky{\\epsilon}-tree to effectively utilize the access port parallelism of SK-RM\nto embrace the excellent query and insert performance of B{\\epsilon}-trees.\nExperimental results have shown promising improvements in access performance\nand energy conservation.\n","subjects":["Computing Research Repository/Hardware Architecture","Computing Research Repository/Distributed, Parallel, and Cluster Computing"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}