{"id":"2408.04455","title":"Modelling Probabilistic FPC in Guarded Type Theory","authors":"Philipp Jan Andries Stassen and Rasmus Ejlers M{\\o}gelberg and Maaike\n  Zwart and Alejandro Aguirre and Lars Birkedal","authorsParsed":[["Stassen","Philipp Jan Andries",""],["MÃ¸gelberg","Rasmus Ejlers",""],["Zwart","Maaike",""],["Aguirre","Alejandro",""],["Birkedal","Lars",""]],"versions":[{"version":"v1","created":"Thu, 8 Aug 2024 13:29:06 GMT"}],"updateDate":"2024-08-09","timestamp":1723123746000,"abstract":"  Constructive type theory combines logic and programming in one language. This\nis useful both for reasoning about programs written in type theory, as well as\nfor reasoning about other programming languages inside type theory. It is\nwell-known that it is challenging to extend these applications to languages\nwith recursion and computational effects such as probabilistic choice, because\nthese features are not easily represented in constructive type theory. We show\nhow to define and reason about a programming language with probabilistic choice\nand recursive types, in guarded type theory. We use higher inductive types to\nrepresent finite distributions and guarded recursion to model recursion. We\ndefine both operational and denotational semantics, as well as a relation\nbetween the two. The relation can be used to prove adequacy, but we also show\nhow to use it to reason about programs up to contextual equivalence. To the\nbest of our knowledge, this is the first model of a programming language with\nprobabilistic choice and recursive types in a constructive type theory.\n","subjects":["Computing Research Repository/Programming Languages","Computing Research Repository/Logic in Computer Science"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"vzG4DpsQMXq95VR0S3C-3hL6uAKYijTDY-c_g1Y1EYM","pdfSize":"667795"}
