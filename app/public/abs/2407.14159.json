{"id":"2407.14159","title":"On the Complexity of Reachability Properties in Serverless Function\n  Scheduling","authors":"Giuseppe De Palma, Saverio Giallorenzo, Jacopo Mauro, Matteo Trentin\n  and Gianluigi Zavattaro","authorsParsed":[["De Palma","Giuseppe",""],["Giallorenzo","Saverio",""],["Mauro","Jacopo",""],["Trentin","Matteo",""],["Zavattaro","Gianluigi",""]],"versions":[{"version":"v1","created":"Fri, 19 Jul 2024 09:43:26 GMT"}],"updateDate":"2024-07-22","timestamp":1721382206000,"abstract":"  Functions-as-a-Service (FaaS) is a Serverless Cloud paradigm where a platform\nmanages the execution scheduling (e.g., resource allocation, runtime\nenvironments) of stateless functions. Recent developments demonstrate the\nbenefits of using domain-specific languages to express per-function scheduling\npolicies, e.g., enforcing the allocation of functions on nodes that enjoy low\ndata-access latencies thanks to proximity and connection pooling. We present\naAPP, an affinity-aware extension of a platform-agnostic function scheduling\nlanguage. We formalise its scheduling semantics and then study the complexity\nof statically checking reachability properties, e.g., useful to verify that\ntrusted and untrusted functions cannot be co-located. Analysing different\nfragments of aAPP, we show that checking reachability of policies without\naffinity has linear complexity, while affinity makes the problem PSpace.\n","subjects":["Computing Research Repository/Distributed, Parallel, and Cluster Computing"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}