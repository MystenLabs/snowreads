{"id":"2408.04253","title":"Simple Linear-time Repetition Factorization","authors":"Yuki Yonemoto and Shunsuke Inenaga","authorsParsed":[["Yonemoto","Yuki",""],["Inenaga","Shunsuke",""]],"versions":[{"version":"v1","created":"Thu, 8 Aug 2024 06:44:42 GMT"}],"updateDate":"2024-08-09","timestamp":1723099482000,"abstract":"  A factorization $f_1, \\ldots, f_m$ of a string $w$ of length $n$ is called a\nrepetition factorization of $w$ if $f_i$ is a repetition, i.e., $f_i$ is a form\nof $x^kx'$, where $x$ is a non-empty string, $x'$ is a (possibly-empty) proper\nprefix of $x$, and $k \\geq 2$. Dumitran et al. [SPIRE 2015] presented an\n$O(n)$-time and space algorithm for computing an arbitrary repetition\nfactorization of a given string of length $n$. Their algorithm heavily relies\non the Union-Find data structure on trees proposed by Gabow and Tarjan [JCSS\n1985] that works in linear time on the word RAM model, and an interval stabbing\ndata structure of Schmidt [ISAAC 2009]. In this paper, we explore more\ncombinatorial insights into the problem, and present a simple algorithm to\ncompute an arbitrary repetition factorization of a given string of length $n$\nin $O(n)$ time, without relying on data structures for Union-Find and interval\nstabbing. Our algorithm follows the approach by Inoue et al. [ToCS 2022] that\ncomputes the smallest/largest repetition factorization in $O(n \\log n)$ time.\n","subjects":["Computing Research Repository/Data Structures and Algorithms"],"license":"http://creativecommons.org/licenses/by-nc-nd/4.0/","blobId":"lGlmLGR12XJBmoLth78Puc_kS_qBDyYDoMvDNnzQ16Y","pdfSize":"642881"}
