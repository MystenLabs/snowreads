{"id":"2407.01204","title":"SCIF: A Language for Compositional Smart Contract Security","authors":"Siqiu Yao, Haobin Ni, Andrew C. Myers, and Ethan Cecchetti","authorsParsed":[["Yao","Siqiu",""],["Ni","Haobin",""],["Myers","Andrew C.",""],["Cecchetti","Ethan",""]],"versions":[{"version":"v1","created":"Mon, 1 Jul 2024 11:51:21 GMT"}],"updateDate":"2024-07-02","timestamp":1719834681000,"abstract":"  Securing smart contracts remains a fundamental challenge. At its core, it is\nabout building software that is secure in composition with untrusted code, a\nchallenge that extends far beyond blockchains. We introduce SCIF, a language\nfor building smart contracts that are compositionally secure. SCIF is based on\nthe fundamentally compositional principle of secure information flow, but\nextends this core mechanism to include protection against reentrancy attacks,\nconfused deputy attacks, and improper error handling, even in the presence of\nmalicious contracts that do not follow SCIF's rules. SCIF supports a rich\necosystem of interacting principals with partial trust through its mechanisms\nfor dynamic trust management. SCIF has been implemented as a compiler to\nSolidity. We describe the SCIF language, including its static checking rules\nand runtime. Finally, we implement several applications with intricate security\nreasoning, showing how SCIF supports building complex smart contracts securely\nand gives programmer accurate diagnostics about potential security bugs.\n","subjects":["Computing Research Repository/Cryptography and Security","Computing Research Repository/Programming Languages"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}