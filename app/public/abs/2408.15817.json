{"id":"2408.15817","title":"Unifying Model Execution and Deductive Verification with Interaction\n  Trees in Isabelle/HOL","authors":"Simon Foster, Chung-Kil Hur, Jim Woodcock","authorsParsed":[["Foster","Simon",""],["Hur","Chung-Kil",""],["Woodcock","Jim",""]],"versions":[{"version":"v1","created":"Wed, 28 Aug 2024 14:27:33 GMT"}],"updateDate":"2024-08-29","timestamp":1724855253000,"abstract":"  Model execution allows us to prototype and analyse software engineering\nmodels by stepping through their possible behaviours, using techniques like\nanimation and simulation. On the other hand, deductive verification allows us\nto construct formal proofs demonstrating satisfaction of certain critical\nproperties in support of high-assurance software engineering. To ensure\ncoherent results between execution and proof, we need unifying semantics and\nautomation. In this paper, we mechanise Interaction Trees (ITrees) in\nIsabelle/HOL to produce an execution and verification framework. ITrees are\ncoinductive structures that allow us to encode infinite labelled transition\nsystems, yet they are inherently executable. We use ITrees to create\nverification tools for stateful imperative programs, concurrent programs with\nmessage passing in the form of the CSP and \\Circus languages, and abstract\nsystem models in the style of the Z and B methods. We demonstrate how ITrees\ncan account for diverse semantic presentations, such as structural operational\nsemantics, a relational program model, and CSP's failures-divergences trace\nmodel. Finally, we demonstrate how ITrees can be executed using the Isabelle\ncode generator to support the animation of models.\n","subjects":["Computing Research Repository/Logic in Computer Science"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}