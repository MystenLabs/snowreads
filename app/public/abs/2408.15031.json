{"id":"2408.15031","title":"Once and for all: how to compose modules -- The composition calculus","authors":"Peter Fettke and Wolfgang Reisig","authorsParsed":[["Fettke","Peter",""],["Reisig","Wolfgang",""]],"versions":[{"version":"v1","created":"Tue, 27 Aug 2024 13:01:04 GMT"}],"updateDate":"2024-08-28","timestamp":1724763664000,"abstract":"  Computability theory is traditionally conceived as the theoretical basis of\ninformatics. Nevertheless, numerous proposals transcend computability theory,\nin particular by emphasizing interaction of modules, or components, parts,\nconstituents, as a fundamental computing feature. In a technical framework,\ninteraction requires composition of modules. Hence, a most abstract,\ncomprehensive theory of modules and their composition is required. To this end,\nwe suggest a minimal set of postulates to characterize systems in the digital\nworld that consist of interacting modules. For such systems, we suggest a\ncalculus with a simple, yet most general composition operator which exhibits\nimportant properties, in particular associativity. We claim that this\ncomposition calculus provides not just another conceptual, formal framework,\nbut that essentially all settings of modules and their composition can be based\non this calculus. This claim is supported by a rich body of theorems,\nproperties, special classes of modules, and case studies.\n","subjects":["Computing Research Repository/Software Engineering","Computing Research Repository/Formal Languages and Automata Theory"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}