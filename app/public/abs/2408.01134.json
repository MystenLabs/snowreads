{"id":"2408.01134","title":"The Impact of Program Reduction on Automated Program Repair","authors":"Linas Vidziunas, David Binkley, Leon Moonen","authorsParsed":[["Vidziunas","Linas",""],["Binkley","David",""],["Moonen","Leon",""]],"versions":[{"version":"v1","created":"Fri, 2 Aug 2024 09:23:45 GMT"}],"updateDate":"2024-08-05","timestamp":1722590625000,"abstract":"  Correcting bugs using modern Automated Program Repair (APR) can be both\ntime-consuming and resource-expensive. We describe a program repair approach\nthat aims to improve the scalability of modern APR tools. The approach\nleverages program reduction in the form of program slicing to eliminate code\nirrelevant to fixing the bug, which improves the APR tool's overall\nperformance. We investigate slicing's impact on all three phases of the repair\nprocess: fault localization, patch generation, and patch validation. Our\nempirical exploration finds that the proposed approach, on average, enhances\nthe repair ability of the TBar APR tool, but we also discovered a few cases\nwhere it was less successful. Specifically, on examples from the widely used\nDefects4J dataset, we obtain a substantial reduction in median repair time,\nwhich falls from 80 minutes to just under 18 minutes. We conclude that program\nreduction can improve the performance of APR without degrading repair quality,\nbut this improvement is not universal.\n  A replication package is available via Zenodo at\nhttps://doi.org/10.5281/zenodo.13074333.\n  Keywords: automated program repair, dynamic program slicing, fault\nlocalization, test-suite reduction, hybrid techniques.\n","subjects":["Computing Research Repository/Software Engineering"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"mfLtNDvJEOwHls9lx7Vs9ACD2CfMs8JaC6GauayZw0w","pdfSize":"725446","txDigest":"CxbaDzfMc5esKzFYYQ9h63aXZuZaLiBe6TyLLjeUe51A","endEpoch":"1","status":"CERTIFIED"}
