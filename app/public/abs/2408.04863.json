{"id":"2408.04863","title":"Coding-PTMs: How to Find Optimal Code Pre-trained Models for Code\n  Embedding in Vulnerability Detection?","authors":"Yu Zhao, Lina Gong, Zhiqiu Huang, Yongwei Wang, Mingqiang Wei, Fei Wu","authorsParsed":[["Zhao","Yu",""],["Gong","Lina",""],["Huang","Zhiqiu",""],["Wang","Yongwei",""],["Wei","Mingqiang",""],["Wu","Fei",""]],"versions":[{"version":"v1","created":"Fri, 9 Aug 2024 04:56:26 GMT"}],"updateDate":"2024-08-12","timestamp":1723179386000,"abstract":"  Vulnerability detection is garnering increasing attention in software\nengineering, since code vulnerabilities possibly pose significant security.\nRecently, reusing various code pre-trained models has become common for code\nembedding without providing reasonable justifications in vulnerability\ndetection. The premise for casually utilizing pre-trained models (PTMs) is that\nthe code embeddings generated by different PTMs would generate a similar impact\non the performance. Is that TRUE? To answer this important question, we\nsystematically investigate the effects of code embedding generated by ten\ndifferent code PTMs on the performance of vulnerability detection, and get the\nanswer, i.e., that is NOT true. We observe that code embedding generated by\nvarious code PTMs can indeed influence the performance and selecting an\nembedding technique based on parameter scales and embedding dimension is not\nreliable. Our findings highlight the necessity of quantifying and evaluating\nthe characteristics of code embedding generated by various code PTMs to\nunderstand the effects. To achieve this goal, we analyze the numerical\nrepresentation and data distribution of code embedding generated by different\nPTMs to evaluate differences and characteristics. Based on these insights, we\npropose Coding-PTMs, a recommendation framework to assist engineers in\nselecting optimal code PTMs for their specific vulnerability detection tasks.\nSpecifically, we define thirteen code embedding metrics across three dimensions\n(i.e., statistics, norm, and distribution) for constructing a specialized code\nPTM recommendation dataset. We then employ a Random Forest classifier to train\na recommendation model and identify the optimal code PTMs from the candidate\nmodel zoo.\n","subjects":["Computing Research Repository/Software Engineering"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"q6l9giXODPACxKc111S9Tq-QhBgSXbx4hfH1k3_Rdc8","pdfSize":"4873838"}
