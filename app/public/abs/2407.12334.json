{"id":"2407.12334","title":"Cabin: Confining Untrusted Programs within Confidential VMs","authors":"Benshan Mei and Saisai Xia and Wenhao Wang and Dongdai Lin","authorsParsed":[["Mei","Benshan",""],["Xia","Saisai",""],["Wang","Wenhao",""],["Lin","Dongdai",""]],"versions":[{"version":"v1","created":"Wed, 17 Jul 2024 06:23:28 GMT"},{"version":"v2","created":"Thu, 18 Jul 2024 01:37:07 GMT"}],"updateDate":"2024-07-19","timestamp":1721197408000,"abstract":"  Confidential computing safeguards sensitive computations from untrusted\nclouds, with Confidential Virtual Machines (CVMs) providing a secure\nenvironment for guest OS. However, CVMs often come with large and vulnerable\noperating system kernels, making them susceptible to attacks exploiting kernel\nweaknesses. The imprecise control over the read/write access in the page table\nhas allowed attackers to exploit vulnerabilities. The lack of security\nhierarchy leads to insufficient separation between untrusted applications and\nguest OS, making the kernel susceptible to direct threats from untrusted\nprograms. This study proposes Cabin, an isolated execution framework within\nguest VM utilizing the latest AMD SEV-SNP technology. Cabin shields untrusted\nprocesses to the user space of a lower virtual machine privilege level (VMPL)\nby introducing a proxy-kernel between the confined processes and the guest OS.\nFurthermore, we propose execution protection mechanisms based on fine-gained\ncontrol of VMPL privilege for vulnerable programs and the proxy-kernel to\nminimize the attack surface. We introduce asynchronous forwarding mechanism and\nanonymous memory management to reduce the performance impact. The evaluation\nresults show that the Cabin framework incurs a modest overhead (5% on average)\non Nbench and WolfSSL benchmarks.\n","subjects":["Computing Research Repository/Cryptography and Security"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}