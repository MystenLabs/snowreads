{"id":"2408.15107","title":"The Illusion of Randomness: An Empirical Analysis of Address Space\n  Layout Randomization Implementations","authors":"Lorenzo Binosi, Gregorio Barzasi, Michele Carminati, Stefano Zanero\n  and Mario Polino","authorsParsed":[["Binosi","Lorenzo",""],["Barzasi","Gregorio",""],["Carminati","Michele",""],["Zanero","Stefano",""],["Polino","Mario",""]],"versions":[{"version":"v1","created":"Tue, 27 Aug 2024 14:46:04 GMT"},{"version":"v2","created":"Thu, 29 Aug 2024 13:47:41 GMT"}],"updateDate":"2024-08-30","timestamp":1724769964000,"abstract":"  Address Space Layout Randomization (ASLR) is a crucial defense mechanism\nemployed by modern operating systems to mitigate exploitation by randomizing\nprocesses' memory layouts. However, the stark reality is that real-world\nimplementations of ASLR are imperfect and subject to weaknesses that attackers\ncan exploit. This work evaluates the effectiveness of ASLR on major desktop\nplatforms, including Linux, MacOS, and Windows, by examining the variability in\nthe placement of memory objects across various processes, threads, and system\nrestarts. In particular, we collect samples of memory object locations, conduct\nstatistical analyses to measure the randomness of these placements and examine\nthe memory layout to find any patterns among objects that could decrease this\nrandomness. The results show that while some systems, like Linux distributions,\nprovide robust randomization, others, like Windows and MacOS, often fail to\nadequately randomize key areas like executable code and libraries. Moreover, we\nfind a significant entropy reduction in the entropy of libraries after the\nLinux 5.18 version and identify correlation paths that an attacker could\nleverage to reduce exploitation complexity significantly. Ultimately, we rank\nthe identified weaknesses based on severity and validate our entropy estimates\nwith a proof-of-concept attack. In brief, this paper provides the first\ncomprehensive evaluation of ASLR effectiveness across different operating\nsystems and highlights opportunities for Operating System (OS) vendors to\nstrengthen ASLR implementations.\n","subjects":["Computing Research Repository/Cryptography and Security"],"license":"http://creativecommons.org/licenses/by-nc-sa/4.0/","blobId":"k3zg4vP1EOCNG_gS803ZuLmZTNPLsNGmXHB9FmHb6FQ","pdfSize":"1463313"}
