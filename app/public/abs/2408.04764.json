{"id":"2408.04764","title":"AddressWatcher: Sanitizer-Based Localization of Memory Leak Fixes","authors":"Aniruddhan Murali, Mahmoud Alfadel, Meiyappan Nagappan, Meng Xu,\n  Chengnian Sun","authorsParsed":[["Murali","Aniruddhan",""],["Alfadel","Mahmoud",""],["Nagappan","Meiyappan",""],["Xu","Meng",""],["Sun","Chengnian",""]],"versions":[{"version":"v1","created":"Thu, 8 Aug 2024 21:40:22 GMT"}],"updateDate":"2024-08-12","timestamp":1723153222000,"abstract":"  Memory leak bugs are a major problem in C/C++ programs. They occur when\nmemory objects are not deallocated.Developers need to manually deallocate these\nobjects to prevent memory leaks. As such, several techniques have been proposed\nto automatically fix memory leaks. Although proposed approaches have merit in\nautomatically fixing memory leaks, they present limitations. Static-based\napproaches attempt to trace the complete semantics of memory object across all\npaths. However, they have scalability-related challenges when the target\nprogram has a large number of leaked paths. On the other hand, dynamic\napproaches can spell out precise semantics of memory object only on a single\nexecution path (not considering multiple execution paths).\n  In this paper, we complement prior approaches by designing and implementing a\nnovel framework named AddressWatcher. AddressWatcher allows the semantics of a\nmemory object to be tracked on multiple execution paths as a dynamic approach.\nAddresswatcher accomplishes this by using a leak database that is designed to\nallow storing and comparing different execution paths of a leak over several\ntest cases. We conduct an evaluation of AddressWatcher on a benchmark of five\nopen-source packages, namely binutils, openssh, tmux, openssl and git. In 23\nout of the 50 examined memory leak bugs, AddressWatcher correctly points to a\nfree location to fix memory leaks. Moreover, we submitted 25 new pull requests\n(PRs) to 12 popular open-source project repositories. These PRs targeted the\nresolution of memory leaks within these repositories. Among these, 21 PRs were\nmerged, addressing 5 open GitHub issues. In fact, a critical fix prompted a new\nversion release for the calc repository, a program used to find large primes.\nFurthermore, our contributions through these PRs sparked intense discussions\nand appreciation in various repositories such as coturn, h2o, and radare2.\n","subjects":["Computing Research Repository/Cryptography and Security","Computing Research Repository/Software Engineering"],"license":"http://creativecommons.org/licenses/by-nc-sa/4.0/","blobId":"LjBzAIjbgYFkyLL8_9V-IdkPpkkbUx9_Cv1P19hcMGs","pdfSize":"4857975"}
