{"id":"2407.15599","title":"Online String Attractors","authors":"Philip Whittington","authorsParsed":[["Whittington","Philip",""]],"versions":[{"version":"v1","created":"Mon, 22 Jul 2024 12:44:25 GMT"}],"updateDate":"2024-07-23","timestamp":1721652265000,"abstract":"  In today's data-centric world, fast and effective compression of data is\nparamount. To measure success towards the second goal, Kempa and Prezza\n[STOC2018] introduce the string attractor, a combinatorial object unifying\ndictionary-based compression. Given a string $T \\in \\Sigma^n$, a string\nattractor ($k$-attractor) is a set of positions $\\Gamma\\subseteq [1,n]$, such\nthat every distinct substring (of length at most $k$) has at least one\noccurrence that contains one of the selected positions. String attractors are\nshown to be approximated by and thus measure the quality of many important\ndictionary compression algorithms such as Lempel-Ziv 77, the Burrows-Wheeler\ntransform, straight line programs, and macro schemes.\n  In order to handle massive amounts of data, compression often has to be\nachieved in a streaming fashion. Thus, practically applied compression\nalgorithms, such as Lempel-Ziv 77, have been extensively studied in an online\nsetting. To the best of our knowledge, there has been no such work, and\ntherefore are no theoretical underpinnings, for the string attractor problem.\nWe introduce a natural online variant of both the $k$-attractor and the string\nattractor problem.\n  First, we show that the Lempel-Ziv factorization corresponds to the best\nonline algorithm for this problem, resulting in an upper bound of\n$\\mathcal{O}(\\log(n))$ on the competitive ratio. On the other hand, there are\nfamilies of sparse strings which have constant-size optimal attractors, e.g.,\nprefixes of the infinite Sturmian words and Thue-Morse words, which are created\nby iterative application of a morphism. We consider the most famous of these\nSturmian words, the Fibonacci word, and show that any online algorithm has a\ncost growing with the length of the word, for a matching lower bound of\n$\\Omega(\\log(n))$. For the online $k$-attractor problem, we show tight (strict)\n$k$-competitiveness.\n","subjects":["Computing Research Repository/Data Structures and Algorithms"],"license":"http://creativecommons.org/licenses/by/4.0/"}