{"id":"2407.04297","title":"HuntFUZZ: Enhancing Error Handling Testing through Clustering Based\n  Fuzzing","authors":"Jin Wei, Ping Chen, Jun Dai, Xiaoyan Sun, Zhihao Zhang, Chang Xu, Yi\n  Wanga","authorsParsed":[["Wei","Jin",""],["Chen","Ping",""],["Dai","Jun",""],["Sun","Xiaoyan",""],["Zhang","Zhihao",""],["Xu","Chang",""],["Wanga","Yi",""]],"versions":[{"version":"v1","created":"Fri, 5 Jul 2024 06:58:30 GMT"}],"updateDate":"2024-07-08","timestamp":1720162710000,"abstract":"  Testing a program's capability to effectively handling errors is a\nsignificant challenge, given that program errors are relatively uncommon. To\nsolve this, Software Fault Injection (SFI)-based fuzzing integrates SFI and\ntraditional fuzzing, injecting and triggering errors for testing (error\nhandling) code. However, we observe that current SFI-based fuzzing approaches\nhave overlooked the correlation between paths housing error points. In fact,\nthe execution paths of error points often share common paths. Nonetheless,\nFuzzers usually generate test cases repeatedly to test error points on commonly\ntraversed paths. This practice can compromise the efficiency of the fuzzer(s).\nThus, this paper introduces HuntFUZZ, a novel SFI-based fuzzing framework that\naddresses the issue of redundant testing of error points with correlated paths.\nSpecifically, HuntFUZZ clusters these correlated error points and utilizes\nconcolic execution to compute constraints only for common paths within each\ncluster. By doing so, we provide the fuzzer with efficient test cases to\nexplore related error points with minimal redundancy. We evaluate HuntFUZZ on a\ndiverse set of 42 applications, and HuntFUZZ successfully reveals 162 known\nbugs, with 62 of them being related to error handling. Additionally, due to its\nefficient error point detection method, HuntFUZZ discovers 7 unique zero-day\nbugs, which are all missed by existing fuzzers. Furthermore, we compare\nHuntFUZZ with 4 existing fuzzing approaches, including AFL, AFL++, AFLGo, and\nEH-FUZZ. Our evaluation confirms that HuntFUZZ can cover a broader range of\nerror points, and it exhibits better performance in terms of bug finding speed.\n","subjects":["Computing Research Repository/Cryptography and Security"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}