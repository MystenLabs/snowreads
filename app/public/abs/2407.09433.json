{"id":"2407.09433","title":"Nearly-Tight Bounds for Flow Sparsifiers in Quasi-Bipartite Graphs","authors":"Syamantak Das, Nikhil Kumar and Daniel Vaz","authorsParsed":[["Das","Syamantak",""],["Kumar","Nikhil",""],["Vaz","Daniel",""]],"versions":[{"version":"v1","created":"Fri, 12 Jul 2024 17:06:49 GMT"},{"version":"v2","created":"Fri, 6 Sep 2024 10:43:24 GMT"}],"updateDate":"2024-09-09","timestamp":1720804009000,"abstract":"  Flow sparsification is a classic graph compression technique which, given a\ncapacitated graph $G$ on $k$ terminals, aims to construct another capacitated\ngraph $H$, called a flow sparsifier, that preserves, either exactly or\napproximately, every multicommodity flow between terminals (ideally, with size\nas a small function of $k$). Cut sparsifiers are a restricted variant of flow\nsparsifiers which are only required to preserve maximum flows between\nbipartitions of the terminal set. It is known that exact cut sparsifiers\nrequire $2^{\\Omega(k)}$ many vertices [Krauthgamer and Rika, SODA 2013], with\nthe hard instances being quasi-bipartite graphs, where there are no edges\nbetween non-terminals. On the other hand, it has been shown recently that exact\n(or even $(1+\\varepsilon)$-approximate) flow sparsifiers on networks with just\n6 terminals require unbounded size [Krauthgamer and Mosenzon, SODA 2023, Chen\nand Tan, SODA 2024].\n  In this paper, we construct exact flow sparsifiers of size $3^{k^{3}}$ and\nexact cut sparsifiers of size $2^{k^2}$ for quasi-bipartite graphs. In\nparticular, the flow sparsifiers are contraction-based, that is, they are\nobtained from the input graph by (vertex) contraction operations. Our main\ncontribution is a new technique to construct sparsifiers that exploits\nconnections to polyhedral geometry, and that can be generalized to graphs with\na small separator that separates the graph into small components. We also give\nan improved reduction theorem for graphs of bounded treewidth [Andoni et al.,\nSODA 2011], implying a flow sparsifier of size $O(k\\cdot w)$ and quality\n$O\\bigl(\\frac{\\log w}{\\log \\log w}\\bigr)$, where $w$ is the treewidth.\n","subjects":["Computing Research Repository/Data Structures and Algorithms"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}