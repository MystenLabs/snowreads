{"id":"2407.21152","title":"WIP: An Engaging Undergraduate Intro to Model Checking in Software\n  Engineering Using TLA+","authors":"Konstantin L\\\"aufer, Gunda Mertin, George K. Thiruvathukal","authorsParsed":[["LÃ¤ufer","Konstantin",""],["Mertin","Gunda",""],["Thiruvathukal","George K.",""]],"versions":[{"version":"v1","created":"Tue, 30 Jul 2024 19:31:14 GMT"},{"version":"v2","created":"Sun, 18 Aug 2024 22:29:13 GMT"}],"updateDate":"2024-08-20","timestamp":1722367874000,"abstract":"  Background: In this paper, we present our initial efforts to integrate formal\nmethods, with a focus on model-checking specifications written in Temporal\nLogic of Actions (TLA+), into computer science education, targeting\nundergraduate juniors/seniors and graduate students. Formal methods can play a\nkey role in ensuring correct behavior of safety-critical systems, yet remain\nunderutilized in educational and industry contexts. Aims: We aim to (1)\nqualitatively assess the state of formal methods in computer science programs,\n(2) construct level-appropriate examples that could be included midway into\none's undergraduate studies, (3) demonstrate how to address successive\n\"failures\" through progressively stringent safety and liveness requirements,\nand (4) establish an ongoing framework for assessing interest and relevance\namong students. Methods: After starting with a refresher on mathematical logic,\nstudents specify the rules of simple puzzles in TLA+ and use its included model\nchecker (known as TLC) to find a solution. We gradually escalate to more\ncomplex, dynamic, event-driven systems, such as the control logic of a\nmicrowave oven, where students will study safety and liveness requirements. We\nsubsequently discuss explicit concurrency, along with thread safety and\ndeadlock avoidance, by modeling bounded counters and buffers. Results: Our\ninitial findings suggest that through careful curricular design and choice of\nexamples and tools, it is possible to inspire and cultivate a new generation of\nsoftware engineers proficient in formal methods. Conclusions: Our initial\nefforts suggest that 84% of our students had a positive experience in our\nformal methods course. Future plans include a longitudinal analysis within our\nown institution and proposals to partner with other institutions to explore the\neffectiveness of our open-source and open-access modules.\n","subjects":["Computing Research Repository/Software Engineering"],"license":"http://creativecommons.org/licenses/by-sa/4.0/"}