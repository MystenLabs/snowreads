{"id":"2408.12404","title":"Optimal control of partial differential equations in PyTorch using\n  automatic differentiation and neural network surrogates","authors":"Denis Khimin, Julian Roth, Alexander Henkes, Thomas Wick","authorsParsed":[["Khimin","Denis",""],["Roth","Julian",""],["Henkes","Alexander",""],["Wick","Thomas",""]],"versions":[{"version":"v1","created":"Thu, 22 Aug 2024 13:53:00 GMT"}],"updateDate":"2024-08-23","timestamp":1724334780000,"abstract":"  The take-home message of this paper is that solving optimal control problems\ncan be computationally straightforward, provided that differentiable partial\ndifferential equation (PDE) solvers are available. Although this might seem to\nbe a strong limitation and the development of differentiable PDE solvers might\nseem arduous, for many problems this is not the case. In particular, for linear\npartial differential equations, they are equivalent to a linear equation\nsystem. Therefore it is just sufficient to be able to solve linear equation\nsystems in an automatic differentiation-capable library like PyTorch and be\nable to differentiate through the linear solver. Using open-source libraries,\nlike torch_sparse_solve, we have easy to use differentiable direct solvers\n(here: KLU) at hand, which makes solving linear PDEs straightforward. For\nnonlinear PDEs, the approach above might be not sufficient, since we do not\nhave an equivalent linear equation system for the underlying PDE. In this case,\nwe can then use the library torch-fenics, which enables us to define PDEs using\nthe finite element library FEniCS and then differentiate through this problem\nin PyTorch. We complement the proposed methodology with various optimal control\nproblems constrained by stationary and instationary PDEs, linear and nonlinear\nPDEs (from Poisson to fluid-structure interaction), space-time and\ntime-stepping formulations, parameter estimation, right-hand side control,\ninitial condition control and boundary condition control, finite difference and\nfinite element discretizations and neural network surrogates. All developments\nof this work are accompanied with the respective source codes published on\nGitHub.\n","subjects":["Mathematics/Optimization and Control"],"license":"http://creativecommons.org/licenses/by-nc-nd/4.0/"}