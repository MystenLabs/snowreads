{"id":"2408.11456","title":"Cage: Hardware-Accelerated Safe WebAssembly","authors":"Martin Fink, Dimitrios Stavrakakis, Dennis Sprokholt, Soham\n  Chakraborty, Jan-Erik Ekberg and Pramod Bhatotia","authorsParsed":[["Fink","Martin",""],["Stavrakakis","Dimitrios",""],["Sprokholt","Dennis",""],["Chakraborty","Soham",""],["Ekberg","Jan-Erik",""],["Bhatotia","Pramod",""]],"versions":[{"version":"v1","created":"Wed, 21 Aug 2024 09:22:28 GMT"}],"updateDate":"2024-08-22","timestamp":1724232148000,"abstract":"  WebAssembly (WASM) is an immensely versatile and increasingly popular\ncompilation target. It executes applications written in several languages\n(e.g., C/C++) with near-native performance in various domains (e.g., mobile,\nedge, cloud). Despite WASM's sandboxing feature, which isolates applications\nfrom other instances and the host platform, WASM does not inherently provide\nany memory safety guarantees for applications written in low-level, unsafe\nlanguages.\n  To this end, we propose Cage, a hardware-accelerated toolchain for WASM that\nsupports unmodified applications compiled to WASM and utilizes diverse Arm\nhardware features aiming to enrich the memory safety properties of WASM.\nPrecisely, Cage leverages Arm's Memory Tagging Extension (MTE) to (i)~provide\nspatial and temporal memory safety for heap and stack allocations and\n(ii)~improve the performance of WASM's sandboxing mechanism. Cage further\nemploys Arm's Pointer Authentication (PAC) to prevent leaked pointers from\nbeing reused by other WASM instances, thus enhancing WASM's security\nproperties.\n  We implement our system based on 64-bit WASM. We provide a WASM compiler and\nruntime with support for Arm's MTE and PAC. On top of that, Cage's LLVM-based\ncompiler toolchain transforms unmodified applications to provide spatial and\ntemporal memory safety for stack and heap allocations and prevent function\npointer reuse. Our evaluation on real hardware shows that Cage incurs minimal\nruntime ($<5.8\\,\\%$) and memory ($<3.7\\,\\%$) overheads and can improve the\nperformance of WASM's sandboxing mechanism, achieving a speedup of over\n$5.1\\,\\%$, while offering efficient memory safety guarantees.\n","subjects":["Computing Research Repository/Programming Languages"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"5p865otLyTF-EUaZqf_RofYflScQt9nPARSkLdKBqkI","pdfSize":"1356571"}
