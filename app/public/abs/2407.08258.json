{"id":"2407.08258","title":"Pragmatics of Formally Verified Yet Efficient Static Analysis, in\n  particular for Formally Verified Compilers","authors":"David Monniaux (VERIMAG - IMAG)","authorsParsed":[["Monniaux","David","","VERIMAG - IMAG"]],"versions":[{"version":"v1","created":"Thu, 11 Jul 2024 07:57:49 GMT"}],"updateDate":"2024-07-12","timestamp":1720684669000,"abstract":"  Formally verified compilers and formally verified static analyzers are a\nsolution to the problem that certain industries face when they have to\ndemonstrate to authorities that the object code they run truly corresponds to\nits source code and that it satisfies certain properties. From a scientific and\ntechnological point of view, they are a challenge: not only a number of\nnontrivial invariants and algorithms must be proved to be correct, but also the\nimplementation must be reasonably effective so that the tools operate within\nreasonable time. Many optimizations in compilers rely on static analysis, and\nthus a formally verified compiler entails formally verified static analyses.In\nthis article, we explain some difficulties, possible solutions, design choices\nand trade-offs pertaining to verified static analysis, in particular when the\nsolution of the analysis is expressed as some form of tree, map or set.\n","subjects":["Computing Research Repository/Logic in Computer Science","Computing Research Repository/Programming Languages"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}