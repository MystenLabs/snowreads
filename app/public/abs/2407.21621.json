{"id":"2407.21621","title":"Interactive Diagrams for Software Documentation","authors":"Adam \\v{S}t\\v{e}p\\'anek and David Ku\\v{t}\\'ak and Barbora\n  Kozl\\'ikov\\'a and Jan By\\v{s}ka","authorsParsed":[["Štěpánek","Adam",""],["Kuťák","David",""],["Kozlíková","Barbora",""],["Byška","Jan",""]],"versions":[{"version":"v1","created":"Wed, 31 Jul 2024 14:13:33 GMT"}],"updateDate":"2024-08-01","timestamp":1722435213000,"abstract":"  Getting acquainted with a large codebase can be a daunting task for software\ndevelopers, both new and seasoned. The description of a codebase and its\ndevelopment should be the purpose of its documentation. However, software\ndocumentation, if it exists at all, is usually textual and accompanied only by\nsimple static diagrams. It is also time-consuming to maintain manually. Even an\nAPI reference, which can be generated automatically from the codebase itself,\nhas many drawbacks. It is limited to what it can extract from the codebase, is\ncumbersome to navigate, and fails to capture the interwoven nature of code. We\nexplore an alternative approach centered around a node-link diagram\nrepresenting the structure of a codebase. The diagram is interactive and\nfilterable, providing details on demand. It is designed for automation, relying\non static analysis of the codebase, and thus produces results quickly and\noffers a viable alternative to missing or outdated documentation. To evaluate\nthis approach, we implemented a prototype named Helveg that is able to analyze\nand visualize C# code. Testing with five professional programmers provided\nfeedback on the approach's benefits and challenges, which we discuss in detail.\n","subjects":["Computing Research Repository/Software Engineering"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}