{"id":"2407.01365","title":"An Operational Semantics for Yul","authors":"Vasileios Koutavas, Yu-Yang Lin, Nikos Tzevelekos","authorsParsed":[["Koutavas","Vasileios",""],["Lin","Yu-Yang",""],["Tzevelekos","Nikos",""]],"versions":[{"version":"v1","created":"Mon, 1 Jul 2024 15:20:25 GMT"}],"updateDate":"2024-07-02","timestamp":1719847225000,"abstract":"  We present a big-step and small-step operational semantics for Yul -- the\nintermediate language used by the Solidity compiler to produce EVM bytecode --\nin a mathematical notation that is congruous with the literature of programming\nlanguages, lends itself to language proofs, and can serve as a precise, widely\naccessible specification for the language. Our two semantics stay faithful to\nthe original, informal specification of the language but also clarify\nunder-specified cases such as void function calls. Our presentation allows us\nto prove the equivalence between the two semantics. We also implement the\nsmall-step semantics in an interpreter for Yul which avails of optimisations\nthat are provably correct. We have tested the interpreter using tests from the\nSolidity compiler and our own. We envisage that this work will enable the\ndevelopment of verification and symbolic execution technology directly in Yul,\ncontributing to the Ethereum security ecosystem, as well as aid the development\nof a provably sound future type system.\n","subjects":["Computing Research Repository/Programming Languages"],"license":"http://creativecommons.org/licenses/by/4.0/"}