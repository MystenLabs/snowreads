{"id":"2408.07797","title":"Multi-Pass Targeted Dynamic Symbolic Execution","authors":"Tuba Yavuz","authorsParsed":[["Yavuz","Tuba",""]],"versions":[{"version":"v1","created":"Wed, 14 Aug 2024 20:14:59 GMT"}],"updateDate":"2024-08-16","timestamp":1723666499000,"abstract":"  Dynamic symbolic execution (DSE) provides a precise means to analyze programs\nand it can be used to generate test cases and to detect a variety of bugs\nincluding memory vulnerabilities. However, the path explosion problem may\nprevent a symbolic executor from covering program locations or paths of\ninterest. In this paper, we present a Multi-Pass Targeted Dynamic Symbolic\nExecution approach that starts from a target program location and moves\nbackward until it reaches a specified entry point to check for reachability, to\ndetect bugs on the feasible paths between the entry point and the target, and\nto collect constraints about the memory locations accessed by the code. Our\napproach uses a mix of backward and forward reasoning passes. It introduces an\nabstract address space that gets populated during the backward pass and uses\nunification to precisely map the abstract objects to the objects in the\nconcrete address space. We have implemented our approach in a tool called\nDESTINA using KLEE, a DSE tool. We have evaluated DESTINA using SvComp\nbenchmarks from the memory safety and control-flow categories. Results show\nthat DESTINA can detect memory vulnerabilities precisely and it can help DSE\nreach target locations faster when it struggles with the path explosion. Our\napproach achieves on average 4X reduction in the number of paths explored and\n2X speedup.\n","subjects":["Computing Research Repository/Software Engineering","Computing Research Repository/Programming Languages"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"wdw8AjZ0ibGhK5ojq3SUgTmccOVqih3VzwlXNxitLz0","pdfSize":"231810"}
