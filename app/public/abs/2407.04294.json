{"id":"2407.04294","title":"SQLaser: Detecting DBMS Logic Bugs with Clause-Guided Fuzzing","authors":"Jin Wei, Ping Chen, Kangjie Lu, Jun Dai, Xiaoyan Sun","authorsParsed":[["Wei","Jin",""],["Chen","Ping",""],["Lu","Kangjie",""],["Dai","Jun",""],["Sun","Xiaoyan",""]],"versions":[{"version":"v1","created":"Fri, 5 Jul 2024 06:56:33 GMT"}],"updateDate":"2024-07-08","timestamp":1720162593000,"abstract":"  Database Management Systems (DBMSs) are vital components in modern\ndata-driven systems. Their complexity often leads to logic bugs, which are\nimplementation errors within the DBMSs that can lead to incorrect query\nresults, data exposure, unauthorized access, etc., without necessarily causing\nvisible system failures. Existing detection employs two strategies: rule-based\nbug detection and coverage-guided fuzzing. In general, rule specification\nitself is challenging; as a result, rule-based detection is limited to specific\nand simple rules. Coverage-guided fuzzing blindly explores code paths or\nblocks, many of which are unlikely to contain logic bugs; therefore, this\nstrategy is cost-ineffective. In this paper, we design SQLaser, a\nSQL-clause-guided fuzzer for detecting logic bugs in DBMSs. Through a\ncomprehensive examination of most existing logic bugs across four distinct\nDBMSs, excluding those causing system crashes, we have identified 35 logic bug\npatterns. These patterns manifest as certain SQL clause combinations that\ncommonly result in logic bugs, and behind these clause combinations are a\nsequence of functions. We therefore model logic bug patterns as error-prone\nfunction chains (ie, sequences of functions). We further develop a directed\nfuzzer with a new path-to-path distance-calculation mechanism for effectively\ntesting these chains and discovering additional logic bugs. This mechanism\nenables SQLaser to swiftly navigate to target sites and uncover potential bugs\nemerging from these paths. Our evaluation, conducted on SQLite, MySQL,\nPostgreSQL, and TiDB, demonstrates that SQLaser significantly accelerates bug\ndiscovery compared to other fuzzing approaches, reducing detection time by\napproximately 60%.\n","subjects":["Computing Research Repository/Cryptography and Security"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}