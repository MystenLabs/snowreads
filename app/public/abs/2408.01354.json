{"id":"2408.01354","title":"MCGMark: An Encodable and Robust Online Watermark for LLM-Generated\n  Malicious Code","authors":"Kaiwen Ning and Jiachi Chen and Qingyuan Zhong and Tao Zhang and\n  Yanlin Wang and Wei Li and Yu Zhang and Weizhe Zhang and Zibin Zheng","authorsParsed":[["Ning","Kaiwen",""],["Chen","Jiachi",""],["Zhong","Qingyuan",""],["Zhang","Tao",""],["Wang","Yanlin",""],["Li","Wei",""],["Zhang","Yu",""],["Zhang","Weizhe",""],["Zheng","Zibin",""]],"versions":[{"version":"v1","created":"Fri, 2 Aug 2024 16:04:52 GMT"}],"updateDate":"2024-08-05","timestamp":1722614692000,"abstract":"  With the advent of large language models (LLMs), numerous software service\nproviders (SSPs) are dedicated to developing LLMs customized for code\ngeneration tasks, such as CodeLlama and Copilot. However, these LLMs can be\nleveraged by attackers to create malicious software, which may pose potential\nthreats to the software ecosystem. For example, they can automate the creation\nof advanced phishing malware. To address this issue, we first conduct an\nempirical study and design a prompt dataset, MCGTest, which involves\napproximately 400 person-hours of work and consists of 406 malicious code\ngeneration tasks. Utilizing this dataset, we propose MCGMark, the first robust,\ncode structure-aware, and encodable watermarking approach to trace\nLLM-generated code. We embed encodable information by controlling the token\nselection and ensuring the output quality based on probabilistic outliers.\nAdditionally, we enhance the robustness of the watermark by considering the\nstructural features of malicious code, preventing the embedding of the\nwatermark in easily modified positions, such as comments. We validate the\neffectiveness and robustness of MCGMark on the DeepSeek-Coder. MCGMark achieves\nan embedding success rate of 88.9% within a maximum output limit of 400 tokens.\nFurthermore, it also demonstrates strong robustness and has minimal impact on\nthe quality of the output code. Our approach assists SSPs in tracing and\nholding responsible parties accountable for malicious code generated by LLMs.\n","subjects":["Computing Research Repository/Cryptography and Security","Computing Research Repository/Software Engineering"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}