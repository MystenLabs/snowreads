{"id":"2408.08537","title":"SeeWasm: An Efficient and Fully-Functional Symbolic Execution Engine for\n  WebAssembly Binaries","authors":"Ningyu He, Zhehao Zhao, Hanqin Guan, Jikai Wang, Shuo Peng, Ding Li,\n  Haoyu Wang, Xiangqun Chen, Yao Guo","authorsParsed":[["He","Ningyu",""],["Zhao","Zhehao",""],["Guan","Hanqin",""],["Wang","Jikai",""],["Peng","Shuo",""],["Li","Ding",""],["Wang","Haoyu",""],["Chen","Xiangqun",""],["Guo","Yao",""]],"versions":[{"version":"v1","created":"Fri, 16 Aug 2024 05:42:30 GMT"}],"updateDate":"2024-08-19","timestamp":1723786950000,"abstract":"  WebAssembly (Wasm), as a compact, fast, and isolation-guaranteed binary\nformat, can be compiled from more than 40 high-level programming languages.\nHowever, vulnerabilities in Wasm binaries could lead to sensitive data leakage\nand even threaten their hosting environments. To identify them, symbolic\nexecution is widely adopted due to its soundness and the ability to\nautomatically generate exploitations. However, existing symbolic executors for\nWasm binaries are typically platform-specific, which means that they cannot\nsupport all Wasm features. They may also require significant manual\ninterventions to complete the analysis and suffer from efficiency issues as\nwell. In this paper, we propose an efficient and fully-functional symbolic\nexecution engine, named SeeWasm. Compared with existing tools, we demonstrate\nthat SeeWasm supports full-featured Wasm binaries without further manual\nintervention, while accelerating the analysis by 2 to 6 times. SeeWasm has been\nadopted by existing works to identify more than 30 0-day vulnerabilities or\nsecurity issues in well-known C, Go, and SGX applications after compiling them\nto Wasm binaries.\n","subjects":["Computing Research Repository/Cryptography and Security","Computing Research Repository/Software Engineering"],"license":"http://creativecommons.org/licenses/by/4.0/"}