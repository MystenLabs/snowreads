{"id":"2407.08455","title":"Inductive Predicate Synthesis Modulo Programs (Extended)","authors":"Scott Wesley, Maria Christakis, Jorge A. Navas, Richard Trefler,\n  Valentin W\\\"ustholz, Arie Gurfinkel","authorsParsed":[["Wesley","Scott",""],["Christakis","Maria",""],["Navas","Jorge A.",""],["Trefler","Richard",""],["WÃ¼stholz","Valentin",""],["Gurfinkel","Arie",""]],"versions":[{"version":"v1","created":"Thu, 11 Jul 2024 12:51:08 GMT"}],"updateDate":"2024-07-12","timestamp":1720702268000,"abstract":"  A growing trend in program analysis is to encode verification conditions\nwithin the language of the input program. This simplifies the design of\nanalysis tools by utilizing off-the-shelf verifiers, but makes communication\nwith the underlying solver more challenging. Essentially, the analyzer operates\nat the level of input programs, whereas the solver operates at the level of\nproblem encodings. To bridge this gap, the verifier must pass along proof-rules\nfrom the analyzer to the solver. For example, an analyzer for concurrent\nprograms built on an inductive program verifier might need to declare\nOwicki-Gries style proof-rules for the underlying solver. Each such proof-rule\nfurther specifies how a program should be verified, meaning that the problem of\npassing proof-rules is a form of invariant synthesis.\n  Similarly, many program analysis tasks reduce to the synthesis of pure,\nloop-free Boolean functions (i.e., predicates), relative to a program. From\nthis observation, we propose Inductive Predicate Synthesis Modulo Programs\n(IPS-MP) which extends high-level languages with minimal synthesis features to\nguide analysis. In IPS-MP, unknown predicates appear under assume and assert\nstatements, acting as specifications modulo the program semantics. Existing\nsynthesis solvers are inefficient at IPS-MP as they target more general\nproblems. In this paper, we show that IPS-MP admits an efficient solution in\nthe Boolean case, despite being generally undecidable. Moreover, we show that\nIPS-MP reduces to the satisfiability of constrained Horn clauses, which is less\ngeneral than existing synthesis problems, yet expressive enough to encode\nverification tasks. We provide reductions from challenging verification tasks\n-- such as parameterized model checking -- to IPS-MP. We realize these\nreductions with an efficient IPS-MP-solver based on SeaHorn, and describe a\napplication to smart-contract verification.\n","subjects":["Computing Research Repository/Software Engineering"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}