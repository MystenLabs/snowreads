{"id":"2407.18431","title":"Rusty Linux: Advances in Rust for Linux Kernel Development","authors":"Shane K. Panter and Nasir U. Eisty","authorsParsed":[["Panter","Shane K.",""],["Eisty","Nasir U.",""]],"versions":[{"version":"v1","created":"Thu, 25 Jul 2024 23:46:27 GMT"},{"version":"v2","created":"Fri, 6 Sep 2024 18:42:43 GMT"}],"updateDate":"2024-09-10","timestamp":1721951187000,"abstract":"  Context: The integration of Rust into kernel development is a transformative\nendeavor aimed at enhancing system security and reliability by leveraging\nRust's strong memory safety guarantees. Objective: We aim to find the current\nadvances in using Rust in Kernel development to reduce the number of memory\nsafety vulnerabilities in one of the most critical pieces of software that\nunderpins all modern applications. Method: By analyzing a broad spectrum of\nstudies, we identify the advantages Rust offers, highlight the challenges\nfaced, and emphasize the need for community consensus on Rust's adoption.\nResults: Our findings suggest that while the initial implementations of Rust in\nthe kernel show promising results in terms of safety and stability, significant\nchallenges remain. These challenges include achieving seamless interoperability\nwith existing kernel components, maintaining performance, and ensuring adequate\nsupport and tooling for developers. Conclusions: This study underscores the\nneed for continued research and practical implementation efforts to fully\nrealize the benefits of Rust. By addressing these challenges, the integration\nof Rust could mark a significant step forward in the evolution of operating\nsystem development towards safer and more reliable systems\n","subjects":["Computing Research Repository/Software Engineering","Computing Research Repository/Operating Systems"],"license":"http://creativecommons.org/licenses/by/4.0/"}