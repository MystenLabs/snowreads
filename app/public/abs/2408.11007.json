{"id":"2408.11007","title":"Extending the Quantitative Pattern-Matching Paradigm","authors":"Sandra Alves, Delia Kesner, and Miguel Ramos","authorsParsed":[["Alves","Sandra",""],["Kesner","Delia",""],["Ramos","Miguel",""]],"versions":[{"version":"v1","created":"Tue, 20 Aug 2024 17:01:56 GMT"}],"updateDate":"2024-08-21","timestamp":1724173316000,"abstract":"  We show how (well-established) type systems based on non-idempotent\nintersection types can be extended to characterize termination properties of\nfunctional programming languages with pattern matching features. To model such\nprogramming languages, we use a (weak and closed) $\\lambda$-calculus\nintegrating a pattern matching mechanism on algebraic data types (ADTs).\nRemarkably, we also show that this language not only encodes Plotkin's CBV and\nCBN $\\lambda$-calculus as well as other subsuming frameworks, such as the\nbang-calculus, but can also be used to interpret the semantics of effectful\nlanguages with exceptions. After a thorough study of the untyped language, we\nintroduce a type system based on intersection types, and we show through purely\nlogical methods that the set of terminating terms of the language corresponds\nexactly to that of well-typed terms. Moreover, by considering non-idempotent\nintersection types, this characterization turns out to be quantitative, i.e.\nthe size of the type derivation of a term t gives an upper bound for the number\nof evaluation steps from t to its normal form.\n","subjects":["Computing Research Repository/Programming Languages","Computing Research Repository/Logic in Computer Science"],"license":"http://creativecommons.org/licenses/by-nc-nd/4.0/","blobId":"pQUOTKE5eSm4Xvs74sdbDALjIXfJT4d7g1Tc2HdrjhU","pdfSize":"599655"}
