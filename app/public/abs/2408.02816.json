{"id":"2408.02816","title":"Learning to Predict Program Execution by Modeling Dynamic Dependency on\n  Code Graphs","authors":"Cuong Chi Le, Hoang Nhat Phan, Huy Nhat Phan, Tien N. Nguyen, Nghi D.\n  Q. Bui","authorsParsed":[["Le","Cuong Chi",""],["Phan","Hoang Nhat",""],["Phan","Huy Nhat",""],["Nguyen","Tien N.",""],["Bui","Nghi D. Q.",""]],"versions":[{"version":"v1","created":"Mon, 5 Aug 2024 20:32:00 GMT"},{"version":"v2","created":"Fri, 9 Aug 2024 14:48:04 GMT"}],"updateDate":"2024-08-12","timestamp":1722889920000,"abstract":"  Predicting program behavior without execution is a crucial and challenging\ntask in software engineering. Traditional models often struggle to capture the\ndynamic dependencies and interactions within code. This paper introduces a\nnovel machine learning-based framework called CodeFlow, designed to predict\ncode coverage and detect runtime errors through Dynamic Dependencies Learning.\nBy utilizing control flow graphs (CFGs), CodeFlow represents all possible\nexecution paths and the relationships between different statements, providing a\ncomprehensive understanding of program behavior. CodeFlow constructs CFGs to\ndepict execution paths and learns vector representations for CFG nodes,\ncapturing static control-flow dependencies. Additionally, it learns dynamic\ndependencies through execution traces, which reflect the impacts among\nstatements during execution. This approach enables accurate prediction of code\ncoverage and effective identification of runtime errors. Empirical evaluations\ndemonstrate significant improvements in code coverage prediction accuracy and\neffective localization of runtime errors, outperforming existing models.\n","subjects":["Computing Research Repository/Software Engineering"],"license":"http://creativecommons.org/publicdomain/zero/1.0/"}