{"id":"2408.08927","title":"VerilogCoder: Autonomous Verilog Coding Agents with Graph-based Planning\n  and Abstract Syntax Tree (AST)-based Waveform Tracing Tool","authors":"Chia-Tung Ho, Haoxing Ren, Brucek Khailany","authorsParsed":[["Ho","Chia-Tung",""],["Ren","Haoxing",""],["Khailany","Brucek",""]],"versions":[{"version":"v1","created":"Thu, 15 Aug 2024 20:06:06 GMT"}],"updateDate":"2024-08-20","timestamp":1723752366000,"abstract":"  Due to the growing complexity of modern Integrated Circuits (ICs), automating\nhardware design can prevent a significant amount of human error from the\nengineering process and result in less errors. Verilog is a popular hardware\ndescription language for designing and modeling digital systems; thus, Verilog\ngeneration is one of the emerging areas of research to facilitate the design\nprocess. In this work, we propose VerilogCoder, a system of multiple Artificial\nIntelligence (AI) agents for Verilog code generation, to autonomously write\nVerilog code and fix syntax and functional errors using collaborative Verilog\ntools (i.e., syntax checker, simulator, and waveform tracer). Firstly, we\npropose a task planner that utilizes a novel Task and Circuit Relation Graph\nretrieval method to construct a holistic plan based on module descriptions. To\ndebug and fix functional errors, we develop a novel and efficient abstract\nsyntax tree (AST)-based waveform tracing tool, which is integrated within the\nautonomous Verilog completion flow. The proposed methodology successfully\ngenerates 94.2% syntactically and functionally correct Verilog code, surpassing\nthe state-of-the-art methods by 33.9% on the VerilogEval-Human v2 benchmark.\n","subjects":["Computing Research Repository/Artificial Intelligence","Computing Research Repository/Computation and Language"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"pLTmNooXIV1o3zFWg5VXc6HnvtgXXJmmlne2vKOjYZU","pdfSize":"1458381"}
