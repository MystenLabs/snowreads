{"id":"2407.00768","title":"PROZE: Generating Parameterized Unit Tests Informed by Runtime Data","authors":"Deepika Tiwari, Yogya Gamage, Martin Monperrus, and Benoit Baudry","authorsParsed":[["Tiwari","Deepika",""],["Gamage","Yogya",""],["Monperrus","Martin",""],["Baudry","Benoit",""]],"versions":[{"version":"v1","created":"Sun, 30 Jun 2024 17:07:12 GMT"},{"version":"v2","created":"Tue, 3 Sep 2024 12:24:32 GMT"}],"updateDate":"2024-09-04","timestamp":1719767232000,"abstract":"  Typically, a conventional unit test (CUT) verifies the expected behavior of\nthe unit under test through one specific input / output pair. In contrast, a\nparameterized unit test (PUT) receives a set of inputs as arguments, and\ncontains assertions that are expected to hold true for all these inputs. PUTs\nincrease test quality, as they assess correctness on a broad scope of inputs\nand behaviors. However, defining assertions over a set of inputs is a hard task\nfor developers, which limits the adoption of PUTs in practice.\n  In this paper, we address the problem of finding oracles for PUTs that hold\nover multiple inputs. We design a system called PROZE, that generates PUTs by\nidentifying developer-written assertions that are valid for more than one test\ninput. We implement our approach as a two-step methodology: first, at runtime,\nwe collect inputs for a target method that is invoked within a CUT; next, we\nisolate the valid assertions of the CUT to be used within a PUT.\n  We evaluate our approach against 5 real-world Java modules, and collect valid\ninputs for 128 target methods from test and field executions. We generate 2,287\nPUTs, which invoke the target methods with a significantly larger number of\ntest inputs than the original CUTs. We execute the PUTs and find 217 that\nprovably demonstrate that their oracles hold for a larger range of inputs than\nenvisioned by the developers. From a testing theory perspective, our results\nshow that developers express assertions within CUTs that are general enough to\nhold beyond one particular input.\n","subjects":["Computing Research Repository/Software Engineering"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}