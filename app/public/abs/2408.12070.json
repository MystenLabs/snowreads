{"id":"2408.12070","title":"Better Debugging: Combining Static Analysis and LLMs for Explainable\n  Crashing Fault Localization","authors":"Jiwei Yan, Jinhao Huang, Chunrong Fang, Jun Yan, Jian Zhang","authorsParsed":[["Yan","Jiwei",""],["Huang","Jinhao",""],["Fang","Chunrong",""],["Yan","Jun",""],["Zhang","Jian",""]],"versions":[{"version":"v1","created":"Thu, 22 Aug 2024 02:18:35 GMT"}],"updateDate":"2024-08-23","timestamp":1724293115000,"abstract":"  Nowadays, many applications do not exist independently but rely on various\nframeworks or libraries. The frequent evolution and the complex implementation\nof framework APIs induce many unexpected post-release crashes. Starting from\nthe crash stack traces, existing approaches either perform direct call graph\n(CG) tracing or construct datasets with similar crash-fixing records to locate\nbuggy methods. However, these approaches are limited by the completeness of CG\nor dependent on historical fixing records. Moreover, they fail to explain the\nbuggy candidates by revealing their relationship with the crashing point.\n  To fill the gap, we propose an explainable crashing fault localization\napproach by combining static analysis and LLM techniques. Our primary insight\nis that understanding the semantics of exception-throwing statements in the\nframework code can help find and apprehend the buggy methods in the app code.\nBased on this idea, first, we design the exception-thrown summary (ETS) that\ndescribes the key elements related to each framework-specific exception and\nextract ETSs by performing static analysis. Then we make data-tracking of its\nkey elements to identify and sort buggy candidates for the given crash. After\nthat, we introduce LLMs to improve the explainability of the localization\nresults. To construct effective LLM prompts, we design the candidate\ninformation summary (CIS) that describes multiple types of explanation-related\ncontexts and then extract CISs via static analysis. We apply our approach to\none typical scenario, i.e., locating Android framework-specific crashing\nfaults, and implement a tool CrashTracker. For fault localization, it exhibited\nan overall MRR value of 0.91 in precision. For fault explanation, compared to\nthe naive one produced by static analysis only, the LLM-powered explanation\nachieved a 67.04% improvement in users' satisfaction score.\n","subjects":["Computing Research Repository/Software Engineering"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}