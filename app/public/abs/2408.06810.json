{"id":"2408.06810","title":"HLSPilot: LLM-based High-Level Synthesis","authors":"Chenwei Xiong, Cheng Liu, Huawei Li, Xiaowei Li","authorsParsed":[["Xiong","Chenwei",""],["Liu","Cheng",""],["Li","Huawei",""],["Li","Xiaowei",""]],"versions":[{"version":"v1","created":"Tue, 13 Aug 2024 10:59:30 GMT"}],"updateDate":"2024-08-14","timestamp":1723546770000,"abstract":"  Large language models (LLMs) have catalyzed an upsurge in automatic code\ngeneration, garnering significant attention for register transfer level (RTL)\ncode generation. Despite the potential of RTL code generation with natural\nlanguage, it remains error-prone and limited to relatively small modules\nbecause of the substantial semantic gap between natural language expressions\nand hardware design intent. In response to the limitations, we propose a\nmethodology that reduces the semantic gaps by utilizing C/C++ for generating\nhardware designs via High-Level Synthesis (HLS) tools. Basically, we build a\nset of C-to-HLS optimization strategies catering to various code patterns, such\nas nested loops and local arrays. Then, we apply these strategies to sequential\nC/C++ code through in-context learning, which provides the LLMs with exemplary\nC/C++ to HLS prompts. With this approach, HLS designs can be generated\neffectively. Since LLMs still face problems in determining the optimized pragma\nparameters precisely, we have a design space exploration (DSE) tool integrated\nfor pragma parameter tuning. Furthermore, we also employ profiling tools to\npinpoint the performance bottlenecks within a program and selectively convert\nbottleneck components to HLS code for hardware acceleration. By combining the\nLLM-based profiling, C/C++ to HLS translation, and DSE, we have established\nHLSPilot, the first LLM-enabled high-level synthesis framework, which can fully\nautomate the high-level application acceleration on hybrid CPU-FPGA\narchitectures. According to our experiments on real-world application\nbenchmarks, HLSPilot achieve comparable performance in general and can even\noutperform manually crafted counterparts, thereby underscoring the substantial\npromise of LLM-assisted hardware designs.\n","subjects":["Computing Research Repository/Hardware Architecture"],"license":"http://creativecommons.org/licenses/by-nc-nd/4.0/"}