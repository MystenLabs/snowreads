{"id":"2407.20559","title":"Practical Rely/Guarantee Verification of an Efficient Lock for seL4 on\n  Multicore Architectures","authors":"Robert J. Colvin, Ian J. Hayes, Scott Heiner, Peter H\\\"ofner, Larissa\n  Meinicke and Roger C. Su","authorsParsed":[["Colvin","Robert J.",""],["Hayes","Ian J.",""],["Heiner","Scott",""],["HÃ¶fner","Peter",""],["Meinicke","Larissa",""],["Su","Roger C.",""]],"versions":[{"version":"v1","created":"Tue, 30 Jul 2024 05:27:16 GMT"}],"updateDate":"2024-07-31","timestamp":1722317236000,"abstract":"  Developers of low-level systems code providing core functionality for\noperating systems and kernels must address hardware-level features of modern\nmulticore architectures. A particular feature is pipelined \"out-of-order\nexecution\" of the code as written, the effects of which are typically\nsummarised as a \"weak memory model\" - a term which includes further\ncomplicating factors that may be introduced by compiler optimisations. In many\ncases, the nondeterminism inherent in weak memory models can be expressed as\nmicro-parallelism, i.e., parallelism within threads and not just between them.\nFortunately Jones' rely/guarantee reasoning provides a compositional method for\nshared-variable concurrency, whether that be in terms of communication between\ntop-level threads or micro-parallelism within threads. In this paper we provide\nan in-depth verification of the lock algorithm used in the seL4 microkernel,\nusing rely/guarantee to handle both interthread communication as well as\nmicro-parallelism introduced by weak memory models.\n","subjects":["Computing Research Repository/Logic in Computer Science"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}