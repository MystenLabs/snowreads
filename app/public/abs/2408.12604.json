{"id":"2408.12604","title":"Generational Computation Reduction in Informal Counterexample-Driven\n  Genetic Programming","authors":"Thomas Helmuth and Edward Pantridge and James Gunder Frazier and Lee\n  Spector","authorsParsed":[["Helmuth","Thomas",""],["Pantridge","Edward",""],["Frazier","James Gunder",""],["Spector","Lee",""]],"versions":[{"version":"v1","created":"Thu, 8 Aug 2024 01:06:28 GMT"}],"updateDate":"2024-08-26","timestamp":1723079188000,"abstract":"  Counterexample-driven genetic programming (CDGP) uses specifications provided\nas formal constraints to generate the training cases used to evaluate evolving\nprograms. It has also been extended to combine formal constraints and\nuser-provided training data to solve symbolic regression problems. Here we show\nhow the ideas underlying CDGP can also be applied using only user-provided\ntraining data, without formal specifications. We demonstrate the application of\nthis method, called ``informal CDGP,'' to software synthesis problems. Our\nresults show that informal CDGP finds solutions faster (i.e. with fewer program\nexecutions) than standard GP. Additionally, we propose two new variants to\ninformal CDGP, and find that one produces significantly more successful runs on\nabout half of the tested problems. Finally, we study whether the addition of\ncounterexample training cases to the training set is useful by comparing\ninformal CDGP to using a static subsample of the training set, and find that\nthe addition of counterexamples significantly improves performance.\n","subjects":["Computing Research Repository/Neural and Evolutionary Computing","Computing Research Repository/Artificial Intelligence","Computing Research Repository/Software Engineering"],"license":"http://creativecommons.org/licenses/by-nc-nd/4.0/"}