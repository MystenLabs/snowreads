{"id":"2407.16235","title":"Comparison of Static Application Security Testing Tools and Large\n  Language Models for Repo-level Vulnerability Detection","authors":"Xin Zhou, Duc-Manh Tran, Thanh Le-Cong, Ting Zhang, Ivana Clairine\n  Irsan, Joshua Sumarlin, Bach Le, David Lo","authorsParsed":[["Zhou","Xin",""],["Tran","Duc-Manh",""],["Le-Cong","Thanh",""],["Zhang","Ting",""],["Irsan","Ivana Clairine",""],["Sumarlin","Joshua",""],["Le","Bach",""],["Lo","David",""]],"versions":[{"version":"v1","created":"Tue, 23 Jul 2024 07:21:14 GMT"}],"updateDate":"2024-07-24","timestamp":1721719274000,"abstract":"  Software vulnerabilities pose significant security challenges and potential\nrisks to society, necessitating extensive efforts in automated vulnerability\ndetection. There are two popular lines of work to address automated\nvulnerability detection. On one hand, Static Application Security Testing\n(SAST) is usually utilized to scan source code for security vulnerabilities,\nespecially in industries. On the other hand, deep learning (DL)-based methods,\nespecially since the introduction of large language models (LLMs), have\ndemonstrated their potential in software vulnerability detection. However,\nthere is no comparative study between SAST tools and LLMs, aiming to determine\ntheir effectiveness in vulnerability detection, understand the pros and cons of\nboth SAST and LLMs, and explore the potential combination of these two families\nof approaches.\n  In this paper, we compared 15 diverse SAST tools with 12 popular or\nstate-of-the-art open-source LLMs in detecting software vulnerabilities from\nrepositories of three popular programming languages: Java, C, and Python. The\nexperimental results showed that SAST tools obtain low vulnerability detection\nrates with relatively low false positives, while LLMs can detect up 90\\% to\n100\\% of vulnerabilities but suffer from high false positives. By further\nensembling the SAST tools and LLMs, the drawbacks of both SAST tools and LLMs\ncan be mitigated to some extent. Our analysis sheds light on both the current\nprogress and future directions for software vulnerability detection.\n","subjects":["Computing Research Repository/Software Engineering","Computing Research Repository/Artificial Intelligence"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}