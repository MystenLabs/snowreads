{"id":"2407.10812","title":"GHunter: Universal Prototype Pollution Gadgets in JavaScript Runtimes","authors":"Eric Cornelissen and Mikhail Shcherbakov and Musard Balliu","authorsParsed":[["Cornelissen","Eric",""],["Shcherbakov","Mikhail",""],["Balliu","Musard",""]],"versions":[{"version":"v1","created":"Mon, 15 Jul 2024 15:30:00 GMT"}],"updateDate":"2024-07-16","timestamp":1721057400000,"abstract":"  Prototype pollution is a recent vulnerability that affects JavaScript code,\nleading to high impact attacks such as arbitrary code execution. The\nvulnerability is rooted in JavaScript's prototype-based inheritance, enabling\nattackers to inject arbitrary properties into an object's prototype at runtime.\nThe impact of prototype pollution depends on the existence of otherwise benign\npieces of code (gadgets), which inadvertently read from attacker-controlled\nproperties to execute security-sensitive operations. While prior works\nprimarily study gadgets in third-party libraries and client-side applications,\ngadgets in JavaScript runtime environments are arguably more impactful as they\naffect any application that executes on these runtimes.\n  In this paper we design, implement, and evaluate a pipeline, GHunter, to\nsystematically detect gadgets in V8-based JavaScript runtimes with prime focus\non Node.js and Deno. GHunter supports a lightweight dynamic taint analysis to\nautomatically identify gadget candidates which we validate manually to derive\nproof-of-concept exploits. We implement GHunter by modifying the V8 engine and\nthe targeted runtimes along with features for facilitating manual validation.\nDriven by the test suites of Node.js and Deno, we use GHunter in a study of\ngadgets in these runtimes. We identified a total of 56 new gadgets in Node.js\nand 67 gadgets in Deno, pertaining to vulnerabilities such as arbitrary code\nexecution (19), privilege escalation (31), path traversal (13), and more.\nMoreover, we systematize, for the first time, existing mitigations for\nprototype pollution and gadgets in terms of development guidelines. We collect\na list of vulnerable applications and revisit the fixes through the lens of our\nguidelines. Through this exercise, we identified one high-severity CVE leading\nto remote code execution, which was due to incorrectly fixing a gadget.\n","subjects":["Computing Research Repository/Cryptography and Security"],"license":"http://creativecommons.org/licenses/by-sa/4.0/"}