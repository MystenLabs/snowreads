{"id":"2407.02975","title":"Automated Verification of Higher-Order Probabilistic Programs via a\n  Dependent Refinement Type System","authors":"Satoshi Kura, and Hiroshi Unno","authorsParsed":[["Kura","Satoshi",""],["Unno","Hiroshi",""]],"versions":[{"version":"v1","created":"Wed, 3 Jul 2024 10:17:52 GMT"}],"updateDate":"2024-07-04","timestamp":1720001872000,"abstract":"  Verification of higher-order probabilistic programs is a challenging problem.\nWe present a verification method that supports several quantitative properties\nof higher-order probabilistic programs. Usually, extending verification methods\nto handle the quantitative aspects of probabilistic programs often entails\nextensive modifications to existing tools, reducing compatibility with advanced\ntechniques developed for qualitative verification. In contrast, our approach\nnecessitates only small amounts of modification, facilitating the reuse of\nexisting techniques and implementations. On the theoretical side, we propose a\ndependent refinement type system for a generalised higher-order fixed point\nlogic (HFL). Combined with continuation-passing style encodings of properties\ninto HFL, our dependent refinement type system enables reasoning about several\nquantitative properties, including weakest pre-expectations, expected costs,\nmoments of cost, and conditional weakest pre-expectations for higher-order\nprobabilistic programs with continuous distributions and conditioning. The\nsoundness of our approach is proved in a general setting using a framework of\ncategorical semantics so that we don't have to repeat similar proofs for each\nindividual problem. On the empirical side, we implement a type checker for our\ndependent refinement type system that reduces the problem of type checking to\nconstraint solving. We introduce admissible predicate variables and integrable\npredicate variables to constrained Horn clauses (CHC) so that we can soundly\nreason about the least fixed points and samplings from probability\ndistributions. Our implementation demonstrates that existing CHC solvers\ndeveloped for non-probabilistic programs can be extended to a solver for the\nextended CHC with only small efforts. We also demonstrate the ability of our\ntype checker to verify various concrete examples.\n","subjects":["Computing Research Repository/Logic in Computer Science"],"license":"http://creativecommons.org/licenses/by/4.0/"}