{"id":"2407.08070","title":"Mover Logic: A Concurrent Program Logic for Reduction and Rely-Guarantee\n  Reasoning (Extended Version)","authors":"Cormac Flanagan and Stephen N. Freund","authorsParsed":[["Flanagan","Cormac",""],["Freund","Stephen N.",""]],"versions":[{"version":"v1","created":"Wed, 10 Jul 2024 22:14:00 GMT"},{"version":"v2","created":"Fri, 12 Jul 2024 17:13:30 GMT"}],"updateDate":"2024-07-15","timestamp":1720649640000,"abstract":"  Rely-guarantee (RG) logic uses thread interference specifications (relies and\nguarantees) to reason about the correctness of multithreaded software.\nUnfortunately, RG logic requires each function postcondition to be \"stabilized\"\nor specialized to the behavior of other threads, making it difficult to write\nfunction specifications that are reusable at multiple call sites.\n  This paper presents mover logic, which extends RG logic to address this\nproblem via the notion of atomic functions. Atomic functions behave as if they\nexecute serially without interference from concurrent threads, and so they can\nbe assigned more general and reusable specifications that avoid the\nstabilization requirement of RG logic. Several practical verifiers (Calvin-R,\nQED, CIVL, Armada, Anchor, etc.) have demonstrated the modularity benefits of\natomic function specifications. However, the complexity of these systems and\ntheir correctness proofs makes it challenging to understand and extend these\nsystems. Mover logic formalizes the central ideas of reduction in a declarative\nprogram logic that provides a foundation for future work in this area.\n","subjects":["Computing Research Repository/Programming Languages"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}