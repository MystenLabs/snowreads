{"id":"2408.08772","title":"Vital: Vulnerability-Oriented Symbolic Execution via Type-Unsafe\n  Pointer-Guided Monte Carlo Tree Search","authors":"Haoxin Tu, Lingxiao Jiang, and Marcel B\\\"ohme","authorsParsed":[["Tu","Haoxin",""],["Jiang","Lingxiao",""],["BÃ¶hme","Marcel",""]],"versions":[{"version":"v1","created":"Fri, 16 Aug 2024 14:29:57 GMT"}],"updateDate":"2024-08-19","timestamp":1723818597000,"abstract":"  How to find memory safety bugs efficiently when navigating a symbolic\nexecution tree that suffers from path explosion? Existing solutions either\nadopt path search heuristics to maximize coverage rate or chopped symbolic\nexecution to skip uninteresting code (i.e., manually labeled as\nvulnerability-unrelated) during path exploration. However, most existing search\nheuristics are not vulnerability-oriented, and manual labeling of irrelevant\ncode-to-be-skipped relies heavily on prior expert knowledge, making it hard to\ndetect vulnerabilities effectively in practice.\n  This paper proposes Vital, a new vulnerability-oriented symbolic execution\nvia type-unsafe pointer-guided Monte Carlo Tree Search (MCTS). A pointer that\nis type unsafe cannot be statically proven to be safely dereferenced without\nmemory corruption. Our key hypothesis is that a path with more type unsafe\npointers is more likely to contain vulnerabilities. Vital drives a guided MCTS\nto prioritize paths in the symbolic execution tree that contain a larger number\nof unsafe pointers and to effectively navigate the exploration-exploitation\ntrade-off. We built Vital on top of KLEE and compared it with existing search\nstrategies and chopped symbolic execution. In the former, the results\ndemonstrate that Vital could cover up to 90.03% more unsafe pointers and detect\nup to 37.50% more unique memory errors. In the latter, the results show that\nVital could achieve a speedup of up to 30x execution time and a reduction of up\nto 20x memory consumption on automatically detecting known vulnerabilities\nwithout prior expert knowledge.\n","subjects":["Computing Research Repository/Software Engineering","Computing Research Repository/Cryptography and Security"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}