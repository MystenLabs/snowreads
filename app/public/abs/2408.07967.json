{"id":"2408.07967","title":"FlashGS: Efficient 3D Gaussian Splatting for Large-scale and\n  High-resolution Rendering","authors":"Guofeng Feng, Siyan Chen, Rong Fu, Zimu Liao, Yi Wang, Tao Liu, Zhilin\n  Pei, Hengjie Li, Xingcheng Zhang, Bo Dai","authorsParsed":[["Feng","Guofeng",""],["Chen","Siyan",""],["Fu","Rong",""],["Liao","Zimu",""],["Wang","Yi",""],["Liu","Tao",""],["Pei","Zhilin",""],["Li","Hengjie",""],["Zhang","Xingcheng",""],["Dai","Bo",""]],"versions":[{"version":"v1","created":"Thu, 15 Aug 2024 06:27:42 GMT"},{"version":"v2","created":"Mon, 19 Aug 2024 09:29:33 GMT"}],"updateDate":"2024-08-20","timestamp":1723703262000,"abstract":"  This work introduces FlashGS, an open-source CUDA Python library, designed to\nfacilitate the efficient differentiable rasterization of 3D Gaussian Splatting\nthrough algorithmic and kernel-level optimizations. FlashGS is developed based\non the observations from a comprehensive analysis of the rendering process to\nenhance computational efficiency and bring the technique to wide adoption. The\npaper includes a suite of optimization strategies, encompassing redundancy\nelimination, efficient pipelining, refined control and scheduling mechanisms,\nand memory access optimizations, all of which are meticulously integrated to\namplify the performance of the rasterization process. An extensive evaluation\nof FlashGS' performance has been conducted across a diverse spectrum of\nsynthetic and real-world large-scale scenes, encompassing a variety of image\nresolutions. The empirical findings demonstrate that FlashGS consistently\nachieves an average 4x acceleration over mobile consumer GPUs, coupled with\nreduced memory consumption. These results underscore the superior performance\nand resource optimization capabilities of FlashGS, positioning it as a\nformidable tool in the domain of 3D rendering.\n","subjects":["Computing Research Repository/Computer Vision and Pattern Recognition"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}