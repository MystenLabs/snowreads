{"id":"2407.12399","title":"A Practical Solver for Scalar Data Topological Simplification","authors":"Mohamed Kissi, Mathieu Pont, Joshua A. Levine, Julien Tierny","authorsParsed":[["Kissi","Mohamed",""],["Pont","Mathieu",""],["Levine","Joshua A.",""],["Tierny","Julien",""]],"versions":[{"version":"v1","created":"Wed, 17 Jul 2024 08:25:32 GMT"},{"version":"v2","created":"Tue, 13 Aug 2024 11:28:13 GMT"},{"version":"v3","created":"Tue, 20 Aug 2024 21:27:00 GMT"}],"updateDate":"2024-08-22","timestamp":1721204732000,"abstract":"  This paper presents a practical approach for the optimization of topological\nsimplification, a central pre-processing step for the analysis and\nvisualization of scalar data. Given an input scalar field f and a set of\n\"signal\" persistence pairs to maintain, our approach produces an output field g\nthat is close to f and which optimizes (i) the cancellation of \"non-signal\"\npairs, while (ii) preserving the \"signal\" pairs. In contrast to pre-existing\nsimplification algorithms, our approach is not restricted to persistence pairs\ninvolving extrema and can thus address a larger class of topological features,\nin particular saddle pairs in three-dimensional scalar data. Our approach\nleverages recent generic persistence optimization frameworks and extends them\nwith tailored accelerations specific to the problem of topological\nsimplification. Extensive experiments report substantial accelerations over\nthese frameworks, thereby making topological simplification optimization\npractical for real-life datasets. Our approach enables a direct visualization\nand analysis of the topologically simplified data, e.g., via isosurfaces of\nsimplified topology (fewer components and handles). We apply our approach to\nthe extraction of prominent filament structures in three-dimensional data.\nSpecifically, we show that our pre-simplification of the data leads to\npractical improvements over standard topological techniques for removing\nfilament loops. We also show how our approach can be used to repair genus\ndefects in surface processing. Finally, we provide a C++ implementation for\nreproducibility purposes.\n","subjects":["Computing Research Repository/Machine Learning","Computing Research Repository/Computational Geometry","Computing Research Repository/Computer Vision and Pattern Recognition","Computing Research Repository/Graphics"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}