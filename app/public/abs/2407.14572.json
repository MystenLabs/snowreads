{"id":"2407.14572","title":"Affinity-aware Serverless Function Scheduling","authors":"Giuseppe De Palma, Saverio Giallorenzo, Jacopo Mauro, Matteo Trentin\n  and Gianluigi Zavattaro","authorsParsed":[["De Palma","Giuseppe",""],["Giallorenzo","Saverio",""],["Mauro","Jacopo",""],["Trentin","Matteo",""],["Zavattaro","Gianluigi",""]],"versions":[{"version":"v1","created":"Fri, 19 Jul 2024 09:55:20 GMT"}],"updateDate":"2024-07-23","timestamp":1721382920000,"abstract":"  Functions-as-a-Service (FaaS) is a Serverless Cloud paradigm where a platform\nmanages the scheduling (e.g., resource allocation, runtime environments) of\nstateless functions. Recent developments show the benefits of using\ndomain-specific languages to express per-function policies, e.g., policies can\nenforce the allocation of functions on nodes that enjoy lower data-access\nlatencies thanks to proximity and connection pooling. Here, we focus on\naffinity-aware scenarios, i.e., where, for performance and functional\nrequirements, the allocation of a function depends on the presence/absence of\nother functions on nodes. We first present aAPP, an affinity-aware extension of\na declarative, platform-agnostic language for defining custom function\nscheduling policies. We implement a prototype supporting this scheduling\nlanguage by extending the popular Apache OpenWhisk FaaS platform and show that\nusing aAPP in affinity-aware scenarios leads to an appreciable reduction in\nlatency without noticeable overhead for scenarios without affinity constraints.\n","subjects":["Computing Research Repository/Distributed, Parallel, and Cluster Computing"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}