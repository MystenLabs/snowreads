{"id":"2408.07082","title":"Evaluating Source Code Quality with Large Languagem Models: a\n  comparative study","authors":"Igor Regis da Silva Sim\\~oes, Elaine Venson","authorsParsed":[["Sim√µes","Igor Regis da Silva",""],["Venson","Elaine",""]],"versions":[{"version":"v1","created":"Wed, 7 Aug 2024 18:44:46 GMT"}],"updateDate":"2024-08-15","timestamp":1723056286000,"abstract":"  Code quality is an attribute composed of various metrics, such as complexity,\nreadability, testability, interoperability, reusability, and the use of good or\nbad practices, among others. Static code analysis tools aim to measure a set of\nattributes to assess code quality. However, some quality attributes can only be\nmeasured by humans in code review activities, readability being an example.\nGiven their natural language text processing capability, we hypothesize that a\nLarge Language Model (LLM) could evaluate the quality of code, including\nattributes currently not automatable. This paper aims to describe and analyze\nthe results obtained using LLMs as a static analysis tool, evaluating the\noverall quality of code. We compared the LLM with the results obtained with the\nSonarQube software and its Maintainability metric for two Open Source Software\n(OSS) Java projects, one with Maintainability Rating A and the other B. A total\nof 1,641 classes were analyzed, comparing the results in two versions of\nmodels: GPT 3.5 Turbo and GPT 4o. We demonstrated that the GPT 3.5 Turbo LLM\nhas the ability to evaluate code quality, showing a correlation with Sonar's\nmetrics. However, there are specific aspects that differ in what the LLM\nmeasures compared to SonarQube. The GPT 4o version did not present the same\nresults, diverging from the previous model and Sonar by assigning a high\nclassification to codes that were assessed as lower quality. This study\ndemonstrates the potential of LLMs in evaluating code quality. However, further\nresearch is necessary to investigate limitations such as LLM's cost,\nvariability of outputs and explore quality characteristics not measured by\ntraditional static analysis tools.\n","subjects":["Computing Research Repository/Software Engineering"],"license":"http://creativecommons.org/licenses/by-nc-sa/4.0/"}