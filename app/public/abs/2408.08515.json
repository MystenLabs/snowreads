{"id":"2408.08515","title":"Selecting Initial Seeds for Better JVM Fuzzing","authors":"Tianchang Gao, Junjie Chen, Dong Wang, Yile Guo, Yingquan Zhao, Zan\n  Wang","authorsParsed":[["Gao","Tianchang",""],["Chen","Junjie",""],["Wang","Dong",""],["Guo","Yile",""],["Zhao","Yingquan",""],["Wang","Zan",""]],"versions":[{"version":"v1","created":"Fri, 16 Aug 2024 04:10:59 GMT"}],"updateDate":"2024-08-19","timestamp":1723781459000,"abstract":"  Literature in traditional program fuzzing has confirmed that effectiveness is\nlargely impacted by redundancy among initial seeds, thereby proposing a series\nof seed selection methods. JVM fuzzing, compared to traditional ones, presents\nunique characteristics, including large-scale and intricate code, and programs\nwith both syntactic and semantic features. However, it remains unclear whether\nthe existing seed selection methods are suitable for JVM fuzzing and whether\nutilizing program features can enhance effectiveness. To address this, we\ndevise a total of 10 initial seed selection methods, comprising coverage-based,\nprefuzz-based, and program-feature-based methods. We then conduct an empirical\nstudy on three JVM implementations to extensively evaluate the performance of\nthe seed selection methods within two SOTA fuzzing techniques (JavaTailor and\nVECT). Specifically, we examine performance from three aspects: (i)\neffectiveness and efficiency using widely studied initial seeds, (ii)\neffectiveness using the programs in the wild, and (iii) the ability to detect\nnew bugs. Evaluation results first show that the program-feature-based method\nthat utilizes the control flow graph not only has a significantly lower time\noverhead (i.e., 30s), but also outperforms other methods, achieving 142% to\n269% improvement compared to the full set of initial seeds. Second, results\nreveal that the initial seed selection greatly improves the quality of wild\nprograms and exhibits complementary effectiveness by detecting new behaviors.\nThird, results demonstrate that given the same testing period, initial seed\nselection improves the JVM fuzzing techniques by detecting more unknown bugs.\nParticularly, 21 out of the 25 detected bugs have been confirmed or fixed by\ndevelopers. This work takes the first look at initial seed selection in JVM\nfuzzing, confirming its importance in fuzzing effectiveness and efficiency.\n","subjects":["Computing Research Repository/Software Engineering"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}