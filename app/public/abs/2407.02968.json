{"id":"2407.02968","title":"Unified Anomaly Detection methods on Edge Device using Knowledge\n  Distillation and Quantization","authors":"Sushovan Jena, Arya Pulkit, Kajal Singh, Anoushka Banerjee, Sharad\n  Joshi, Ananth Ganesh, Dinesh Singh, Arnav Bhavsar","authorsParsed":[["Jena","Sushovan",""],["Pulkit","Arya",""],["Singh","Kajal",""],["Banerjee","Anoushka",""],["Joshi","Sharad",""],["Ganesh","Ananth",""],["Singh","Dinesh",""],["Bhavsar","Arnav",""]],"versions":[{"version":"v1","created":"Wed, 3 Jul 2024 10:04:48 GMT"}],"updateDate":"2024-07-04","timestamp":1720001088000,"abstract":"  With the rapid advances in deep learning and smart manufacturing in Industry\n4.0, there is an imperative for high-throughput, high-performance, and fully\nintegrated visual inspection systems. Most anomaly detection approaches using\ndefect detection datasets, such as MVTec AD, employ one-class models that\nrequire fitting separate models for each class. On the contrary, unified models\neliminate the need for fitting separate models for each class and significantly\nreduce cost and memory requirements. Thus, in this work, we experiment with\nconsidering a unified multi-class setup. Our experimental study shows that\nmulti-class models perform at par with one-class models for the standard MVTec\nAD dataset. Hence, this indicates that there may not be a need to learn\nseparate object/class-wise models when the object classes are significantly\ndifferent from each other, as is the case of the dataset considered.\nFurthermore, we have deployed three different unified lightweight architectures\non the CPU and an edge device (NVIDIA Jetson Xavier NX). We analyze the\nquantized multi-class anomaly detection models in terms of latency and memory\nrequirements for deployment on the edge device while comparing\nquantization-aware training (QAT) and post-training quantization (PTQ) for\nperformance at different precision widths. In addition, we explored two\ndifferent methods of calibration required in post-training scenarios and show\nthat one of them performs notably better, highlighting its importance for\nunsupervised tasks. Due to quantization, the performance drop in PTQ is further\ncompensated by QAT, which yields at par performance with the original 32-bit\nFloating point in two of the models considered.\n","subjects":["Computing Research Repository/Computer Vision and Pattern Recognition","Computing Research Repository/Artificial Intelligence","Computing Research Repository/Computational Complexity","Computing Research Repository/Emerging Technologies"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}