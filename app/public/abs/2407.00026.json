{"id":"2407.00026","title":"Preparing for HPC on RISC-V: Examining Vectorization and Distributed\n  Performance of an Astrophyiscs Application with HPX and Kokkos","authors":"Patrick Diehl and Panagiotis Syskakis and Gregor Dai{\\ss} and Steven\n  R. Brandt and Alireza Kheirkhahan and Srinivas Yadav Singanaboina and Dominic\n  Marcello and Chris Taylor and John Leidel and Hartmut Kaiser","authorsParsed":[["Diehl","Patrick",""],["Syskakis","Panagiotis",""],["Dai√ü","Gregor",""],["Brandt","Steven R.",""],["Kheirkhahan","Alireza",""],["Singanaboina","Srinivas Yadav",""],["Marcello","Dominic",""],["Taylor","Chris",""],["Leidel","John",""],["Kaiser","Hartmut",""]],"versions":[{"version":"v1","created":"Fri, 10 May 2024 19:54:41 GMT"},{"version":"v2","created":"Thu, 15 Aug 2024 15:39:21 GMT"}],"updateDate":"2024-08-16","timestamp":1715370881000,"abstract":"  In recent years, interest in RISC-V computing architectures has moved from\nacademic to mainstream, especially in the field of High Performance Computing\nwhere energy limitations are increasingly a concern. As of this year, the first\nsingle board RISC-V CPUs implementing the finalized ratified vector\nspecification are being released. The RISC-V vector specification follows in\nthe tradition of vector processors found in the CDC STAR-100, the Cray-1, the\nConvex C-Series, and the NEC SX machines and accelerators. The family of vector\nprocessors offers support for variable-length array processing as opposed to\nthe fixed-length processing functionality offered by SIMD. Vector processors\noffer opportunities to perform vector-chaining which allows temporary results\nto be used without the need to resolve memory references.\n  In this work, we use the Octo-Tiger multi-physics, multi-scale, 3D adaptive\nmesh refinement astrophysics application to study these early RISC-V chips with\nvector machine support. We report on our experience in porting this modern C++\ncode (which is built upon several open-source libraries such as HPX and Kokkos)\nto RISC-V. In addition, we show the impact of the RISC-V Vector extension on a\nRISC-V single board computer by implementing the std::experimental:simd\ninterface and integrating it with our code. We also compare the application's\nperformance, scalability, and power consumption on desktop-grade RISC-V\ncomputer to an A64FX system.\n","subjects":["Computing Research Repository/Distributed, Parallel, and Cluster Computing"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}