{"id":"2407.04311","title":"Utilizing classical programming principles in the Intel Quantum SDK:\n  implementation of quantum lattice Boltzmann method","authors":"Tejas Shinde, Ljubomir Budinski, Ossi Niemim\\\"aki, Valtteri Lahtinen,\n  Helena Liebelt, Rui Li","authorsParsed":[["Shinde","Tejas",""],["Budinski","Ljubomir",""],["Niemim√§ki","Ossi",""],["Lahtinen","Valtteri",""],["Liebelt","Helena",""],["Li","Rui",""]],"versions":[{"version":"v1","created":"Fri, 5 Jul 2024 07:30:25 GMT"}],"updateDate":"2024-07-08","timestamp":1720164625000,"abstract":"  We explore the use of classical programming techniques in implementing the\nquantum lattice Boltzmann method in the Intel Quantum SDK -- a software tool\nfor quantum circuit creation and execution on Intel quantum hardware. As\nhardware access is limited, we use the state vector simulator provided by the\nSDK. The novelty of this work lies in leveraging classical techniques for the\nimplementation of quantum algorithms. We emphasize the refinement of algorithm\nimplementation and devise strategies to enhance quantum circuits for better\ncontrol over problem variables. To this end, we adopt classical principles such\nas modularization, which allows for systematic and controlled execution of\ncomplex algorithms. Furthermore, we discuss how the same implementation could\nbe expanded from state vector simulations to execution on quantum hardware with\nminor adjustments in these configurations.\n","subjects":["Physics/Quantum Physics"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}