{"id":"2407.15080","title":"SNIP: Speculative Execution and Non-Interference Preservation for\n  Compiler Transformations","authors":"S\\\"oren van der Wall, Roland Meyer","authorsParsed":[["van der Wall","SÃ¶ren",""],["Meyer","Roland",""]],"versions":[{"version":"v1","created":"Sun, 21 Jul 2024 07:30:30 GMT"}],"updateDate":"2024-07-23","timestamp":1721547030000,"abstract":"  We address the problem of preserving non-interference across compiler\ntransformations under speculative semantics. We develop a proof method that\nensures the preservation uniformly across all source programs. The basis of our\nproof method is a new form of simulation relation. It operates over directives\nthat model the attacker's control over the micro-architectural state, and it\naccounts for the fact that the compiler transformation may change the influence\nof the micro-architectural state on the execution (and hence the directives).\nUsing our proof method, we show the correctness of dead code elimination. When\nwe tried to prove register allocation correct, we identified a previously\nunknown weakness that introduces violations to non-interference. We have\nconfirmed the weakness for a mainstream compiler on code from the libsodium\ncryptographic library. To reclaim security once more, we develop a novel static\nanalysis that operates on a product of source program and register-allocated\nprogram. Using the analysis, we present an automated fix to existing register\nallocation implementations. We prove the correctness of the fixed register\nallocations with our proof method.\n","subjects":["Computing Research Repository/Programming Languages","Computing Research Repository/Cryptography and Security"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"hsqjsbQCxuHhkn09VEJqqWCE82dC0THX8606kwNzPtE","pdfSize":"645858"}
