{"id":"2407.16974","title":"SelfPiCo: Self-Guided Partial Code Execution with LLMs","authors":"Zhipeng Xue, Zhipeng Gao, Shaohua Wang, Xing Hu, Xin Xia, Shanping Li","authorsParsed":[["Xue","Zhipeng",""],["Gao","Zhipeng",""],["Wang","Shaohua",""],["Hu","Xing",""],["Xia","Xin",""],["Li","Shanping",""]],"versions":[{"version":"v1","created":"Wed, 24 Jul 2024 03:43:30 GMT"}],"updateDate":"2024-07-25","timestamp":1721792610000,"abstract":"  Code executability plays a vital role in software debugging and testing\n(e.g., detecting runtime exceptions or assertion violations). However, code\nexecution, especially partial or arbitrary code execution, is a non-trivial\ntask due to missing definitions and complex third-party dependencies. To make\npartial code (such as code snippets posted on the web or code fragments deep\ninside complex software projects) executable, the existing study has proposed a\nmachine learning model to predict the undefined element types and inject the\npre-defined dummy values into execution. However, the performance of their tool\nis limited due to its simply designed dummy values and the inability to\ncontinue learning. In this paper, we design and implement a novel framework,\nnamed SelfPiCo (Self Guided Partial Code Executor), to dynamically guide\npartial code execution by incorporating the open-source LLM (i.e., Code Llama)\nwithin an interactive loop. Particularly, SelfPiCo leverages few-shot\nin-context learning and chain-of-thought reasoning to elicit human knowledge\nand logical reasoning based on fine-tuning the Code Llama model. SelfPiCo\ncontinuously learns from code execution results and refines its predictions\nstep after step. Our evaluations demonstrate that SelfPiCo can execute 72.7%\nand 83.3% of all lines in the open-source code and Stack Overflow snippets,\noutperforming the most recent state-of-the-art Lexecutor by 37.9% and 33.5%,\nrespectively. Moreover, SelfPiCo successfully detected 18 and 33 runtime type\nerror issues by executing the partial code from eight GitHub software projects\nand 43 Stack Overflow posts, demonstrating the practical usage and potential\napplication of our framework in practice.\n","subjects":["Computing Research Repository/Software Engineering"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}