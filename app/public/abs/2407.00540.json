{"id":"2407.00540","title":"Discourje: Run-Time Verification of Communication Protocols in Clojure\n  -- Live at Last (Technical Report)","authors":"Sung-Shik Jongmans","authorsParsed":[["Jongmans","Sung-Shik",""]],"versions":[{"version":"v1","created":"Sat, 29 Jun 2024 22:39:05 GMT"}],"updateDate":"2024-07-02","timestamp":1719700745000,"abstract":"  Multiparty session typing (MPST) is a formal method to make concurrent\nprogramming simpler. The idea is to use type checking to automatically prove\nsafety (protocol compliance) and liveness (communication deadlock freedom) of\nimplementations relative to specifications. Discourje is an existing run-time\nverification library for communication protocols in Clojure, based on dynamic\nMPST. The original version of Discourje can detect only safety violations. In\nthis paper, we present an extension of Discourje to detect also liveness\nviolations.\n","subjects":["Computing Research Repository/Programming Languages"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"34Bh1_E8aOnf0Eva6PIAuxVxP3K7VVL6xpnWO0araoI","pdfSize":"210483"}
