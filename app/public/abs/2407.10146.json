{"id":"2407.10146","title":"Fine Grained Lower Bounds for Multidimensional Knapsack","authors":"Ilan Doron-Arad, Ariel Kulik and Pasin Manurangsi","authorsParsed":[["Doron-Arad","Ilan",""],["Kulik","Ariel",""],["Manurangsi","Pasin",""]],"versions":[{"version":"v1","created":"Sun, 14 Jul 2024 10:35:08 GMT"}],"updateDate":"2024-07-16","timestamp":1720953308000,"abstract":"  We study the $d$-dimensional knapsack problem. We are given a set of items,\neach with a $d$-dimensional cost vector and a profit, along with a\n$d$-dimensional budget vector. The goal is to select a set of items that do not\nexceed the budget in all dimensions and maximize the total profit. A PTAS with\nrunning time $n^{\\Theta(d/\\varepsilon)}$ has long been known for this problem,\nwhere $\\varepsilon$ is the error parameter and $n$ is the encoding size.\nDespite decades of active research, the best running time of a PTAS has\nremained $O(n^{\\lceil d/\\varepsilon \\rceil - d})$. Unfortunately, existing\nlower bounds only cover the special case with two dimensions $d = 2$, and do\nnot answer whether there is a $n^{o(d/\\varepsilon)}$-time PTAS for larger\nvalues of $d$. The status of exact algorithms is similar: there is a simple\n$O(n \\cdot W^d)$-time (exact) dynamic programming algorithm, where $W$ is the\nmaximum budget, but there is no lower bound which explains the strong\nexponential dependence on $d$.\n  In this work, we show that the running times of the best-known PTAS and exact\nalgorithm cannot be improved up to a polylogarithmic factor assuming Gap-ETH.\nOur techniques are based on a robust reduction from 2-CSP, which embeds 2-CSP\nconstraints into a desired number of dimensions, exhibiting tight trade-off\nbetween $d$ and $\\varepsilon$ for most regimes of the parameters. Informally,\nwe obtain the following main results for $d$-dimensional knapsack.\n  No $n^{o(d/\\varepsilon \\cdot 1/(\\log(d/\\varepsilon))^2)}$-time\n$(1-\\varepsilon)$-approximation for every $\\varepsilon = O(1/\\log d)$.\n  No $(n+W)^{o(d/\\log d)}$-time exact algorithm (assuming ETH).\n  No $n^{o(\\sqrt{d})}$-time $(1-\\varepsilon)$-approximation for constant\n$\\varepsilon$.\n  $(d \\cdot \\log W)^{O(d^2)} + n^{O(1)}$-time\n$\\Omega(1/\\sqrt{d})$-approximation and a matching $n^{O(1)}$-time lower~bound.\n","subjects":["Computing Research Repository/Data Structures and Algorithms"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"uXgyefBO_VJWM-vpg6tUjpH3U3dTlJoegW4wf07ofqE","pdfSize":"456900"}
