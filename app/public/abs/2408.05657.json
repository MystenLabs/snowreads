{"id":"2408.05657","title":"Implementing and Executing Static Analysis Using LLVM and CodeChecker","authors":"Gabor Horvath, Reka Kovacs, Richard Szalay, Zoltan Porkolab","authorsParsed":[["Horvath","Gabor",""],["Kovacs","Reka",""],["Szalay","Richard",""],["Porkolab","Zoltan",""]],"versions":[{"version":"v1","created":"Sat, 10 Aug 2024 23:49:04 GMT"}],"updateDate":"2024-08-13","timestamp":1723333744000,"abstract":"  Static analysis is a method of analyzing source code without executing it. It\nis widely used to find bugs and code smells in industrial software. Besides\nother methods, the most important techniques are those based on the abstract\nsyntax tree and those performing symbolic execution. Both of these methods\nfound their role in modern software development as they have different\nadvantages and limitations. In this tutorial, we present two problems from the\nC++ programming language: the elimination of redundant pointers, and the\nreporting of dangling pointers originating from incorrect use of the\nstd::string class. These two issues have different theoretical backgrounds and\nfinding them requires different implementation techniques. We will provide a\nstep-by-step guide to implement the checkers (software to identify the\naforementioned problems) - one based on the abstract syntax analysis method,\nthe other exploring the possibilities of symbolic execution. The methods are\nexplained in great detail and supported by code examples. The intended audience\nfor this tutorial are both architects of static analysis tools and developers\nwho want to understand the advantages and constraints of the different methods.\n","subjects":["Computing Research Repository/Software Engineering"],"license":"http://creativecommons.org/licenses/by/4.0/"}