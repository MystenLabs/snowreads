{"id":"2407.11406","title":"Revisiting the Impact of Pursuing Modularity for Code Generation","authors":"Deokyeong Kang, Ki Jung Seo, Taeuk Kim","authorsParsed":[["Kang","Deokyeong",""],["Seo","Ki Jung",""],["Kim","Taeuk",""]],"versions":[{"version":"v1","created":"Tue, 16 Jul 2024 05:48:24 GMT"}],"updateDate":"2024-07-17","timestamp":1721108904000,"abstract":"  Modular programming, which aims to construct the final program by integrating\nsmaller, independent building blocks, has been regarded as a desirable practice\nin software development. However, with the rise of recent code generation\nagents built upon large language models (LLMs), a question emerges: is this\ntraditional practice equally effective for these new tools? In this work, we\nassess the impact of modularity in code generation by introducing a novel\nmetric for its quantitative measurement. Surprisingly, unlike conventional\nwisdom on the topic, we find that modularity is not a core factor for improving\nthe performance of code generation models. We also explore potential\nexplanations for why LLMs do not exhibit a preference for modular code compared\nto non-modular code.\n","subjects":["Computing Research Repository/Computation and Language"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}