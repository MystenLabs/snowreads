{"id":"2408.12179","title":"HPR-LP: An implementation of an HPR method for solving linear\n  programming","authors":"Kaihuang Chen, Defeng Sun, Yancheng Yuan, Guojun Zhang, Xinyuan Zhao","authorsParsed":[["Chen","Kaihuang",""],["Sun","Defeng",""],["Yuan","Yancheng",""],["Zhang","Guojun",""],["Zhao","Xinyuan",""]],"versions":[{"version":"v1","created":"Thu, 22 Aug 2024 07:51:55 GMT"}],"updateDate":"2024-08-23","timestamp":1724313115000,"abstract":"  In this paper, we introduce an HPR-LP solver, an implementation of a Halpern\nPeaceman-Rachford (HPR) method with semi-proximal terms for solving linear\nprogramming (LP). The HPR method enjoys the iteration complexity of $O(1/k)$ in\nterms of the Karush-Kuhn-Tucker residual and the objective error. Based on the\ncomplexity results, we design an adaptive strategy of restart and penalty\nparameter update to improve the efficiency and robustness of the HPR method. We\nconduct extensive numerical experiments on different LP benchmark datasets\nusing NVIDIA A100-SXM4-80GB GPU in different stopping tolerances. Our solver's\nJulia version achieves a $\\textbf{2.39x}$ to $\\textbf{5.70x}$ speedup measured\nby SGM10 on benchmark datasets with presolve ($\\textbf{2.03x}$ to\n$\\textbf{4.06x}$ without presolve) over the award-winning solver PDLP with the\ntolerance of $10^{-8}$.\n","subjects":["Mathematics/Optimization and Control"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}