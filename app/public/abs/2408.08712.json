{"id":"2408.08712","title":"R-HLS: An IR for Dynamic High-Level Synthesis and Memory Disambiguation\n  based on Regions and State Edges","authors":"David Metz, Nico Reissmann, and Magnus Sj\\\"alander","authorsParsed":[["Metz","David",""],["Reissmann","Nico",""],["Sj√§lander","Magnus",""]],"versions":[{"version":"v1","created":"Fri, 16 Aug 2024 12:50:04 GMT"}],"updateDate":"2024-08-19","timestamp":1723812604000,"abstract":"  Dynamically scheduled hardware enables high-level synthesis (HLS) for\napplications with irregular control flow and latencies, which perform poorly\nwith conventional statically scheduled approaches. Since dynamically scheduled\nhardware is inherently data flow based, it is beneficial to have an\nintermediate representation (IR) that captures the global data flow to enable\neasier transformations. State-of-the-art dynamic HLS utilize control flow based\nIRs, which model data flow only at the basic block level, requiring the\nrediscovery of inter-block parallelism. The Regionalized Value State Dependence\nGraph (RVSDG) is an IR that models (1) control flow as part of the global data\nflow utilizing regions and (2) memory dependencies using state edges.\n  We propose R-HLS, a new RVSDG dialect targeted for dynamic high-level\nsynthesis. R-HLS explicitly models control flow decisions, routing, and memory,\nwhich are only abstractly represented in the RVSDG. Expressing the control flow\nas part of the data flow reduces the need for complex optimizations to extract\nperformance and enables easy conversion to parallel circuits. Furthermore, we\npresent a distributed memory disambiguation optimization that leverages memory\nstate edges to decouple address generation from data accesses, resulting in\nresource efficient out-of-program-order execution of memory operations. Our\nresults show that R-HLS effectively exposes parallelism, resulting in fewer\nexecuted cycles and a 10% speedup on average, compared to the state-of-the-art\nin dynamic HLS with optimized memory disambiguation. These results are achieved\nwith a significant reduction in resource utilization, such as a 79% reduction\nin lookup-tables and 22% reduction in flip-flops, on average.\n","subjects":["Computing Research Repository/Hardware Architecture"],"license":"http://creativecommons.org/licenses/by/4.0/"}