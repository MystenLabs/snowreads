{"id":"2408.09078","title":"An Exploratory Study on Fine-Tuning Large Language Models for Secure\n  Code Generation","authors":"Junjie Li, Fazle Rabbi, Cheng Cheng, Aseem Sangalay, Yuan Tian, Jinqiu\n  Yang","authorsParsed":[["Li","Junjie",""],["Rabbi","Fazle",""],["Cheng","Cheng",""],["Sangalay","Aseem",""],["Tian","Yuan",""],["Yang","Jinqiu",""]],"versions":[{"version":"v1","created":"Sat, 17 Aug 2024 02:51:27 GMT"}],"updateDate":"2024-08-20","timestamp":1723863087000,"abstract":"  AI-powered coding assistants such as GitHub Copilot and OpenAI ChatGPT have\nachieved notable success in automating code generation. However, these tools\nrely on pre-trained Large Language Models (LLMs) that are typically trained on\nhuman-written code sourced from open-source project hosting sites like GitHub,\nwhich often contains inherent security vulnerabilities. These vulnerabilities\nmay then be mirrored in the code generated by these LLMs, a critical risk\nrevealed and highlighted by recent empirical studies. In this work, we present\nan exploratory study on whether fine-tuning pre-trained LLMs on datasets of\nvulnerability-fixing commits can promote secure code generation. We explored\ntwo parameter-efficient fine-tuning techniques (LoRa and IA3) on two\npre-trained LLMs for code generation. We crawled a fine-tuning dataset (14,622\nC and C++ files) for secure code generation by collecting code fixes of\nconfirmed vulnerabilities from open-source repositories. Our evaluation dataset\ncomprises 52 vulnerability scenarios designed to cover the top most dangerous C\nand C++ Common Weakness Enumerations (CWEs). Each scenario is a prompt that may\ninduce LLMs to generate vulnerable code. Our exploration reveals that\nfine-tuning LLMs can improve secure code generation by 6.4% in C language and\n5.4% in C++ language. We further experimented with fine-tuning LLMs using\ndifferent versions of the collected secure code dataset (block, function, and\nline). We found that fine-tuning with function-level and block-level datasets\nachieves the best secure code generation performance, compared to the\nalternatives (file-level and line-level).\n","subjects":["Computing Research Repository/Software Engineering"],"license":"http://creativecommons.org/licenses/by/4.0/"}