{"id":"2408.01791","title":"Implementing NAT Hole Punching with QUIC","authors":"Jinyu Liang, Wei Xu, Taotao Wang, Qing Yang, Shengli Zhang","authorsParsed":[["Liang","Jinyu",""],["Xu","Wei",""],["Wang","Taotao",""],["Yang","Qing",""],["Zhang","Shengli",""]],"versions":[{"version":"v1","created":"Sat, 3 Aug 2024 14:08:40 GMT"}],"updateDate":"2024-08-06","timestamp":1722694120000,"abstract":"  The widespread adoption of Network Address Translation (NAT) technology has\nled to a significant number of network end nodes being located in private\nnetworks behind NAT devices, impeding direct communication between these nodes.\nTo solve this problem, a technique known as \"hole punching\" has been devised\nfor NAT traversal to facilitate peer-to-peer communication among end nodes\nlocated in distinct private networks. However, as the increasing demands for\nspeed and security in networks, TCP-based hole punching schemes gradually show\nperformance drawbacks. Therefore, we present a QUIC-based hole punching scheme\nfor NAT traversal. Through a comparative analysis of the hole punching time\nbetween QUIC-based and TCP based protocols, we find that the QUIC-based scheme\neffectively reduces the hole punching time, exhibiting a pronounced advantage\nin weak network environments. Furthermore, in scenarios where the hole punched\nconnection is disrupted due to factors such as network transitions or NAT\ntimeouts, this paper evaluates two schemes for restoring the connection: QUIC\nconnection migration and re-punching. Our results show that QUIC connection\nmigration for connection restoration saves 2 RTTs compared to QUIC re-punching,\nand 3 RTTs compared to TCP re-punching, effectively reducing the computational\nresources consumption for re-punching.\n","subjects":["Computing Research Repository/Networking and Internet Architecture"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}