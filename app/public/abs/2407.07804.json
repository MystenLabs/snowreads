{"id":"2407.07804","title":"Call Graph Soundness in Android Static Analysis","authors":"Jordan Samhi, Ren\\'e Just, Tegawend\\'e F. Bissyand\\'e, Michael D.\n  Ernst, Jacques Klein","authorsParsed":[["Samhi","Jordan",""],["Just","René",""],["Bissyandé","Tegawendé F.",""],["Ernst","Michael D.",""],["Klein","Jacques",""]],"versions":[{"version":"v1","created":"Wed, 10 Jul 2024 16:23:52 GMT"}],"updateDate":"2024-07-11","timestamp":1720628632000,"abstract":"  Static analysis is sound in theory, but an implementation may unsoundly fail\nto analyze all of a program's code. Any such omission is a serious threat to\nthe validity of the tool's output. Our work is the first to measure the\nprevalence of these omissions. Previously, researchers and analysts did not\nknow what is missed by static analysis, what sort of code is missed, or the\nreasons behind these omissions. To address this gap, we ran 13 static analysis\ntools and a dynamic analysis on 1000 Android apps. Any method in the dynamic\nanalysis but not in a static analysis is an unsoundness.\n  Our findings include the following. (1) Apps built around external frameworks\nchallenge static analyzers. On average, the 13 static analysis tools failed to\ncapture 61% of the dynamically-executed methods. (2) A high level of precision\nin call graph construction is a synonym for a high level of unsoundness; (3) No\nexisting approach significantly improves static analysis soundness. This\nincludes those specifically tailored for a given mechanism, such as DroidRA to\naddress reflection. It also includes systematic approaches, such as EdgeMiner,\ncapturing all callbacks in the Android framework systematically. (4) Modeling\nentry point methods challenges call graph construction which jeopardizes\nsoundness.\n","subjects":["Computing Research Repository/Software Engineering"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}