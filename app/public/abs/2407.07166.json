{"id":"2407.07166","title":"UEFI Vulnerability Signature Generation using Static and Symbolic\n  Analysis","authors":"Md Shafiuzzaman, Achintya Desai, Laboni Sarker, Tevfik Bultan","authorsParsed":[["Shafiuzzaman","Md",""],["Desai","Achintya",""],["Sarker","Laboni",""],["Bultan","Tevfik",""]],"versions":[{"version":"v1","created":"Tue, 9 Jul 2024 18:08:49 GMT"},{"version":"v2","created":"Wed, 17 Jul 2024 15:57:47 GMT"}],"updateDate":"2024-07-18","timestamp":1720548529000,"abstract":"  Since its major release in 2006, the Unified Extensible Firmware Interface\n(UEFI) has become the industry standard for interfacing a computer's hardware\nand operating system, replacing BIOS. UEFI has higher privileged security\naccess to system resources than any other software component, including the\nsystem kernel. Hence, identifying and characterizing vulnerabilities in UEFI is\nextremely important for computer security. However, automated detection and\ncharacterization of UEFI vulnerabilities is a challenging problem. Static\nvulnerability analysis techniques are scalable but lack precision (reporting\nmany false positives), whereas symbolic analysis techniques are precise but are\nhampered by scalability issues due to path explosion and the cost of constraint\nsolving. In this paper, we introduce a technique called STatic Analysis guided\nSymbolic Execution (STASE), which integrates both analysis approaches to\nleverage their strengths and minimize their weaknesses. We begin with a\nrule-based static vulnerability analysis on LLVM bitcode to identify potential\nvulnerability targets for symbolic execution. We then focus symbolic execution\non each target to achieve precise vulnerability detection and signature\ngeneration. STASE relies on the manual specification of reusable vulnerability\nrules and attacker-controlled inputs. However, it automates the generation of\nharnesses that guide the symbolic execution process, addressing the usability\nand scalability of symbolic execution, which typically requires manual harness\ngeneration to reduce the state space. We implemented and applied STASE to the\nimplementations of UEFI code base. STASE detects and generates vulnerability\nsignatures for 5 out of 9 recently reported PixieFail vulnerabilities and 13\nnew vulnerabilities in Tianocore's EDKII codebase.\n","subjects":["Computing Research Repository/Cryptography and Security","Computing Research Repository/Software Engineering"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"WQKvlvDaJVDTaE-37Z5Pv-kbNWArsDKAxuD0WJzfGms","pdfSize":"698605"}
