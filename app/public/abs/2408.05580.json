{"id":"2408.05580","title":"Cryptographically Secure Pseudo-Random Number Generation (CS-PRNG)\n  Design using Robust Chaotic Tent Map (RCTM)","authors":"Muhammad Irfan, Muhammad Asif Khan","authorsParsed":[["Irfan","Muhammad",""],["Khan","Muhammad Asif",""]],"versions":[{"version":"v1","created":"Sat, 10 Aug 2024 15:16:00 GMT"}],"updateDate":"2024-08-13","timestamp":1723302960000,"abstract":"  Chaos, a nonlinear dynamical system, favors cryptography due to their\ninherent sensitive dependence on the initial condition, mixing, and ergodicity\nproperty. In recent years, the nonlinear behavior of chaotic maps has been\nutilized as a random source to generate pseudo-random number generation for\ncryptographic services. For chaotic maps having Robust chaos, dense, chaotic\norbits exist for the range of parameter space the occurrence of chaotic\nattractors in some neighborhoods of parameter space and the absence of periodic\nwindows. Thus, the robust chaotic map shows assertive chaotic behavior for\nlarger parameters space with a positive Lyapunov exponent. This paper presents\na novel method to generate cryptographically secure pseudo-random numbers\n(CSPRNG) using a robust chaotic tent map (RCTM). We proposed a new set of\nequations featuring modulo and scaling operators that achieve vast parameter\nspace by keeping chaotic orbit globally stable and robust. The dynamic behavior\nof the RCTM is studied first by plotting the bifurcation diagram that shows\nchaotic behavior for different parameters, which the positive Lyapunov exponent\nverifies. We iterated the RCTM to generate pseudo-random bits using a simple\nthresholding method. Various statistical tests are performed that ascertain the\nrandomness of generated secure pseudo-random bits. It includes NIST 800-22 test\nsuite, ENT statistical test suite, TestU01 test suite, key space analysis, key\nsensitivity analysis, correlation analysis, histogram analysis, and\ndifferential analysis. The proposed scheme has achieved larger key space as\ncompared with existing methods. The results show that the proposed PRBG\nalgorithm can generate CSPRNG.\n","subjects":["Computing Research Repository/Cryptography and Security"],"license":"http://creativecommons.org/licenses/by-nc-nd/4.0/"}