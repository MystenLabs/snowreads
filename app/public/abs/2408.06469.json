{"id":"2408.06469","title":"Design and architecture of the IBM Quantum Engine Compiler","authors":"Michael B. Healy, Reza Jokar, Soolu Thomas, Vincent R. Pascuzzi, Kit\n  Barton, Thomas A. Alexander, Roy Elkabetz, Brian C. Donovan, Hiroshi Horii,\n  Marius Hillenbrand","authorsParsed":[["Healy","Michael B.",""],["Jokar","Reza",""],["Thomas","Soolu",""],["Pascuzzi","Vincent R.",""],["Barton","Kit",""],["Alexander","Thomas A.",""],["Elkabetz","Roy",""],["Donovan","Brian C.",""],["Horii","Hiroshi",""],["Hillenbrand","Marius",""]],"versions":[{"version":"v1","created":"Mon, 12 Aug 2024 19:54:43 GMT"}],"updateDate":"2024-08-14","timestamp":1723492483000,"abstract":"  In this work, we describe the design and architecture of the open-source\nQuantum Engine Compiler (qe-compiler) currently used in production for IBM\nQuantum systems. The qe-compiler is built using LLVM's Multi-Level Intermediate\nRepresentation (MLIR) framework and includes definitions for several dialects\nto represent parameterized quantum computation at multiple levels of\nabstraction. The compiler also provides Python bindings and a diagnostic\nsystem. An open-source LALR lexer and parser built using Bison and Flex\ngenerates an Abstract Syntax Tree that is translated to a high-level MLIR\ndialect. An extensible hierarchical target system for modeling the\nheterogeneous nature of control systems at compilation time is included.\nTarget-based and generic compilation passes are added using a pipeline\ninterface to translate the input down to low-level intermediate representations\n(including LLVM IR) and can take advantage of LLVM backends and tooling to\ngenerate machine executable binaries. The qe-compiler is built to be\nextensible, maintainable, performant, and scalable to support the future of\nquantum computing.\n","subjects":["Physics/Quantum Physics","Computing Research Repository/Emerging Technologies"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}