{"id":"2407.00313","title":"FastMig: Leveraging FastFreeze to Establish Robust Service Liquidity in\n  Cloud 2.0","authors":"Sorawit Manatura, Thanawat Chanikaphon, Chantana Chantrapornchai,\n  Mohsen Amini Salehi","authorsParsed":[["Manatura","Sorawit",""],["Chanikaphon","Thanawat",""],["Chantrapornchai","Chantana",""],["Salehi","Mohsen Amini",""]],"versions":[{"version":"v1","created":"Sat, 29 Jun 2024 04:31:52 GMT"}],"updateDate":"2024-07-02","timestamp":1719635512000,"abstract":"  Service liquidity across edge-to-cloud or multi-cloud will serve as the\ncornerstone of the next generation of cloud computing systems (Cloud 2.0).\nProvided that cloud-based services are predominantly containerized, an\nefficient and robust live container migration solution is required to\naccomplish service liquidity. In a nod to this growing requirement, in this\nresearch, we leverage FastFreeze, a popular platform for process\ncheckpoint/restore within a container, and promote it to be a robust solution\nfor end-to-end live migration of containerized services. In particular, we\ndevelop a new platform, called FastMig that proactively controls the\ncheckpoint/restore operations of FastFreeze, thereby, allowing for robust live\nmigration of containerized services via standard HTTP interfaces. The proposed\nplatform introduces post-checkpointing and pre-restoration operations to\nenhance migration robustness. Notably, the pre-restoration operation includes\ncontainerized service startup options, enabling warm restoration and reducing\nthe migration downtime. In addition, we develop a method to make FastFreeze\nrobust against failures that commonly happen during the migration and even\nduring the normal operation of a containerized service. Experimental results\nunder real-world settings show that the migration downtime of a containerized\nservice can be reduced by 30X compared to the situation where the original\nFastFreeze was deployed for the migration. Moreover, we demonstrate that\nFastMig and warm restoration method together can significantly mitigate the\ncontainer startup overhead. Importantly, these improvements are achieved\nwithout any significant performance reduction and only incurs a small resource\nusage overhead, compared to the bare (\\ie non-FastFreeze) containerized\nservices.\n","subjects":["Computing Research Repository/Distributed, Parallel, and Cluster Computing","Computing Research Repository/Operating Systems"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}