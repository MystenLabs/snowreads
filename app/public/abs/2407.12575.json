{"id":"2407.12575","title":"Graphitron: A Domain Specific Language for FPGA-based Graph Processing\n  Accelerator Generation","authors":"Xinmiao Zhang, Zheng Feng, Shengwen Liang, Xinyu Chen, Cheng Liu,\n  Huawei Li, Xiaowei Li","authorsParsed":[["Zhang","Xinmiao",""],["Feng","Zheng",""],["Liang","Shengwen",""],["Chen","Xinyu",""],["Liu","Cheng",""],["Li","Huawei",""],["Li","Xiaowei",""]],"versions":[{"version":"v1","created":"Wed, 17 Jul 2024 14:00:38 GMT"}],"updateDate":"2024-07-18","timestamp":1721224838000,"abstract":"  FPGA-based graph processing accelerators, enabling extensive customization,\nhave demonstrated significant energy efficiency over general computing engines\nlike CPUs and GPUs. Nonetheless, customizing accelerators to diverse graph\nprocessing algorithms with distinct computational patterns remains challenging\nand error-prone for high-level application users. To this end, template-based\napproaches have been developed to automate the graph processing accelerator\ngeneration. Although these frameworks significantly enhance the design\nproductivity, the templates often result in closely coupled algorithms,\nprogramming models, and architectures, severely limiting the versatility of the\ntargeted graph processing algorithms and their applicability to high-level\nusers. Furthermore, the limitations of the frameworks are usually ambiguous due\nto the absence of a rigorous grammar definition. To overcome these challenges,\nwe introduce Graphitron, a domain-specific language (DSL), which allows users\nto generate customized accelerators for a wide range of graph processing\nalgorithms on FPGAs without engaging with the complexities of low-level FPGA\ndesigns. Graphitron, by defining vertices and edges as primitive data types,\nnaturally facilitates the description of graph algorithms using edge-centric or\nvertex-centric programming models. The Graphitron back-end employs a suite of\nhardware optimization techniques including pipelining, data shuffling, and\nmemory access optimization that are independent with the specific algorithms,\nsupporting the creation of versatile graph processing accelerators. Our\nexperiments indicate that accelerators crafted using Graphitron achieve\ncomparable performance to that generated with template-based design framework.\nMoreover, it exhibits exceptional flexibility in algorithm expression and\nsignificantly enhance accelerator design productivity.\n","subjects":["Computing Research Repository/Hardware Architecture"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"e3CdTx8AyXJ9LAvV8yOqqGmgCOubYYYM6e52l3d2m2Q","pdfSize":"517703"}
