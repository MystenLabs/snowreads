{"id":"2408.02614","title":"Comparison of Code Quality and Best Practices in IoT and non-IoT\n  Software","authors":"Nour Khezemi, Sikandar Ejaza, Naouel Moha, Yann-Ga\\\"el Gu\\'eh\\'eneuc","authorsParsed":[["Khezemi","Nour",""],["Ejaza","Sikandar",""],["Moha","Naouel",""],["Guéhéneuc","Yann-Gaël",""]],"versions":[{"version":"v1","created":"Mon, 5 Aug 2024 16:39:04 GMT"}],"updateDate":"2024-08-06","timestamp":1722875944000,"abstract":"  Context: IoT systems, networks of connected devices powered by software,\nrequire studying software quality for maintenance. Despite extensive studies on\nnon-IoT software quality, research on IoT software quality is lacking. It is\nuncertain if IoT and non-IoT systems software are comparable, hindering the\nconfident application of results and best practices gained on non-IoT systems.\n  Objective: Therefore, we compare the code quality of two equivalent sets of\nIoT and non-IoT systems to determine whether there are similarities and\ndifferences. We also collect and revisit software-engineering best practices in\nnon-IoT contexts to apply them to IoT.\n  Method: We design and apply a systematic method to select two sets of 94\nnon-IoT and IoT systems software from GitHub with comparable characteristics.\nWe compute quality metrics on the systems in these two sets and then analyse\nand compare the metric values. We analyse in depth and provide specific\nexamples of IoT system's complexity and how it manifests in the codebases.\nAfter the comparison, We systematically select and present a list of best\npractices to address the observed difference between IoT and non-IoT code.\n  Results: Through a comparison of metrics, we conclude that software for IoT\nsystems is more complex, coupled, larger, less maintainable, and cohesive than\nnon-IoT systems. Several factors, such as integrating multiple hardware and\nsoftware components and managing data communication between them, contribute to\nthese differences. Considering these differences, we present a revisited best\npractices list with approaches, tools, or techniques for developing IoT\nsystems. As example, applying modularity, and refactoring are best practices\nfor lowering the complexity.\n  Conclusion: Based on our work, researchers can now make an informed decision\nusing existing studies on the quality of non-IoT systems for IoT systems.\n","subjects":["Computing Research Repository/Software Engineering"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"da-ttMXzpQWmENwvIkV52XBpGHROj6nQIPm8MqKXo8o","pdfSize":"347546"}
