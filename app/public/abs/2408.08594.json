{"id":"2408.08594","title":"DeepREST: Automated Test Case Generation for REST APIs Exploiting Deep\n  Reinforcement Learning","authors":"Davide Corradini, Zeno Montolli, Michele Pasqua, Mariano Ceccato","authorsParsed":[["Corradini","Davide",""],["Montolli","Zeno",""],["Pasqua","Michele",""],["Ceccato","Mariano",""]],"versions":[{"version":"v1","created":"Fri, 16 Aug 2024 08:03:55 GMT"}],"updateDate":"2024-08-19","timestamp":1723795435000,"abstract":"  Automatically crafting test scenarios for REST APIs helps deliver more\nreliable and trustworthy web-oriented systems. However, current black-box\ntesting approaches rely heavily on the information available in the API's\nformal documentation, i.e., the OpenAPI Specification (OAS for short). While\nuseful, the OAS mostly covers syntactic aspects of the API (e.g.,\nproducer-consumer relations between operations, input value properties, and\nadditional constraints in natural language), and it lacks a deeper\nunderstanding of the API business logic. Missing semantics include implicit\nordering (logic dependency) between operations and implicit input-value\nconstraints. These limitations hinder the ability of black-box testing tools to\ngenerate truly effective test cases automatically. This paper introduces\nDeepREST, a novel black-box approach for automatically testing REST APIs. It\nleverages deep reinforcement learning to uncover implicit API constraints, that\nis, constraints hidden from API documentation. Curiosity-driven learning guides\nan agent in the exploration of the API and learns an effective order to test\nits operations. This helps identify which operations to test first to take the\nAPI in a testable state and avoid failing API interactions later. At the same\ntime, experience gained on successful API interactions is leveraged to drive\naccurate input data generation (i.e., what parameters to use and how to pick\ntheir values). Additionally, DeepREST alternates exploration with exploitation\nby mutating successful API interactions to improve test coverage and collect\nfurther experience. Our empirical validation suggests that the proposed\napproach is very effective in achieving high test coverage and fault detection\nand superior to a state-of-the-art baseline.\n","subjects":["Computing Research Repository/Software Engineering"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"9PJPOy2wzOzauf9jMriiVV2dD3o6yW1MNp9yCXI5u6k","pdfSize":"747192"}
