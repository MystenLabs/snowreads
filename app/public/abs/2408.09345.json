{"id":"2408.09345","title":"Deep Code Search with Naming-Agnostic Contrastive Multi-View Learning","authors":"Jiadong Feng, Wei Li, Zhao Wei, Yong Xu, Juhong Wang, Hui Li","authorsParsed":[["Feng","Jiadong",""],["Li","Wei",""],["Wei","Zhao",""],["Xu","Yong",""],["Wang","Juhong",""],["Li","Hui",""]],"versions":[{"version":"v1","created":"Sun, 18 Aug 2024 03:47:34 GMT"}],"updateDate":"2024-08-20","timestamp":1723952854000,"abstract":"  Software development is a repetitive task, as developers usually reuse or get\ninspiration from existing implementations. Code search, which refers to the\nretrieval of relevant code snippets from a codebase according to the\ndeveloper's intent that has been expressed as a query, has become increasingly\nimportant in the software development process. Due to the success of deep\nlearning in various applications, a great number of deep learning based code\nsearch approaches have sprung up and achieved promising results. However,\ndevelopers may not follow the same naming conventions and the same variable may\nhave different variable names in different implementations, bringing a\nchallenge to deep learning based code search methods that rely on explicit\nvariable correspondences to understand source code. To overcome this challenge,\nwe propose a naming-agnostic code search method (NACS) based on contrastive\nmulti-view code representation learning. NACS strips information bound to\nvariable names from Abstract Syntax Tree (AST), the representation of the\nabstract syntactic structure of source code, and focuses on capturing intrinsic\nproperties solely from AST structures. We use semantic-level and syntax-level\naugmentation techniques to prepare realistically rational data and adopt\ncontrastive learning to design a graph-view modeling component in NACS to\nenhance the understanding of code snippets. We further model ASTs in a path\nview to strengthen the graph-view modeling component through multi-view\nlearning. Extensive experiments show that NACS provides superior code search\nperformance compared to baselines and NACS can be adapted to help existing code\nsearch methods overcome the impact of different naming conventions.\n","subjects":["Computing Research Repository/Information Retrieval","Computing Research Repository/Software Engineering"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}