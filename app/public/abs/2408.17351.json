{"id":"2408.17351","title":"Wave: A Split OS Architecture for Application Engines","authors":"Jack Tigar Humphries, Neel Natu, Kostis Kaffes, Stanko Novakovi\\'c,\n  Paul Turner, Hank Levy, David Culler, Christos Kozyrakis","authorsParsed":[["Humphries","Jack Tigar",""],["Natu","Neel",""],["Kaffes","Kostis",""],["NovakoviÄ‡","Stanko",""],["Turner","Paul",""],["Levy","Hank",""],["Culler","David",""],["Kozyrakis","Christos",""]],"versions":[{"version":"v1","created":"Fri, 30 Aug 2024 15:30:00 GMT"}],"updateDate":"2024-09-02","timestamp":1725031800000,"abstract":"  The end of Moore's Law and the tightening performance requirements in today's\nclouds make re-architecting the software stack a necessity. To address this,\ncloud providers and vendors offload the virtualization control plane and data\nplane, along with the host OS data plane, to IPUs (SmartNICs), recovering\nscarce host resources that are then used by applications. However, the host OS\ncontrol plane--encompassing kernel thread scheduling, memory management, the\nnetwork stack, file systems, and more--is left on the host CPU and degrades\nworkload performance.\n  This paper presents Wave, a split OS architecture that moves OS subsystem\npolicies to the IPU while keeping OS mechanisms on the host CPU. Wave not only\nfrees host CPU resources, but it reduces host workload interference and\nleverages network insights on the IPU to improve policy decisions. Wave makes\nOS control plane offloading practical despite high host-IPU communication\nlatency, lack of a coherent interconnect, and operation across two system\nimages. We present Wave's design and implementation, and implement several OS\nsubsystems in Wave, including kernel thread scheduling, the control plane for a\nnetwork stack, and memory management. We then evaluate the Wave subsystems on\nStubby (scheduling and network), our GCE VM service (scheduling), and RocksDB\n(memory management and scheduling). We demonstrate that Wave subsystems are\ncompetitive with and often superior to on-host subsystems, saving 8 host CPUs\nfor Stubby, 16 host CPUs for database memory management, and improving VM\nperformance by up to 11.2%.\n","subjects":["Computing Research Repository/Operating Systems"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"cMTgDLOGTReZZSuWqyEJxRqOB9iKwy9ACx02FwMM2Ec","pdfSize":"572672"}
