{"id":"2408.15822","title":"Automating Pruning in Top-Down Enumeration for Program Synthesis\n  Problems with Monotonic Semantics","authors":"Keith J. C. Johnson, Rahul Krishnan, Thomas Reps, Loris D'Antoni","authorsParsed":[["Johnson","Keith J. C.",""],["Krishnan","Rahul",""],["Reps","Thomas",""],["D'Antoni","Loris",""]],"versions":[{"version":"v1","created":"Wed, 28 Aug 2024 14:34:34 GMT"}],"updateDate":"2024-08-29","timestamp":1724855674000,"abstract":"  In top-down enumeration for program synthesis, abstraction-based pruning uses\nan abstract domain to approximate the set of possible values that a partial\nprogram, when completed, can output on a given input. If the set does not\ncontain the desired output, the partial program and all its possible\ncompletions can be pruned. In its general form, abstraction-based pruning\nrequires manually designed, domain-specific abstract domains and semantics, and\nthus has only been used in domain-specific synthesizers.\n  This paper provides sufficient conditions under which a form of\nabstraction-based pruning can be automated for arbitrary synthesis problems in\nthe general-purpose Semantics-Guided Synthesis (SemGuS) framework without\nrequiring manually-defined abstract domains. We show that if the semantics of\nthe language for which we are synthesizing programs exhibits some monotonicity\nproperties, one can obtain an abstract interval-based semantics for free from\nthe concrete semantics of the programming language, and use such semantics to\neffectively prune the search space. We also identify a condition that ensures\nsuch abstract semantics can be used to compute a precise abstraction of the set\nof values that a program derivable from a given hole in a partial program can\nproduce. These precise abstractions make abstraction-based pruning more\neffective.\n  We implement our approach in a tool, Moito, which can tackle synthesis\nproblems defined in the SemGuS framework. Moito can automate interval-based\npruning without any a-priori knowledge of the problem domain, and solve\nsynthesis problems that previously required domain-specific, abstraction-based\nsynthesizers -- e.g., synthesis of regular expressions, CSV file schema, and\nimperative programs from examples.\n","subjects":["Computing Research Repository/Programming Languages"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"CJzHVRCRrDID7XfOs2PcwSJd0Iuc3NBqLn9_J4lGsbE","pdfSize":"939431"}
