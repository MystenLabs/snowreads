{"id":"2407.02468","title":"Improved Space-Efficient Approximate Nearest Neighbor Search Using\n  Function Inversion","authors":"Samuel McCauley","authorsParsed":[["McCauley","Samuel",""]],"versions":[{"version":"v1","created":"Tue, 2 Jul 2024 17:47:57 GMT"}],"updateDate":"2024-07-03","timestamp":1719942477000,"abstract":"  Approximate nearest neighbor search (ANN) data structures have widespread\napplications in machine learning, computational biology, and text processing.\nThe goal of ANN is to preprocess a set S so that, given a query q, we can find\na point y whose distance from q approximates the smallest distance from q to\nany point in S. For most distance functions, the best-known ANN bounds for\nhigh-dimensional point sets are obtained using techniques based on\nlocality-sensitive hashing (LSH).\n  Unfortunately, space efficiency is a major challenge for LSH-based data\nstructures. Classic LSH techniques require a very large amount of space,\noftentimes polynomial in |S|. A long line of work has developed intricate\ntechniques to reduce this space usage, but these techniques suffer from\ndownsides: they must be hand tailored to each specific LSH, are often\ncomplicated, and their space reduction comes at the cost of significantly\nincreased query times.\n  In this paper we explore a new way to improve the space efficiency of LSH\nusing function inversion techniques, originally developed in (Fiat and Naor\n2000).\n  We begin by describing how function inversion can be used to improve LSH data\nstructures. This gives a fairly simple, black box method to reduce LSH space\nusage.\n  Then, we give a data structure that leverages function inversion to improve\nthe query time of the best known near-linear space data structure for\napproximate nearest neighbor search under Euclidean distance: the ALRW data\nstructure of (Andoni, Laarhoven, Razenshteyn, and Waingarten 2017). ALRW was\npreviously shown to be optimal among \"list-of-points\" data structures for both\nEuclidean and Manhattan ANN; thus, in addition to giving improved bounds, our\nresults imply that list-of-points data structures are not optimal for Euclidean\nor Manhattan ANN.\n","subjects":["Computing Research Repository/Data Structures and Algorithms"],"license":"http://creativecommons.org/licenses/by/4.0/"}