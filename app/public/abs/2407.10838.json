{"id":"2407.10838","title":"Compositional Symbolic Execution for Correctness and Incorrectness\n  Reasoning (Extended Version)","authors":"Andreas L\\\"o\\\"ow, Daniele Nantes-Sobrinho, Sacha-\\'Elie Ayoun,\n  Caroline Cronj\\\"ager, Petar Maksimovi\\'c and Philippa Gardner","authorsParsed":[["Lööw","Andreas",""],["Nantes-Sobrinho","Daniele",""],["Ayoun","Sacha-Élie",""],["Cronjäger","Caroline",""],["Maksimović","Petar",""],["Gardner","Philippa",""]],"versions":[{"version":"v1","created":"Mon, 15 Jul 2024 15:50:33 GMT"},{"version":"v2","created":"Thu, 19 Sep 2024 09:03:40 GMT"}],"updateDate":"2024-09-20","timestamp":1721058633000,"abstract":"  The introduction of separation logic has led to the development of symbolic\nexecution techniques and tools that are (functionally) compositional with\nfunction specifications that can be used in broader calling contexts. Many of\nthe compositional symbolic execution tools developed in academia and industry\nhave been grounded on a formal foundation, but either the function\nspecifications are not validated with respect to the underlying separation\nlogic of the theory, or there is a large gulf between the theory and the\nimplementation of the tool.\n  We introduce a formal compositional symbolic execution engine which creates\nand uses function specifications from an underlying separation logic and\nprovides a sound theoretical foundation for, and indeed was partially inspired\nby, the Gillian symbolic execution platform. This is achieved by providing an\naxiomatic interface which describes the properties of the consume and produce\noperations used in the engine to update compositionally the symbolic state, for\nexample when calling function specifications. This consume-produce technique is\nused by VeriFast, Viper, and Gillian, but has not been previously characterised\nindependently of the tool. As part of our result, we give consume and produce\noperations inspired by the Gillian implementation that satisfy the properties\ndescribed by our axiomatic interface. A surprising property is that our engine\nsemantics provides a common foundation for both correctness and incorrectness\nreasoning, with the difference in the underlying engine only amounting to the\nchoice to use satisfiability or validity. We use this property to extend the\nGillian platform, which previously only supported correctness reasoning, with\nincorrectness reasoning and automatic true bug-finding using incorrectness\nbi-abduction.\n","subjects":["Computing Research Repository/Programming Languages","Computing Research Repository/Logic in Computer Science"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"uzRCUvbRqpJJIqZLCgj8EynTLVSRsTTbXNOAXG_Wvis","pdfSize":"1495359"}
