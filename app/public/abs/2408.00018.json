{"id":"2408.00018","title":"An efficient implementation of parallel simulated annealing algorithm in\n  GPUs","authors":"A.M. Ferreiro, J.A. Garc\\'ia, J.G. L\\'opez-Salas, and C. V\\'azquez","authorsParsed":[["Ferreiro","A. M.",""],["García","J. A.",""],["López-Salas","J. G.",""],["Vázquez","C.",""]],"versions":[{"version":"v1","created":"Tue, 30 Jul 2024 09:58:54 GMT"}],"updateDate":"2024-08-02","timestamp":1722333534000,"abstract":"  In this work we propose a highly optimized version of a simulated annealing\n(SA) algorithm adapted to the more recently developed Graphic Processor Units\n(GPUs). The programming has been carried out with CUDA toolkit, specially\ndesigned for Nvidia GPUs. For this purpose, efficient versions of SA have been\nfirst analyzed and adapted to GPUs. Thus, an appropriate sequential SA\nalgorithm has been developed as a starting point. Next, a straightforward\nasynchronous parallel version has been implemented and then a specific and more\nefficient synchronous version has been developed. A wide appropriate benchmark\nto illustrate the performance properties of the implementation has been\nconsidered. Among all tests, a classical sample problem provided by the\nminimization of the normalized Schwefel function has been selected to compare\nthe behavior of the sequential, asynchronous, and synchronous versions, the\nlast one being more advantageous in terms of balance between convergence,\naccuracy, and computational cost. Also, the implementation of a hybrid method\ncombining SA with a local minimizer method has been developed. Note that the\ngeneric feature of the SA algorithm allows its application in a wide set of\nreal problems arising in a large variety of fields, such as biology, physics,\nengineering, finance, and industrial processes.\n","subjects":["Computing Research Repository/Distributed, Parallel, and Cluster Computing","Mathematics/Optimization and Control"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}