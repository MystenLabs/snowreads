{"id":"2407.15745","title":"Comparing Algorithms for Loading Classical Datasets into Quantum Memory","authors":"Andriy Miranskyy and Mushahid Khan and Udson Mendes","authorsParsed":[["Miranskyy","Andriy",""],["Khan","Mushahid",""],["Mendes","Udson",""]],"versions":[{"version":"v1","created":"Mon, 22 Jul 2024 15:43:18 GMT"}],"updateDate":"2024-08-16","timestamp":1721662998000,"abstract":"  Quantum computers are gaining importance in various applications like quantum\nmachine learning and quantum signal processing. These applications face\nsignificant challenges in loading classical datasets into quantum memory. With\nnumerous algorithms available and multiple quality attributes to consider,\ncomparing data loading methods is complex.\n  Our objective is to compare (in a structured manner) various algorithms for\nloading classical datasets into quantum memory (by converting statevectors to\ncircuits).\n  We evaluate state preparation algorithms based on five key attributes:\ncircuit depth, qubit count, classical runtime, statevector representation\n(dense or sparse), and circuit alterability. We use the Pareto set as a\nmulti-objective optimization tool to identify algorithms with the best\ncombination of properties. To improve comprehension and speed up comparisons,\nwe also visually compare three metrics (namely, circuit depth, qubit count, and\nclassical runtime).\n  We compare seven algorithms for dense statevector conversion and six for\nsparse statevector conversion. Our analysis reduces the initial set of\nalgorithms to two dense and two sparse groups, highlighting inherent\ntrade-offs.\n  This comparison methodology offers a structured approach for selecting\nalgorithms based on specific needs. Researchers and practitioners can use it to\nhelp select data-loading algorithms for various quantum computing tasks.\n","subjects":["Physics/Quantum Physics","Computing Research Repository/Data Structures and Algorithms","Computing Research Repository/Emerging Technologies","Computing Research Repository/Software Engineering"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}