{"id":"2408.14175","title":"MetaFFI -- Multilingual Indirect Interoperability System","authors":"Tsvi Cherny-Shahar, Amiram Yehudai","authorsParsed":[["Cherny-Shahar","Tsvi",""],["Yehudai","Amiram",""]],"versions":[{"version":"v1","created":"Mon, 26 Aug 2024 10:41:24 GMT"}],"updateDate":"2024-08-27","timestamp":1724668884000,"abstract":"  The development of software applications using multiple programming languages\nhas increased in recent years, as it allows the selection of the most suitable\nlanguage and runtime for each component of the system and the integration of\nthird-party libraries. However, this practice involves complexity and error\nproneness, due to the absence of an adequate system for the interoperability of\nmultiple programming languages. Developers are compelled to resort to\nworkarounds, such as library reimplementation or language-specific wrappers,\nwhich are often dependent on C as the common denominator for interoperability.\nThese challenges render the use of multiple programming languages a burdensome\nand demanding task that necessitates highly skilled developers for\nimplementation, debugging, and maintenance, and raise doubts about the benefits\nof interoperability. To overcome these challenges, we propose MetaFFI, a\npluggable in-process indirect-interoperability system that allows the loading\nand utilization of entities from multiple programming languages. This is\nachieved by exploiting the less restrictive shallow binding mechanisms (e.g.,\nForeign Function Interface) to offer deep binding features (e.g., object\ncreation, methods, fields). MetaFFI provides a runtime-independent framework to\nload and \\emph{xcall} (Cross-Call) foreign entities (e.g., functions, objects).\nMetaFFI uses Common Data Types (CDTs) to pass parameters and return values,\nincluding objects and complex types, and even cross-language callbacks. The\nindirect interoperability approach of MetaFFI has the significant advantage of\nrequiring only $2n$ mechanisms to support $n$ languages, as opposed to the\ndirect interoperability approaches that need $n^2$ mechanisms. We have\nsuccessfully tested the binding between Go, Python3.11, and Java in a\nproof-of-concept on Windows and Ubuntu.\n","subjects":["Computing Research Repository/Programming Languages"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"rpYCQUmXbcAF7uW52gbFOzX3L0Oy2PQZViXTq7tRfWg","pdfSize":"1059032"}
