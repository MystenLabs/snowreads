{"id":"2408.11375","title":"Bootstrapping Dynamic APSP via Sparsification","authors":"Rasmus Kyng, Simon Meierhans, Gernot Z\\\"ocklein","authorsParsed":[["Kyng","Rasmus",""],["Meierhans","Simon",""],["ZÃ¶cklein","Gernot",""]],"versions":[{"version":"v1","created":"Wed, 21 Aug 2024 06:52:34 GMT"}],"updateDate":"2024-08-22","timestamp":1724223154000,"abstract":"  We give a simple algorithm for the dynamic approximate All-Pairs Shortest\nPaths (APSP) problem. Given a graph $G = (V, E, l)$ with polynomially bounded\nedge lengths, our data structure processes $|E|$ edge insertions and deletions\nin total time $|E|^{1 + o(1)}$ and provides query access to\n$|E|^{o(1)}$-approximate distances in time $\\tilde{O}(1)$ per query.\n  We produce a data structure that mimics Thorup-Zwick distance oracles\n[TZ'05], but is dynamic and deterministic. Our algorithm selects a small number\nof pivot vertices. Then, for every other vertex, it reduces distance\ncomputation to maintaining distances to a small neighborhood around that vertex\nand to the nearest pivot. We maintain distances between pivots efficiently by\nrepresenting them in a smaller graph and recursing. We construct these smaller\ngraphs by (a) reducing vertex count using the dynamic distance-preserving core\ngraphs of Kyng-Meierhans-Probst Gutenberg [KMPG'24] in a black-box manner and\n(b) reducing edge-count using a dynamic spanner akin to\nChen-Kyng-Liu-Meierhans-Probst Gutenberg [CKL+'24]. Our dynamic spanner\ninternally uses an APSP data structure. Choosing a large enough size reduction\nfactor in the first step allows us to simultaneously bootstrap our spanner and\na dynamic APSP data structure.\n  Notably, our approach does not need expander graphs, an otherwise ubiquitous\ntool in derandomization.\n","subjects":["Computing Research Repository/Data Structures and Algorithms"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}