{"id":"2408.16137","title":"Trustless Distributed Symmetric-key Encryption","authors":"Florian Le Mou\\\"el, Maxime Godon, Renaud Brien, Erwan Beurier, Nora\n  Boulahia-Cuppens and Fr\\'ed\\'eric Cuppens","authorsParsed":[["Mouël","Florian Le",""],["Godon","Maxime",""],["Brien","Renaud",""],["Beurier","Erwan",""],["Boulahia-Cuppens","Nora",""],["Cuppens","Frédéric",""]],"versions":[{"version":"v1","created":"Wed, 28 Aug 2024 20:56:30 GMT"}],"updateDate":"2024-08-30","timestamp":1724878590000,"abstract":"  Threshold cryptography has gained momentum in the last decades as a mechanism\nto protect long term secret keys. Rather than having a single secret key, this\nallows to distribute the ability to perform a cryptographic operation such as\nsigning or encrypting. Threshold cryptographic operations are shared among\ndifferent parties such that a threshold number of them must participate in\norder to run the operation. This makes the job of an attacker strictly more\ndifficult in the sense that they would have to corrupt at least a threshold\nnumber of parties to breach the security. Most works in this field focus on\nasymmetric-key schemes that allow threshold signing or decrypting.\n  We focus on the symmetric-key setting, allowing both threshold encryption and\nthreshold decryption. Previous work relies on the presence of a trusted third\nparty. Such a party may not exist in some use cases, and it represents a single\npoint of failure. We propose to remove the requirement of a trusted third party\nby designing a dealer-free setup in which no entity can at any point obtain\nfull knowledge of the secret keys.\n  We implement a proof of concept of our construction in Python. We evaluate\nthe proof of concept with timing metrics to compare to theoretical expectations\nand assess the cost in complexity of not relying on a trusted third party.\nWhile the setup phase suffers moderate additional cost, the encryption and\ndecryption phases perform the same as the original algorithm.\n","subjects":["Computing Research Repository/Cryptography and Security"],"license":"http://creativecommons.org/licenses/by-nc-sa/4.0/"}