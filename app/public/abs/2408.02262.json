{"id":"2408.02262","title":"Towards Identifying Code Proficiency through the Analysis of Python\n  Textbooks","authors":"Ruksit Rojpaisarnkit, Gregorio Robles, Raula Gaikovina Kula, Dong\n  Wang, Chaiyong Ragkhitwetsagul, Jesus M. Gonzalez-Barahona, Kenichi Matsumoto","authorsParsed":[["Rojpaisarnkit","Ruksit",""],["Robles","Gregorio",""],["Kula","Raula Gaikovina",""],["Wang","Dong",""],["Ragkhitwetsagul","Chaiyong",""],["Gonzalez-Barahona","Jesus M.",""],["Matsumoto","Kenichi",""]],"versions":[{"version":"v1","created":"Mon, 5 Aug 2024 06:37:10 GMT"}],"updateDate":"2024-08-06","timestamp":1722839830000,"abstract":"  Python, one of the most prevalent programming languages today, is widely\nutilized in various domains, including web development, data science, machine\nlearning, and DevOps. Recent scholarly efforts have proposed a methodology to\nassess Python competence levels, similar to how proficiency in natural\nlanguages is evaluated. This method involves assigning levels of competence to\nPython constructs, for instance, placing simple 'print' statements at the most\nbasic level and abstract base classes at the most advanced. The aim is to gauge\nthe level of proficiency a developer must have to understand a piece of source\ncode. This is particularly crucial for software maintenance and evolution\ntasks, such as debugging or adding new features. For example, in a code review\nprocess, this method could determine the competence level required for\nreviewers. However, categorizing Python constructs by proficiency levels poses\nsignificant challenges. Prior attempts, which relied heavily on expert opinions\nand developer surveys, have led to considerable discrepancies. In response,\nthis paper presents a new approach to identifying Python competency levels\nthrough the systematic analysis of introductory Python programming textbooks.\nBy comparing the sequence in which Python constructs are introduced in these\ntextbooks with the current state of the art, we have uncovered notable\ndiscrepancies in the order of introduction of Python constructs. Our study\nunderscores a misalignment in the sequences, demonstrating that pinpointing\nproficiency levels is not trivial. Insights from the study serve as pivotal\nsteps toward reinforcing the idea that textbooks serve as a valuable source for\nevaluating developers' proficiency, and particularly in terms of their ability\nto undertake maintenance and evolution tasks.\n","subjects":["Computing Research Repository/Software Engineering"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"1t9_aDi9LymIxkPcrUjzB5yTpR9baSmjf4TVpePpeL4","pdfSize":"372213","txDigest":"2LE7XRUsYH5Np5VTvPvKkqc8b5VWyUpTnjtQWLv461hY","endEpoch":"1","status":"CERTIFIED"}
