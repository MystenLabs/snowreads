{"id":"2407.17814","title":"All-Pairs Suffix-Prefix on Dynamic Set of Strings","authors":"Masaru Kikuchi and Shunsuke Inenaga","authorsParsed":[["Kikuchi","Masaru",""],["Inenaga","Shunsuke",""]],"versions":[{"version":"v1","created":"Thu, 25 Jul 2024 07:04:33 GMT"}],"updateDate":"2024-07-26","timestamp":1721891073000,"abstract":"  The all-pairs suffix-prefix (APSP) problem is a classical problem in string\nprocessing which has important applications in bioinformatics. Given a set\n$\\mathcal{S} = \\{S_1, \\ldots, S_k\\}$ of $k$ strings, the APSP problem asks one\nto compute the longest suffix of $S_i$ that is a prefix of $S_j$ for all $k^2$\nordered pairs $\\langle S_i, S_j \\rangle$ of strings in $\\mathcal{S}$. In this\npaper, we consider the dynamic version of the APSP problem that allows for\ninsertions of new strings to the set of strings. Our objective is, each time a\nnew string $S_i$ arrives to the current set $\\mathcal{S}_{i-1} = \\{S_1, \\ldots,\nS_{i-1}\\}$ of $i-1$ strings, to compute (1) the longest suffix of $S_i$ that is\na prefix of $S_j$ and (2) the longest prefix of $S_i$ that is a suffix of $S_j$\nfor all $1 \\leq j \\leq i$. We propose an $O(n)$-space data structure which\ncomputes (1) and (2) in $O(|S_i| \\log \\sigma + i)$ time for each new given\nstring $S_i$, where $n$ is the total length of the strings.\n","subjects":["Computing Research Repository/Data Structures and Algorithms"],"license":"http://creativecommons.org/licenses/by/4.0/"}