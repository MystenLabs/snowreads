{"id":"2408.02218","title":"Enabling Practical Transparent Checkpointing for MPI: A Topological Sort\n  Approach","authors":"Yao Xu and Gene Cooperman","authorsParsed":[["Xu","Yao",""],["Cooperman","Gene",""]],"versions":[{"version":"v1","created":"Mon, 5 Aug 2024 03:42:51 GMT"}],"updateDate":"2024-08-06","timestamp":1722829371000,"abstract":"  MPI is the de facto standard for parallel computing on a cluster of\ncomputers. Checkpointing is an important component in any strategy for software\nresilience and for long-running jobs that must be executed by chaining together\ntime-bounded resource allocations. This work solves an old problem: a practical\nand general algorithm for transparent checkpointing of MPI that is both\nefficient and compatible with most of the latest network software. Transparent\ncheckpointing is attractive due to its generality and ease of use for most MPI\napplication developers. Earlier efforts at transparent checkpointing for MPI,\none decade ago, had two difficult problems: (i) by relying on a specific MPI\nimplementation tied to a specific network technology; and (ii) by failing to\ndemonstrate sufficiently low runtime overhead.\n  Problem (i) (network dependence) was already solved in 2019 by MANA's\nintroduction of split processes. Problem (ii) (efficient runtime overhead) is\nsolved in this work. This paper introduces an approach that avoids these\nlimitations, employing a novel topological sort to algorithmically determine a\nsafe future synchronization point. The algorithm is valid for both blocking and\nnon-blocking collective communication in MPI. We demonstrate the efficacy and\nscalability of our approach through both micro-benchmarks and a set of five\nreal-world MPI applications, notably including the widely used VASP (Vienna Ab\nInitio Simulation Package), which is responsible for 11% of the workload on the\nPerlmutter supercomputer at Lawrence Berkley National Laboratory. VASP was\npreviously cited as a special challenge for checkpointing, in part due to its\nmulti-algorithm codes.\n","subjects":["Computing Research Repository/Distributed, Parallel, and Cluster Computing"],"license":"http://creativecommons.org/licenses/by-sa/4.0/"}