{"id":"2408.07321","title":"LLM-Enhanced Static Analysis for Precise Identification of Vulnerable\n  OSS Versions","authors":"Yiran Cheng, Lwin Khin Shar, Ting Zhang, Shouguo Yang, Chaopeng Dong,\n  David Lo, Shichao Lv, Zhiqiang Shi and Limin Sun","authorsParsed":[["Cheng","Yiran",""],["Shar","Lwin Khin",""],["Zhang","Ting",""],["Yang","Shouguo",""],["Dong","Chaopeng",""],["Lo","David",""],["Lv","Shichao",""],["Shi","Zhiqiang",""],["Sun","Limin",""]],"versions":[{"version":"v1","created":"Wed, 14 Aug 2024 06:43:06 GMT"}],"updateDate":"2024-08-15","timestamp":1723617786000,"abstract":"  Open-source software (OSS) has experienced a surge in popularity, attributed\nto its collaborative development model and cost-effective nature. However, the\nadoption of specific software versions in development projects may introduce\nsecurity risks when these versions bring along vulnerabilities. Current methods\nof identifying vulnerable versions typically analyze and trace the code\ninvolved in vulnerability patches using static analysis with pre-defined rules.\nThey then use syntactic-level code clone detection to identify the vulnerable\nversions. These methods are hindered by imprecisions due to (1) the inclusion\nof vulnerability-irrelevant code in the analysis and (2) the inadequacy of\nsyntactic-level code clone detection. This paper presents Vercation, an\napproach designed to identify vulnerable versions of OSS written in C/C++.\nVercation combines program slicing with a Large Language Model (LLM) to\nidentify vulnerability-relevant code from vulnerability patches. It then\nbacktraces historical commits to gather previous modifications of identified\nvulnerability-relevant code. We propose semantic-level code clone detection to\ncompare the differences between pre-modification and post-modification code,\nthereby locating the vulnerability-introducing commit (vic) and enabling to\nidentify the vulnerable versions between the patch commit and the vic. We\ncurate a dataset linking 74 OSS vulnerabilities and 1013 versions to evaluate\nVercation. On this dataset, our approach achieves the F1 score of 92.4%,\noutperforming current state-of-the-art methods. More importantly, Vercation\ndetected 134 incorrect vulnerable OSS versions in NVD reports.\n","subjects":["Computing Research Repository/Software Engineering","Computing Research Repository/Cryptography and Security"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}