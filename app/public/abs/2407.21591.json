{"id":"2407.21591","title":"Simpler Optimal Sorting from a Directed Acyclic Graph","authors":"Ivor van der Hoog, Eva Rotenberg, Daniel Rutschmann","authorsParsed":[["van der Hoog","Ivor",""],["Rotenberg","Eva",""],["Rutschmann","Daniel",""]],"versions":[{"version":"v1","created":"Wed, 31 Jul 2024 13:27:10 GMT"},{"version":"v2","created":"Thu, 1 Aug 2024 14:17:33 GMT"},{"version":"v3","created":"Tue, 27 Aug 2024 10:21:10 GMT"},{"version":"v4","created":"Mon, 2 Sep 2024 17:14:17 GMT"},{"version":"v5","created":"Thu, 12 Sep 2024 11:41:44 GMT"}],"updateDate":"2024-09-13","timestamp":1722432430000,"abstract":"  Fredman proposed in 1976 the following algorithmic problem: Given are a\nground set $X$, some partial order $P$ over $X$, and some comparison oracle\n$O_L$ that specifies a linear order $L$ over $X$ that extends $P$. A query to\n$O_L$ has as input distinct $x, x' \\in X$ and outputs whether $x <_L x'$ or\nvice versa. If we denote by $e(P)$ the number of linear extensions of $P$, then\n$\\log e(P)$ is a worst-case lower bound on the number of queries needed to\noutput the sorted order of $X$.\n  Fredman did not specify in what form the partial order is given. Haeupler,\nHlad\\'ik, Iacono, Rozhon, Tarjan, and T\\v{e}tek ('24) propose to assume as\ninput a directed acyclic graph, $G$, with $m$ edges and $n=|X|$ vertices.\nDenote by $P_G$ the partial order induced by $G$. Algorithmic performance is\nmeasured in running time and the number of queries used, where they use\n$\\Theta(m + n + \\log e(P_G))$ time and $\\Theta(\\log e(P_G))$ queries to output\n$X$ in its sorted order. Their algorithm is worst-case optimal in terms of\nrunning time and queries, both. Their algorithm combines topological sorting\nwith heapsort. Their analysis relies upon sophisticated counting arguments\nusing entropy, recursively defined sets defined over the run of their\nalgorithm, and vertices in the graph that they identify as bottlenecks for\nsorting.\n  In this paper, we do away with sophistication. We show that when the input is\na directed acyclic graph then the problem admits a simple solution using\n$\\Theta(m + n + \\log e(P_G))$ time and $\\Theta(\\log e(P_G))$ queries.\nEspecially our proofs are much simpler as we avoid the usage of advanced\ncharging arguments and data structures, and instead rely upon two brief\nobservations.\n","subjects":["Computing Research Repository/Data Structures and Algorithms"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}