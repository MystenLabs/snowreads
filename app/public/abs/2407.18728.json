{"id":"2407.18728","title":"Designing and Implementing a Generator Framework for a SIMD Abstraction\n  Library","authors":"Johannes Pietrzyk and Alexander Krause and Dirk Habich and Wolfgang\n  Lehner","authorsParsed":[["Pietrzyk","Johannes",""],["Krause","Alexander",""],["Habich","Dirk",""],["Lehner","Wolfgang",""]],"versions":[{"version":"v1","created":"Fri, 26 Jul 2024 13:25:38 GMT"}],"updateDate":"2024-07-29","timestamp":1722000338000,"abstract":"  The Single Instruction Multiple Data (SIMD) parallel paradigm is a\nwell-established and heavily-used hardware-driven technique to increase the\nsingle-thread performance in different system domains such as database or\nmachine learning. Depending on the hardware vendor and the specific processor\ngeneration/version, SIMD capabilities come in different flavors concerning the\nregister size and the supported SIMD instructions. Due to this heterogeneity\nand the lack of standardized calling conventions, building high-performance and\nportable systems is a challenging task. To address this challenge, academia and\nindustry have invested a remarkable effort into creating SIMD abstraction\nlibraries that provide unified access to different SIMD hardware capabilities.\nHowever, those one-size-fits-all library approaches are inherently complex,\nwhich hampers maintainability and extensibility. Furthermore, they assume\nsimilar SIMD hardware designs, which may be invalidated through ARM SVE's\nemergence. Additionally, while existing SIMD abstraction libraries do a great\njob of hiding away the specifics of the underlying hardware, their lack of\nexpressiveness impedes crucial algorithm design decisions for system\ndevelopers. To overcome these limitations, we present TSLGen, a novel\nend-to-end framework approach for generating an SIMD abstraction library in\nthis paper. We have implemented our TSLGen framework and used our generated\nTemplate SIMD Library (TSL) to program various system components from different\ndomains. As we will show, the programming effort is comparable to existing\nlibraries, and we achieve the same performance results. However, our framework\nis easy to maintain and to extend, which simultaneously supports disruptive\nchanges to the interface by design and exposes valuable insights for assessing\nprovided functionality.\n","subjects":["Computing Research Repository/Databases","Computing Research Repository/Software Engineering"],"license":"http://creativecommons.org/licenses/by/4.0/"}