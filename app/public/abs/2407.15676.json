{"id":"2407.15676","title":"Preventing Out-of-Gas Exceptions by Typing","authors":"Luca Aceto, Daniele Gorla, Stian Lybech, Mohammad Hamdaqa","authorsParsed":[["Aceto","Luca",""],["Gorla","Daniele",""],["Lybech","Stian",""],["Hamdaqa","Mohammad",""]],"versions":[{"version":"v1","created":"Mon, 22 Jul 2024 14:43:05 GMT"}],"updateDate":"2024-07-23","timestamp":1721659385000,"abstract":"  We continue the development of TinySol, a minimal object-oriented language\nbased on Solidity, the standard smart-contract language used for the Ethereum\nplatform. We first extend TinySol with exceptions and a gas mechanism, and\nequip it with a small-step operational semantics. Introducing the gas mechanism\nis fundamental for modelling real-life smart contracts in TinySol, since this\nis the way in which termination of Ethereum smart contracts is usually ensured.\nWe then devise a type system for smart contracts guaranteeing that such\nprograms never run out of gas at runtime. This is a desirable property for\nsmart contracts, since a transaction that runs out of gas is aborted, but the\nprice paid to run the code is not returned to the invoker.\n","subjects":["Computing Research Repository/Programming Languages"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"WOSbndhOCbMGTJGeo9rrMIOM_q6DSvnRZbO9qzuODgQ","pdfSize":"378472"}
