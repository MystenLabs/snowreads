{"id":"2407.06348","title":"FORAY: Towards Effective Attack Synthesis against Deep Logical\n  Vulnerabilities in DeFi Protocols","authors":"Hongbo Wen, Hanzhi Liu, Jiaxin Song, Yanju Chen, Wenbo Guo, Yu Feng","authorsParsed":[["Wen","Hongbo",""],["Liu","Hanzhi",""],["Song","Jiaxin",""],["Chen","Yanju",""],["Guo","Wenbo",""],["Feng","Yu",""]],"versions":[{"version":"v1","created":"Mon, 8 Jul 2024 19:35:48 GMT"},{"version":"v2","created":"Sat, 31 Aug 2024 01:48:25 GMT"}],"updateDate":"2024-09-04","timestamp":1720467348000,"abstract":"  Blockchain adoption has surged with the rise of Decentralized Finance (DeFi)\napplications. However, the significant value of digital assets managed by DeFi\nprotocols makes them prime targets for attacks. Current smart contract\nvulnerability detection tools struggle with DeFi protocols due to deep logical\nbugs arising from complex financial interactions between multiple smart\ncontracts. These tools primarily analyze individual contracts and resort to\nbrute-force methods for DeFi protocols crossing numerous smart contracts,\nleading to inefficiency. We introduce Foray, a highly effective attack\nsynthesis framework against deep logical bugs in DeFi protocols. Foray proposes\na novel attack sketch generation and completion framework. Specifically,\ninstead of treating DeFis as regular programs, we design a domain-specific\nlanguage (DSL) to lift the low-level smart contracts into their high-level\nfinancial operations. Based on our DSL, we first compile a given DeFi protocol\ninto a token flow graph, our graphical representation of DeFi protocols. Then,\nwe design an efficient sketch generation method to synthesize attack sketches\nfor a certain attack goal (e.g., price manipulation, arbitrage, etc.). This\nalgorithm strategically identifies candidate sketches by finding reachable\npaths in TFG, which is much more efficient than random enumeration. For each\ncandidate sketch written in our DSL, Foray designs a domain-specific symbolic\ncompilation to compile it into SMT constraints. Our compilation simplifies the\nconstraints by removing redundant smart contract semantics. It maintains the\nusability of symbolic compilation, yet scales to problems orders of magnitude\nlarger. Finally, the candidates are completed via existing solvers and are\ntransformed into concrete attacks via direct syntax transformation.\n","subjects":["Computing Research Repository/Cryptography and Security","Computing Research Repository/Programming Languages"],"license":"http://creativecommons.org/licenses/by/4.0/"}