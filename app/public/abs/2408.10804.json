{"id":"2408.10804","title":"Kotlin's Type System is (Also) Unsound","authors":"Elad Kinsbruner and Hila Peleg and Shachar Itzhaky","authorsParsed":[["Kinsbruner","Elad",""],["Peleg","Hila",""],["Itzhaky","Shachar",""]],"versions":[{"version":"v1","created":"Tue, 20 Aug 2024 12:54:12 GMT"}],"updateDate":"2024-08-21","timestamp":1724158452000,"abstract":"  Soundness of a type system is a fundemental property that guarantees that no\noperation that is not supported by a value will be performed on that value at\nrun time. A type checker for a sound type system is expected to issue a warning\non every type error. While soundness is a desirable property for many practical\napplications, in 2016, Amin and Tate presented the first unsoundness proof for\ntwo major industry languages: Java and Scala. This proof relied on use-site\nvariance and implicit null values.\n  We present an unsoundness proof for Kotlin, another emerging industry\nlanguage, which relies on a previously unknown unsound combination of language\nfeatures. Kotlin does not have implicit null values, meaning that the proof by\nAmin and Tate would not work for Kotlin. Our new proof, which is an infringing\ncode snippet, utilizes Kotlin's \\emph{declaration-site} variance specification\nand does not require implicit null values.\n  We present this counterexample to soundness in full along with detailed\nexplanations of every step. Finally, we present a thorough discussion on\nprecisely which language features cause this issue, as well as how Kotlin's\ncompiler can be patched to fix it.\n","subjects":["Computing Research Repository/Programming Languages","Computing Research Repository/Software Engineering"],"license":"http://creativecommons.org/licenses/by-sa/4.0/","blobId":"Temd0rcMfFBR4yZlq3-Muo8z557AyBuDLxZRSZlvnwM","pdfSize":"171734"}
