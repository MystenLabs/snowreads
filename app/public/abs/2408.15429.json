{"id":"2408.15429","title":"Generation of Compiler Backends from Formal Models of Hardware","authors":"Gus Henry Smith","authorsParsed":[["Smith","Gus Henry",""]],"versions":[{"version":"v1","created":"Tue, 27 Aug 2024 22:08:27 GMT"}],"updateDate":"2024-08-29","timestamp":1724796507000,"abstract":"  Compilers convert between representations -- usually, from higher-level,\nhuman writable code to lower-level, machine-readable code. A compiler backend\nis the portion of the compiler containing optimizations and code generation\nroutines for a specific hardware target. In this dissertation, I advocate for a\nspecific way of building compiler backends: namely, by automatically generating\nthem from explicit, formal models of hardware using automated reasoning\nalgorithms. I describe how automatically generating compilers from formal\nmodels of hardware leads to increased optimization ability, stronger\ncorrectness guarantees, and reduced development time for compiler backends. As\nevidence, I present two case studies: first, Glenside, which uses equality\nsaturation to increase the 3LA compiler's ability to offload operations to\nmachine learning accelerators, and second, Lakeroad, a technology mapper for\nFPGAs which uses program synthesis and semantics extracted from Verilog to map\nhardware designs to complex, programmable hardware primitives.\n","subjects":["Computing Research Repository/Programming Languages","Computing Research Repository/Hardware Architecture"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"ku2-LDxlBiZyNo7G299SvIrDvnjXgDJu_KE6SCsYVeo","pdfSize":"2056083"}
