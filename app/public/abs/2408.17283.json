{"id":"2408.17283","title":"Non-Promise Version of Unique Sink Orientations","authors":"Tiago Oliveira Marques","authorsParsed":[["Marques","Tiago Oliveira",""]],"versions":[{"version":"v1","created":"Fri, 30 Aug 2024 13:31:09 GMT"}],"updateDate":"2024-09-02","timestamp":1725024669000,"abstract":"  A unique sink orientation (USO) is an orientation of the edges of a hypercube\nsuch that each face has a unique sink. Many optimization problems like linear\nprograms reduce to USOs, in the sense that each vertex corresponds to a\npossible solution, and the global sink corresponds to the optimal solution.\nPeople have been studying intensively the problem of find the sink of a USO\nusing vertex evaluations, i.e., queries which return the orientation of the\nedges around a vertex. This problem is a so called promise problem, as it\nassumes that the orientation it receives is a USO.\n  In this paper, we analyze a non-promise version of the USO problem, in which\nwe try to either find a sink or an efficiently verifiable violation of the USO\nproperty. This problem is worth investigating, because some problems which\nreduce to USO are also promise problems (and so we can also define a\nnon-promise version for them), and it would be interesting to discover where\nUSO lies in the hierarchy of subclasses of $\\texttt{TFNP}^\\texttt{dt}$, and for\nthis a total search problem is required (which is the case for the non-promise\nversion).\n  We adapt many known properties and algorithms from the promise version to the\nnon-promise one, including known algorithms for small dimensions and lower and\nupper bounds, like the Fibonacci Seesaw Algorithm. Furthermore, we present an\nefficient resolution proof of the problem, which shows it is in the search\ncomplexity class $\\texttt{PLS}^\\texttt{dt}$ (although this fact was already\nknown via reductions). Finally, although initially the only allowed violations\nconsist of $2$ vertices, we generalize them to more vertices, and provide a\nfull categorization of violations with $4$ vertices, showing that they are also\nefficiently verifiable.\n","subjects":["Computing Research Repository/Discrete Mathematics","Mathematics/Combinatorics"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}