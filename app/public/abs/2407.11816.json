{"id":"2407.11816","title":"Modal Effect Types","authors":"Wenhao Tang, Leo White, Stephen Dolan, Daniel Hillerstr\\\"om, Sam\n  Lindley, Anton Lorenzen","authorsParsed":[["Tang","Wenhao",""],["White","Leo",""],["Dolan","Stephen",""],["Hillerstr√∂m","Daniel",""],["Lindley","Sam",""],["Lorenzen","Anton",""]],"versions":[{"version":"v1","created":"Tue, 16 Jul 2024 15:07:01 GMT"}],"updateDate":"2024-07-17","timestamp":1721142421000,"abstract":"  We propose a novel type system for effects and handlers using modal types.\nConventional effect systems attach effects to function types, which can lead to\nverbose effect-polymorphic types, especially for higher-order functions. Our\nmodal effect system provides succinct types for higher-order first-class\nfunctions without losing modularity and reusability. The core idea is to\ndecouple effects from function types and instead to track effects through\nrelative and absolute modalities, which represent transformations on the\nambient effects provided by the context.\n  We formalise the idea of modal effect types in a multimodal System F-style\ncore calculus Met with effects and handlers. Met supports modular effectful\nprogramming via modalities without relying on effect variables. We encode a\npractical fragment of a conventional row-based effect system with effect\npolymorphism, which captures most common use-cases, into Met in order to\nformally demonstrate the expressive power of modal effect types. To recover the\nfull power of conventional effect systems beyond this fragment, we seamlessly\nextend Met to Mete with effect variables. We propose a surface language Metel\nfor Mete with a sound and complete type inference algorithm inspired by\nFreezeML.\n","subjects":["Computing Research Repository/Programming Languages"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"tBr0nz5WXK-kevj2Xl9cAB9TBh6R7TUearPHSYH9rik","pdfSize":"1030987"}
