{"id":"2408.04230","title":"Enabling Communication via APIs for Mainframe Applications","authors":"Vini Kanvar, Srikanth Tamilselvam, Keerthi Narayan Raghunath","authorsParsed":[["Kanvar","Vini",""],["Tamilselvam","Srikanth",""],["Raghunath","Keerthi Narayan",""]],"versions":[{"version":"v1","created":"Thu, 8 Aug 2024 05:35:36 GMT"}],"updateDate":"2024-08-09","timestamp":1723095336000,"abstract":"  For decades, mainframe systems have been vital in enterprise computing,\nsupporting essential applications across industries like banking, retail, and\nhealthcare. To harness these legacy applications and facilitate their reuse,\nthere is increasing interest in using Application Programming Interfaces (APIs)\nto expose their data and functionalities, enabling the creation of new\napplications. However, identifying and exposing APIs for various business use\ncases presents significant challenges, including understanding legacy code,\nseparating dependent components, introducing new artifacts, and making changes\nwithout disrupting functionality or compromising key Service Level Agreements\n(SLAs) like Turnaround Time (TAT).\n  We address these challenges by proposing a novel framework for creating APIs\nfor legacy mainframe applications. Our approach involves identifying APIs by\ncompiling artifacts such as transactions, screens, control flow blocks,\ninter-microservice calls, business rules, and data accesses. We use static\nanalyses like liveness and reaching definitions to traverse the code and\nautomatically compute API signatures, which include request/response fields.\n  To evaluate our framework, we conducted a qualitative survey with nine\nmainframe developers, averaging 15 years of experience. This survey helped\nidentify candidate APIs and estimate development time for coding these APIs on\na public mainframe application, GENAPP, and two industry mainframe\napplications. The results showed that our framework effectively identified more\ncandidate APIs and reduced implementation time. The API signature computation\nis integrated into IBM Watsonx Code Assistant for Z Refactoring Assistant. We\nverified the correctness of the identified APIs by executing them on an IBM Z\nmainframe system, demonstrating the practical viability of our approach.\n","subjects":["Computing Research Repository/Software Engineering","Computing Research Repository/Programming Languages"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"MJ2e89xYQk_RMWqLzflB4QiPoY3fsMmdBihnSEWFbcc","pdfSize":"1132806"}
