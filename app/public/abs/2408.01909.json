{"id":"2408.01909","title":"Scaling Symbolic Execution to Large Software Systems","authors":"Gabor Horvath, Reka Kovacs, Zoltan Porkolab","authorsParsed":[["Horvath","Gabor",""],["Kovacs","Reka",""],["Porkolab","Zoltan",""]],"versions":[{"version":"v1","created":"Sun, 4 Aug 2024 02:54:58 GMT"}],"updateDate":"2024-08-06","timestamp":1722740098000,"abstract":"  Static analysis is the analysis of a program without executing it, usually\ncarried out by an automated tool. Symbolic execution is a popular static\nanalysis technique used both in program verification and in bug detection\nsoftware. It works by interpreting the code, introducing a symbol for each\nvalue unknown at compile time (e.g. user-given inputs), and carrying out\ncalculations symbolically. The analysis engine strives to explore multiple\nexecution paths simultaneously, although checking all paths is an intractable\nproblem, due to the vast number of possibilities.\n  We focus on an error finding framework called the Clang Static Analyzer, and\nthe infrastructure built around it named CodeChecker. The emphasis is on\nachieving end-to-end scalability. This includes the run time and memory\nconsumption of the analysis, bug presentation to the users, automatic false\npositive suppression, incremental analysis, pattern discovery in the results,\nand usage in continuous integration loops. We also outline future directions\nand open problems concerning these tools.\n  While a rich literature exists on program verification software, error\nfinding tools normally need to settle for survey papers on individual\ntechniques. In this paper, we not only discuss individual methods, but also how\nthese decisions interact and reinforce each other, creating a system that is\ngreater than the sum of its parts. Although the Clang Static Analyzer can only\nhandle C-family languages, the techniques introduced in this paper are mostly\nlanguage-independent and applicable to other similar static analysis tools.\n","subjects":["Computing Research Repository/Software Engineering"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"Uajo-XRKqJbh4GDcLKBpzqL9ZQwhsNmZRff9dCapniI","pdfSize":"1230737","txDigest":"2TYLwmdv8JykHFBxjaKG92tGsSrb7Nh6Bm75cZwPurYh","endEpoch":"1","status":"CERTIFIED"}
