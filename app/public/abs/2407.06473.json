{"id":"2407.06473","title":"Type Universes as Allocation Effects","authors":"Paulette Koronkevich and William J. Bowman","authorsParsed":[["Koronkevich","Paulette",""],["Bowman","William J.",""]],"versions":[{"version":"v1","created":"Tue, 9 Jul 2024 00:35:41 GMT"}],"updateDate":"2024-07-10","timestamp":1720485341000,"abstract":"  In this paper, we explore a connection between type universes and memory\nallocation. Type universe hierarchies are used in dependent type theories to\nensure consistency, by forbidding a type from quantifying over all types.\nInstead, the types of types (universes) form a hierarchy, and a type can only\nquantify over types in other universes (with some exceptions), restricting\ncyclic reasoning in proofs. We present a perspective where universes also\ndescribe \\emph{where} values are allocated in the heap, and the choice of\nuniverse algebra imposes a structure on the heap overall. The resulting type\nsystem provides a simple declarative system for reasoning about and restricting\nmemory allocation, without reasoning about reads or writes. We present a\ntheoretical framework for equipping a type system with higher-order references\nrestricted by a universe hierarchy, and conjecture that many existing universe\nalgebras give rise to interesting systems for reasoning about allocation. We\npresent 3 instantiations of this approach to enable reasoning about allocation\nin the simply typed $\\lambda$-calculus: (1) the standard ramified universe\nhierarchy, which we prove guarantees termination of the language extended with\nhigher-order references by restricting cycles in the heap; (2) an extension\nwith an \\emph{impredicative} base universe, which we conjecture enables\nfull-ground references (with terminating computation but cyclic ground data\nstructures); (3) an extension with \\emph{universe polymorphism}, which divides\nthe heap into fine-grained regions.\n","subjects":["Computing Research Repository/Programming Languages"],"license":"http://creativecommons.org/licenses/by-sa/4.0/"}