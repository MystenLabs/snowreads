{"id":"2407.13046","title":"Unsafe Impedance: Safe Languages and Safe by Design Software","authors":"Lee Barney and Adolfo Neto","authorsParsed":[["Barney","Lee",""],["Neto","Adolfo",""]],"versions":[{"version":"v1","created":"Wed, 17 Jul 2024 22:55:57 GMT"}],"updateDate":"2024-07-19","timestamp":1721256957000,"abstract":"  In December 2023, security agencies from five countries in North America,\nEurope, and the south Pacific produced a document encouraging senior executives\nin all software producing organizations to take responsibility for and\noversight of the security of the software their organizations produce. In\nFebruary 2024, the White House released a cybersecurity outline, highlighting\nthe December document. In this work we review the safe languages listed in\nthese documents, and compare the safety of those languages with Erlang and\nElixir, two BEAM languages.\n  These security agencies' declaration of some languages as safe is necessary\nbut insufficient to make wise decisions regarding what language to use when\ncreating code. We propose an additional way of looking at languages and the\nease with which unsafe code can be written and used. We call this new\nperspective \\em{unsafe impedance}. We then go on to use unsafe impedance to\nexamine nine languages that are considered to be safe. Finally, we suggest that\nbusiness processes include what we refer to as an Unsafe Acceptance Process.\nThis Unsafe Acceptance Process can be used as part of the memory safe roadmaps\nsuggested by these agencies. Unsafe Acceptance Processes can aid organizations\nin their production of safe by design software.\n","subjects":["Computing Research Repository/Programming Languages"],"license":"http://creativecommons.org/licenses/by/4.0/","blobId":"brYu2Q7oeMJwYS4HTQOC0EbZdAb2A2-tjN4sgmweaZY","pdfSize":"462330"}
