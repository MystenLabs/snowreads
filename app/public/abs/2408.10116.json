{"id":"2408.10116","title":"Vulseye: Detect Smart Contract Vulnerabilities via Stateful Directed\n  Graybox Fuzzing","authors":"Ruichao Liang, Jing Chen, Cong Wu, Kun He, Yueming Wu, Ruochen Cao,\n  Ruiying Du, Yang Liu, Ziming Zhao","authorsParsed":[["Liang","Ruichao",""],["Chen","Jing",""],["Wu","Cong",""],["He","Kun",""],["Wu","Yueming",""],["Cao","Ruochen",""],["Du","Ruiying",""],["Liu","Yang",""],["Zhao","Ziming",""]],"versions":[{"version":"v1","created":"Mon, 19 Aug 2024 16:03:03 GMT"}],"updateDate":"2024-08-20","timestamp":1724083383000,"abstract":"  Smart contracts, the cornerstone of decentralized applications, have become\nincreasingly prominent in revolutionizing the digital landscape. However,\nvulnerabilities in smart contracts pose great risks to user assets and\nundermine overall trust in decentralized systems. But current smart contract\nfuzzers fall short of expectations in testing efficiency for two primary\nreasons. Firstly, smart contracts are stateful programs, and existing\napproaches, primarily coverage-guided, lack effective feedback from the\ncontract state. Consequently, they struggle to effectively explore the contract\nstate space. Secondly, coverage-guided fuzzers, aiming for comprehensive\nprogram coverage, may lead to a wastage of testing resources on benign code\nareas. This wastage worsens in smart contract testing, as the mix of code and\nstate spaces further complicates comprehensive testing.\n  To address these challenges, we propose Vulseye, a stateful directed graybox\nfuzzer for smart contracts guided by vulnerabilities. Different from prior\nworks, Vulseye achieves stateful directed fuzzing by prioritizing testing\nresources to code areas and contract states that are more prone to\nvulnerabilities. We introduce Code Targets and State Targets into fuzzing loops\nas the testing targets of Vulseye. We use static analysis and pattern matching\nto pinpoint Code Targets, and propose a scalable backward analysis algorithm to\nspecify State Targets. We design a novel fitness metric that leverages feedback\nfrom both the contract code space and state space, directing fuzzing toward\nthese targets. With the guidance of code and state targets, Vulseye alleviates\nthe wastage of testing resources on benign code areas and achieves effective\nstateful fuzzing. In comparison with state-of-the-art fuzzers, Vulseye\ndemonstrated superior effectiveness and efficiency.\n","subjects":["Computing Research Repository/Software Engineering"],"license":"http://creativecommons.org/licenses/by/4.0/"}