{"id":"2408.02793","title":"Evaluating Large Language Models for Automatic Register Transfer Logic\n  Generation via High-Level Synthesis","authors":"Sneha Swaroopa, Rijoy Mukherjee, Anushka Debnath, and Rajat Subhra\n  Chakraborty","authorsParsed":[["Swaroopa","Sneha",""],["Mukherjee","Rijoy",""],["Debnath","Anushka",""],["Chakraborty","Rajat Subhra",""]],"versions":[{"version":"v1","created":"Mon, 5 Aug 2024 19:19:30 GMT"}],"updateDate":"2024-08-07","timestamp":1722885570000,"abstract":"  The ever-growing popularity of large language models (LLMs) has resulted in\ntheir increasing adoption for hardware design and verification. Prior research\nhas attempted to assess the capability of LLMs to automate digital hardware\ndesign by producing superior-quality Register Transfer Logic (RTL)\ndescriptions, particularly in Verilog. However, these tests have revealed that\nVerilog code production using LLMs at current state-of-the-art lack sufficient\nfunctional correctness to be practically viable, compared to automatic\ngeneration of programs in general-purpose programming languages such as C, C++,\nPython, etc. With this as the key insight, in this paper we assess the\nperformance of a two-stage software pipeline for automated Verilog RTL\ngeneration: LLM based automatic generation of annotated C++ code suitable for\nhigh-level synthesis (HLS), followed by HLS to generate Verilog RTL. We have\nbenchmarked the performance of our proposed scheme using the open-source\nVerilogEval dataset, for four different industry-scale LLMs, and the Vitis HLS\ntool. Our experimental results demonstrate that our two-step technique\nsubstantially outperforms previous proposed techniques of direct Verilog RTL\ngeneration by LLMs in terms of average functional correctness rates, reaching\nscore of 0.86 in pass@1 metric.\n","subjects":["Computing Research Repository/Hardware Architecture"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}