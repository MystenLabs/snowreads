{"id":"2408.12539","title":"LOUD: Synthesizing Strongest and Weakest Specifications","authors":"Kanghee Park, Xuanyu Peng, Loris D'Antoni","authorsParsed":[["Park","Kanghee",""],["Peng","Xuanyu",""],["D'Antoni","Loris",""]],"versions":[{"version":"v1","created":"Thu, 22 Aug 2024 16:53:18 GMT"}],"updateDate":"2024-08-23","timestamp":1724345598000,"abstract":"  Specifications allow us to formally state and understand what programs are\nintended to do. To help one extract useful properties from code, Park et al.\nrecently proposed a framework that given (i) a quantifier-free query posed\nabout a set of function definitions, and (ii) a domain-specific language L in\nwhich each extracted property is to be expressed (we call properties in the\nlanguage L-properties), synthesizes a set of L-properties such that each of the\nproperty is a strongest L-consequence for the query: the property is an\nover-approximation of query and there is no other L-property that\nover-approximates query and is strictly more precise than each property.\n  The framework by Park et al. has two key limitations. First, it only supports\nquantifier-free query formulas and thus cannot synthesize specifications for\nqueries involving nondeterminism, concurrency, etc. Second, it can only compute\nL-consequences, i.e., over-approximations of the program behavior.\n  This paper addresses these two limitations and presents a framework, Loud,\nfor synthesizing strongest L-consequences and weakest L-implicants (i.e.,\nunder-approximations of the query) for function definitions that can involve\nexistential quantifiers.\n  We implemented a solver, Aspire, for problems expressed in Loud which can be\nused to describe and identify sources of bugs in both deterministic and\nnondeterministic programs, extract properties from concurrent programs, and\nsynthesize winning strategies in two-player games.\n","subjects":["Computing Research Repository/Programming Languages"],"license":"http://creativecommons.org/licenses/by/4.0/"}