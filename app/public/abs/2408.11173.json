{"id":"2408.11173","title":"Delegation with Trust<T>: A Scalable, Type- and Memory-Safe Alternative\n  to Locks","authors":"Noaman Ahmad, Ben Baenen, Chen Chen, and Jakob Eriksson","authorsParsed":[["Ahmad","Noaman",""],["Baenen","Ben",""],["Chen","Chen",""],["Eriksson","Jakob",""]],"versions":[{"version":"v1","created":"Tue, 20 Aug 2024 20:11:33 GMT"}],"updateDate":"2024-08-22","timestamp":1724184693000,"abstract":"  We present Trust<T>, a general, type- and memory-safe alternative to locking\nin concurrent programs. Instead of synchronizing multi-threaded access to an\nobject of type T with a lock, the programmer may place the object in a\nTrust<T>. The object is then no longer directly accessible. Instead a\ndesignated thread, the object's trustee, is responsible for applying any\nrequested operations to the object, as requested via the Trust<T> API. Locking\nis often said to offer a limited throughput per lock. Trust<T> is based on\ndelegation, a message-passing technique which does not suffer this per-lock\nlimitation. Instead, per-object throughput is limited by the capacity of the\nobject's trustee, which is typically considerably higher. Our evaluation shows\nTrust<T> consistently and considerably outperforming locking where lock\ncontention exists, with up to 22x higher throughput in microbenchmarks, and\n5-9x for a home grown key-value store, as well as memcached, in situations with\nhigh lock contention. Moreover, Trust<T> is competitive with locks even in the\nabsence of lock contention.\n","subjects":["Computing Research Repository/Performance","Computing Research Repository/Operating Systems"],"license":"http://creativecommons.org/licenses/by-nc-nd/4.0/"}