{"id":"2407.20002","title":"Formal Foundations for Translational Separation Logic Verifiers\n  (extended version)","authors":"Thibault Dardinier (ETH Zurich), Michael Sammler (ETH Zurich), Gaurav\n  Parthasarathy (ETH Zurich), Alexander J. Summers (University of British\n  Columbia), Peter M\\\"uller (ETH Zurich)","authorsParsed":[["Dardinier","Thibault","","ETH Zurich"],["Sammler","Michael","","ETH Zurich"],["Parthasarathy","Gaurav","","ETH Zurich"],["Summers","Alexander J.","","University of British\n  Columbia"],["MÃ¼ller","Peter","","ETH Zurich"]],"versions":[{"version":"v1","created":"Mon, 29 Jul 2024 13:34:12 GMT"}],"updateDate":"2024-07-30","timestamp":1722260052000,"abstract":"  Program verification tools are often implemented as front-end translations of\nan input program into an intermediate verification language (IVL) such as\nBoogie, GIL, Viper, or Why3. The resulting IVL program is then verified using\nan existing back-end verifier. A soundness proof for such a translational\nverifier needs to relate the input program and verification logic to the\nsemantics of the IVL, which in turn needs to be connected with the verification\nlogic implemented in the back-end verifiers. Performing such proofs is\nchallenging due to the large semantic gap between the input and output programs\nand logics, especially for complex verification logics such as separation\nlogic.\n  This paper presents a formal framework for reasoning about translational\nseparation logic verifiers. At its center is a generic core IVL that captures\nthe essence of different separation logics. We define its operational semantics\nand formally connect it to two different back-end verifiers, which use symbolic\nexecution and verification condition generation, resp. Crucially, this\nsemantics uses angelic non-determinism to enable the application of different\nproof search algorithms and heuristics in the back-end verifiers. An axiomatic\nsemantics for the core IVL simplifies reasoning about the front-end translation\nby performing essential proof steps once and for all in the equivalence proof\nwith the operational semantics rather than for each concrete front-end\ntranslation.\n  We illustrate the usefulness of our formal framework by instantiating our\ncore IVL with elements of Viper and connecting it to two Viper back-ends as\nwell as a front-end for concurrent separation logic. All our technical results\nhave been formalized in Isabelle/HOL, including the core IVL and its semantics,\nthe semantics of two back-ends for a subset of Viper, and all proofs.\n","subjects":["Computing Research Repository/Programming Languages"],"license":"http://creativecommons.org/licenses/by/4.0/"}