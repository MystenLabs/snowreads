{"id":"2408.09037","title":"Arithmetizing Shape Analysis","authors":"Sebastian Wolff, Ekanshdeep Gupta, Zafer Esen, Hossein Hojjat, Philipp\n  R\\\"ummer, Thomas Wies","authorsParsed":[["Wolff","Sebastian",""],["Gupta","Ekanshdeep",""],["Esen","Zafer",""],["Hojjat","Hossein",""],["RÃ¼mmer","Philipp",""],["Wies","Thomas",""]],"versions":[{"version":"v1","created":"Fri, 16 Aug 2024 22:20:48 GMT"}],"updateDate":"2024-08-20","timestamp":1723846848000,"abstract":"  Memory safety is an essential correctness property of software systems. For\nprograms operating on linked heap-allocated data structures, the problem of\nproving memory safety boils down to analyzing the possible shapes of data\nstructures, leading to the field of shape analysis. This paper presents a novel\nreduction-based approach to memory safety analysis that relies on two forms of\nabstraction: flow abstraction, representing global properties of the heap graph\nthrough local flow equations; and view abstraction, which enable verification\ntools to reason symbolically about an unbounded number of heap objects. In\ncombination, the two abstractions make it possible to reduce memory-safety\nproofs to proofs about heap-less imperative programs that can be discharged\nusing off-the-shelf software verification tools without built-in support for\nheap reasoning. Using an empirical evaluation on a broad range of programs, the\npaper shows that the reduction approach can effectively verify memory safety\nfor sequential and concurrent programs operating on different kinds of linked\ndata structures, including singly-linked, doubly-linked, and nested lists as\nwell as trees.\n","subjects":["Computing Research Repository/Programming Languages"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}