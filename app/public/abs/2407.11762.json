{"id":"2407.11762","title":"Self-Duplicating Random Walks for Resilient Decentralized Learning on\n  Graphs","authors":"Maximilian Egger, Ghadir Ayache, Rawad Bitar, Antonia Wachter-Zeh,\n  Salim El Rouayheb","authorsParsed":[["Egger","Maximilian",""],["Ayache","Ghadir",""],["Bitar","Rawad",""],["Wachter-Zeh","Antonia",""],["Rouayheb","Salim El",""]],"versions":[{"version":"v1","created":"Tue, 16 Jul 2024 14:22:22 GMT"}],"updateDate":"2024-07-17","timestamp":1721139742000,"abstract":"  Consider the setting of multiple random walks (RWs) on a graph executing a\ncertain computational task. For instance, in decentralized learning via RWs, a\nmodel is updated at each iteration based on the local data of the visited node\nand then passed to a randomly chosen neighbor. RWs can fail due to node or link\nfailures. The goal is to maintain a desired number of RWs to ensure failure\nresilience. Achieving this is challenging due to the lack of a central entity\nto track which RWs have failed to replace them with new ones by forking\n(duplicating) surviving ones. Without duplications, the number of RWs will\neventually go to zero, causing a catastrophic failure of the system. We propose\na decentralized algorithm called DECAFORK that can maintain the number of RWs\nin the graph around a desired value even in the presence of arbitrary RW\nfailures. Nodes continuously estimate the number of surviving RWs by estimating\ntheir return time distribution and fork the RWs when failures are likely to\nhappen. We present extensive numerical simulations that show the performance of\nDECAFORK regarding fast detection and reaction to failures. We further present\ntheoretical guarantees on the performance of this algorithm.\n","subjects":["Computing Research Repository/Machine Learning","Computing Research Repository/Distributed, Parallel, and Cluster Computing","Computing Research Repository/Information Theory","Mathematics/Information Theory","Statistics/Applications"],"license":"http://arxiv.org/licenses/nonexclusive-distrib/1.0/"}